<?xml version='1.0' encoding='UTF-8'?>
<root>
  <system>mylyn</system>
  <issues>
    <issue>
      <id>300043</id>
      <title>[DataBinding] Need better support for binding collections of complex types</title>
      <description>Build Identifier: M20090917-0800 The way to observe properties (e.g. to refresh cell labels in a TableViewer) of a regular property (a distinct element) is trivial, but doing the same for a collection of complex types is awkward, and requires the application developer to write a significant amount of code using "obscure" classes. This is one way to observe properties of a distinct instance: IObservableMap father = BeansObservables.observeMap(elements, "father.name"); I would like to observe children more or less the same way: IObservableMap children = BeansObservables.observeMap(elements, "children.name"); 'children' would fire events whenever a child was added or removed, or whenever the name of a child was modified. (will attempt to attach a screenshot to illustrate) For bonus points :-) In both cases, it would also be nice if I could specify a collection of properties to observe, and have the method return an aggregated map of some sort. This would allow me to compile all necessary observables in one single map. Although the typical use of the returned map might be to pass it as an argument to a label provider (which typcally accepts arrays of maps, e.g. 'org.eclipse.jface.databinding.viewers.ObservableMapLabelProvider.ObservableMapLabelProvider(IObservableMap[])'), returning a single, composite map would make it easier to use in contexts where an array is not accepted. One example could be to return a map from a factory passed to 'org.eclipse.core.databinding.observable.map.CompositeMap.CompositeMap(IObservableMap, IObservableFactory)'. Hence, I would also like to have the following methods: IObservableMap father = BeansObservables.observeMap(elements, "father.firstName", "father.lastName"); IObservableMap children = BeansObservables.observeMap(elements, "children.firstName", "children.lastName"); An extended version of the snippet org.eclipse.jface.examples.databinding.snippets.Snippet025TableViewerWithPropertyDerivedColumns could be used to illustrate the problem and the solution. Right now, it only holds columns with distinct entities. Adding a column with "children" would illustrate the issue. Reproducible: Always Steps to Reproduce: 1. Open snippet org.eclipse.jface.examples.databinding.snippets.Snippet025TableViewerWithPropertyDerivedColumns 2. Add the property "Person.children" and let it return a Set or a List 3. Add a column to represent the new property, and have it updated whenever the collection of children changes, or any of the children has its name changed. 4. For the "bonus point issue": modify Person to have "name" derived from "firstName" and "lastName", and have all columns updated when either changes.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300053</id>
      <title>Inserting additional breakpoint marker into DSF Disassembly View</title>
      <description>Build Identifier: 6.0.0.200906161748 It is not possible to have other breakpoint type to show up in the DSF disassembly view. It would be nice if the view is extensible to support other than ICAddressBreakpoints and ILineBreakpoints types. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>300096</id>
      <title>[expressions][run control][cdi] DSF is missing certain debug actions from editor's context menu</title>
      <description>- Start a DSF debug session - Right click in the editor. Notice the following debug actions are missing (these are all available in CDI-GDB): o Run to line o Move to line o Resume at line o Add Watch Expression... Please see snapshot for more details. I use the above actions quite frequently (especially 'Add Watch Expression'). When reading over code in editor, users want to see the value of an expression right away and this action makes it really convenient for them to do that. The following bugzilla entries have been filed in the past regarding some of these actions: bug#249165: Resume at line bug#249162: Move to line (or Set PC here) However, I couldn't find any bugzilla entries for the other actions.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300099</id>
      <title>How developers are expected to discover injected values?</title>
      <description>How about a fairy tale (or a "green thread" :-)) describing the life of a new E4 developer: === Say I am a developer who just picked up E4 to make my new RCP text editor. I've scanned a whitepaper that explained that E4 uses model, and, in particluar the MEditor interface to represent an editor. That sounds cool so I make my MEditor class, and... hmm... I guess I need to create some SWT controls to show up the contents? StyledText? OK, that needs parent composite... Hmm... Where do I get the parent composite? And... hmm... where do I place the code that actually creates the conrol? === At this point the story supposed to somehow jump to adding lines like this: @Inject private Composite parent; to the editor's class for the parent composite and add @PostConstruct void init() {...} to hold the code to create the control. === Question is: how would the developer know about this? (The example is intentionally oversimplified. Those two values probably can be considered "well known" things and we can say that we'll have a wizard that would create a sceleton editor with those lines. But the point here is that we need to consider a general solution to this.)</description>
      <attachments/>
    </issue>
    <issue>
      <id>300149</id>
      <title>Support remote cross referencing with a convenient API on the client and SPI on the server for the stores to implement</title>
      <description>It would be great to extend CDO with the possibility to query all the objects referencing a certain object. The so-called crossreferencing (or xref) functionality. Using the model available on the server it is possible to determine for each EClass what queries are needed to retrieve the referencing objects. A thing to consider is how to handle larger volumes of referencing objects. It is clearly possible that multiple queries are needed to retrieve all cross referencers so it can be difficult to implement paging or sublist behavior. So maybe the client api can pass in a max number of returned objects. To support xref I think we need: - an api and convenience method on the client - a server side api definition - implementation of this functionality in each store Eike and others let me know if you have any comments or feedback on this. Thanks! Martin T.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300403</id>
      <title>Adopt Windows 7 DirectX 2D API - use it instead of old GDI+ API</title>
      <description>Draw2D suffers from GDI+ painting performance with anti-alias enabled. In particular the performance degrades when dash-lines are painted. Draw2D solution for this problem would be paint without anti-alias and then when UI thread is free paint the same thing again with anti-alias. This solution is overly-complicated and doesn't fit well in the current framework. Given that OpenGL 3-rd party Java bindings: LWJGL and JOGL can't be part of Orbit, because of the IP test failures, Draw2D would be interested in faster SWT rendering at least on Windows 7.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300472</id>
      <title>[Dialogs] [JFace] Provide accessor for dialog messages</title>
      <description>It would be nice to have access to the Dialog messages (eg. IDialogConstants.OK_LABEL) trough API instead of a field access. This would allow the RAP team to provide a session-based translation for the labels and furthermore improves the usability for our current users. Developers who want to single-source their applications for RCP and RAP cannot use the existing API of JFace as the labels are hardcoded as static fields and RAP has no chance to intervene this behavior without breaking API. I suggest to provide an accessor like SWT.getMessage() to get the translated string as this would allow developers to use the same API in RCP and JFace. I'd be happy to provide a patch once we decided on a possible approach. As suggested above, I'd introduce an accessor on Dialog itself and introduce message keys in IDialogConstants.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300500</id>
      <title>Eclipse Foundation staff are thirsty at EclipseCon</title>
      <description>Reserved bug for EclipseCon</description>
      <attachments/>
    </issue>
    <issue>
      <id>300709</id>
      <title>[Webapp] Provide the ability to override the Help Contents menu action to support custom help systems</title>
      <description>Build Identifier: eclipse-SDK-I20091217-0819-win32 We would like the ability to override the Help Contents menu action to point to a custom help system such as a web 2.0 help system. This would be done via an extension point. The help system will likely be local, but would have a different URL then the original help system. We may want to look at using the BaseHelpSystem interface for this solution, where the custom help is an implementation of a BaseHelpSystem Reproducible: Didn't try Steps to Reproduce: 1. Implement a custom help system 2. When Help -&gt; Contents is clicked, show custom help system instead of Eclipse default help system 3.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300930</id>
      <title>Ability to define custom artifact location in managed build</title>
      <description>Build Identifier: 7.0.0.I201001150805 When one project depends on another, and the dependent project's build-artifact is set to an absolute path, Gmake always fails for the referencing project with a 'multiple target patterns' error. Reproducible: Always Steps to Reproduce: 1. Create two projects 'a' and 'b', such that project 'a' references the active configuration of project 'b'. 2. Set project 'b's build-artifact to an absolute path, like C:/${ProjName}.lib. 3. Build project 'a'. -&gt; Gmake fails for project 'a' with a 'multiple target patterns' error. The GnuMakefileGenerator assumes the dependent build-artifact is always a relative path, and always prepends &lt;referenced_project_loc&gt;/&lt;referenced_config&gt;/ to it. The attached patch fixes the makefile-generation to handle this scenario.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300964</id>
      <title>EGit seems to ignore .gitignore's contents</title>
      <description>Though I have the following lines in my .gitignore, EGit continues to mark the files/folders with a ? in the Navigator and adds them to Git when I select "Add to Version Control" on the project node. .classpath .project .settings target META-INF This affects when I have created a bunch of new files and would like to add them alone to Git.</description>
      <attachments/>
    </issue>
    <issue>
      <id>300988</id>
      <title>[api] The StringVariableSelectionDialog for core.variables should support filtering</title>
      <description>Build Id: Eclipse 3.6m4 The StringVariableSelectionDialog, which typically is behind a "Variables..." button in a number of places, currently displays all defined Eclipse variables. This is problematic, because many variables are valid in certain contexts only. The ${build_project} variable, for instance, is only valid in context of external tool builders. End users who are prompted to pick a variable from the StringVariableSelectionDialog get the impression that they can use all the variables -- and once they picked one that fails to work in their context, they do not understand why it fails to work. Proposed solutions: ------------------- 1.) In the simplest case, the StringVariableSelectionDialog should allow product builders to explicitly hide variables which are known to fail in the context where the "Variables..." button is used. For instance: svsd = new StringVariableSelectionDialog(parent); svsd.hide(new String[] { "build_project" }); int code = dialog.open(); This simple improvement would already allow product builders to get it right in a "closed" environment for the occurrences of a "Variables..." button that they can control. 2.) For more advanced and configurable environments, the org.eclipse.core.variables.dynamicVariables extension point should add an attribute that allows variable providers define a list of String context name in which the variable can be resolved. Variables without context name are expected to be universally available (to provide backward compatibility). The StringVariableSelectionDialog can then support filtering by a list of context names that are known to work in the concrete situation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301077</id>
      <title>Access to /cvsroot/callisto to add things to the Helios build</title>
      <description>I would like access to add things to the Helios build as described here: http://wiki.eclipse.org/Helios/Contributing_to_Helios_Build I plan to add EGit.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301168</id>
      <title>Create a Git Browser and Git Explorer Perspective</title>
      <description>From bug 281394 the idea has come up that there needs to be a git equivalent to the existing CVS explorer. Wolfgang Werner suggested: Wouldn't it be best then to implement a "Git Repository Browsing" Perspective containing a "Git Repositories" View analogous to the CVS/SVN The top level nodes should be the individual repositories. Repositories can be added like with CVS/SVN. Below the repository nodes, the folder structure of the repositories contents should be displayed and have a context menu option on each tree node to "Check Out" or "Check Out as ...". "Check out as ..." gives the following options when using SVN: - Check out as new project using the New Projects Wizard - Check out as project in the Workspace - Check out into an existing project This provides all degrees of freedom there are, I think. That would also help new users switching to git as it behaves the same as when using CSV/SVN.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301263</id>
      <title>Add javax.servlet.jsp 2.1 to Orbit</title>
      <description>CQ 3547 has been approved which includes the necessary classes for jsp 2.1 support. The rt.jetty project would like to have these added to orbit.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301292</id>
      <title>[discovery] decide on class and plug-in names</title>
      <description>As part of moving discovery to P2 plug-in names need to be moved to a new namespace. Existing plug-ins: org.eclipse.mylyn.discovery.core (data model, meta-data download) org.eclipse.mylyn.discovery.tests (core tests) org.eclipse.mylyn.discovery.ui (wizard based UI, P2 integration) Proposed names: org.eclipse.equinox.p2.discovery (core) org.eclipse.equinox.p2.tests.discovery (tests) org.eclipse.equinox.p2.ui.discovery (ui) Mylyn discovery has a notion of a connector that represent a single entry in the discovery listing. While that names works well for Mylyn it could make sense to find a new term for P2 and rename the corresponding classes. Some of the names that have been suggested: Extension, Solution (Eclipse Marketplace), Plugin, AddOn, Product. Any other ideas?</description>
      <attachments/>
    </issue>
    <issue>
      <id>301294</id>
      <title>Scalability improvements to the runtime model and event architecture</title>
      <description>This is a placeholder for discussion about scalability improvements to the runtime model, including performance/memory improvements to the model, attribute system, and other internal data structures. It will also include improvements to the runtime event architecture. From bug #294754: &gt; 1) PTP Runtime model restructure: The most important objects are process, node &gt; and job, in that order. One possibility, instead of one Java object for each &gt; process, node or job is to create an array of elements where the position in the &gt; array is it's index, for instance for process, its MPI task index. &gt; &gt; Instead of registering a listener on each object, consider a listener which &gt; handles the entire group of objects (or subset as needed). Event notification &gt; should not iterate over each object in a large collection, notifying each object &gt; of the event. &gt; &gt; The collection of objects needs to dynamically grow and shrink. &gt; &gt; For processes, while not directly related to scaling, we should think about MPI &gt; dynamic tasking since MPI task rank no longer uniquely identifies a process. If &gt; we think in terms of a process's slot in the MPI universe, then does our &gt; implementation work? Note that slots in the universe can be reused, for instance &gt; with a universe of size 256, world 1 is created with 256 tasks and persists for &gt; the life of the session, world 2 is created with 128 tasks and eventually &gt; terminates to be replaced by world 3 with 64 tasks, and which reuses 64 of the &gt; slots used by world 2. At least in the IBM PE case, we know the universe size at &gt; application start. &gt; &gt; 2) Attribute management: Objects currently each have their own copy of &gt; attributes. In order to reduce memory consumption, we should make sure that &gt; there is only one copy of a given attribute/value pair. If there are multiple &gt; objects which have an attribute that has the same value, then one attribute &gt; should be created and both objects only reference that attribute. &gt; &gt; 3) String management: Similar to attributes, there should be only one copy of &gt; each unique string. I'm not sure if Java does this already. If not, then maybe &gt; something like a string array where the array index is used to reference the &gt; string elsewhere. &gt; 6) Event handling: When a child object or group of objects (for instance process &gt; object(s) which are a child of a job object generates an event, the parent &gt; object also generates an event notifying it's listeners of a change in some &gt; group of it's child objects. We should look at this event generation and try to &gt; use the parent events as much as possible rather than dealing with a flood of &gt; events from the child objects. The parent event may need to contain additional &gt; info to describe the child objects affected and the state change for those &gt; objects. &gt; &gt; Note that the number of objects identified in a message from the proxy &gt; determines the group of objects implied in an event notificaton from the parent &gt; object. &gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>301298</id>
      <title>Scalability improvements for the proxy protocol</title>
      <description>This is a placeholder for discussion about scalability improvements to the proxy protocol. From bug #294754: &gt; 7) Eclipse/proxy protocol: &gt; Currently the protocol uses a series of ASCII-encoded tokens with a length &gt; prefix before each token. We should investigate how much data is transferred &gt; using this protocol and decide if we need to reduce it. This may mean using a &gt; binary message format, where binary structures are sent, which implies &gt; byte-endianesss issues. &gt; &gt; We might consider using compression, such as Huffman compression or gzip &gt; compression if they are fast enough. &gt; &gt; We should also look at how the proxies generate messages and determine if the &gt; protocol allows large numbers of objects to be easily included in a message. &gt; Maybe use something like Fortran array notation to describe groups of objects, &gt; such as process references where the sequence of proxcess numbers is not &gt; contiguous.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301299</id>
      <title>Flow control needed to prevent overloading model/UI</title>
      <description>This is a placeholder for discussion about scalability improvements to prevent the model/UI from being overloaded by a flood of event generated from resource managers. From bug #294754: &gt; 5) Flow control: For stdout/stderr, suspending listening for the pipe file &gt; descriptors to become ready probably is the most reasonable. That way we don't &gt; have to buffer anything. The application may block, but there's not much else to &gt; do since we shouldn't discard user data. &gt; &gt; For proxy generated events, they should be buffered, not discarded. Once a &gt; threshold is exceeded, events (all or events or possibly just that class) are &gt; buffered. Once the number of pending events drops below the lower threshold, &gt; then the proxy may start generating events again, and PTP starts reading events &gt; from the buffer. Any new events must go at the end of the buffer to preserve &gt; event order. &gt; &gt; Alternatively, the flow control logic may start reading buffered events from the &gt; buffer when the lower threshold for pending events is reached, and only enable &gt; the proxy to send new events when the buffer is empty. &gt; &gt; We may want to provide a way to flush all events, for the case where the user &gt; decides Eclipse will never catch up to handling new events or just decides to &gt; terminate the application. &gt; &gt; We need to decide where flow control is imposed. If imposed in the Eclipse code, &gt; then we don't have to worry about a broken proxy flooding Eclipse with events. &gt; However, it may make more sense to expect each proxy to handle flow control, &gt; since the stdio handling is better handled by the proxy.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301454</id>
      <title>[New Widget] AeroToolbar</title>
      <description>Build Identifier: AeroToolbar is a widget that emulates Windows Vista/7 toolbar found in explorer application. Current implementation relies on JNA project, but with some changes to OS and native methods it can be built without additional dependencies. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>301519</id>
      <title>Add BonitaSoft RCP developer team blog posts to PlanetEclipse</title>
      <description>Hi, At BonitaSoft, we are 4 RCP developers very enthusiast with using Eclipse, sharing knowledge about Eclipse or contributing to Eclipse. We would like to start in the next few hours regular posting about Eclipse on our community blog, and we think the content of the post would fit to PlanetEclipse topics and guidelines: * Is the feed written by a real person? Actually it will be written by 4 real persons. See people in CC. * Is the person an Eclipse committer, hacker or contributor? Yes, we all are hackers and contributors (forums, bugs, etc...). I am personnally a committer on JWT project, but JWT will not be part of the topics covered in this feed. * Is the ratio of off-topic postings not too high? The blog that hosts posts is the Bonita community blog. Then it mainly contains Bonita announcement, tutorials or news. However, we have a dedicated Eclipse category on our community blog, and the feed we would like to share on the planet will only contain Eclipse-related posts. * Are the off-topic postings covered by the Planet Eclipse tag line? No * Does the feed promote a company or a commercial product? Yes, we are developers at BonitaSoft, and the blog is the community blog of our company. So it promotes our company. However, content of posts will never be simple advertising but real Eclipse usage, development, or community-related topics. * Does the feed add more value to Planet Eclipse and the Eclipse community than it does for the feed owner? Yes, for sure. We have learnt a lot of things while developing Bonita Open Solution and we really want to share them with the community. * Is there more than just a welcome posting? Not yet, posting will start as soon as the feed gets accepted. * Does the feed contain advertisements? Not at all. As examples, here are the 3 next posts that are to be in this feed: * Probably a welcome posting ;) * "SWTBot my new friend": A post to explain how to get started with SWTBot and how to integrate it in a RCP build * A post (still untitled) to explain how to get started with GMF templates. The frequency of posting on this feed will be of 2 per monthes ideally. Finally, here are the link to the feed: http://www.bonitasoft.org/blog/?cat=9&amp;feed=rss2 and the link to the blog: http://www.bonitasoft.org/blog/ Regards, Mickael Istria</description>
      <attachments/>
    </issue>
    <issue>
      <id>301563</id>
      <title>Fast project import from snapshot data</title>
      <description>+++ This bug was initially created as a clone of Bug #263671 +++ This bug is a subset of the proposal on bug 263671. We intend to be contributing an implementation for Eclipse 3.6, pending committer's general acceptance of the proposal below. Overview: --------- Today, importing a project into a workspace forces a deep project refresh, which may be very slow depending on the file systems being used (especially if there are some remote resources linked in through EFS). For very large projects with content that doesn't change often, it should be possible to create the refresh snapshot once and then share this snapshot data among users. This should allow fast project import without forcing the refresh - basically importing a project database. Conceptually, this makes the "import-project" operation work the same as an "open-project" operation on a workspace where the project had been open before and the snapshot data is therefore available. Background / User Story: ------------------------ As a developer working on a large CDT project in a ClearCase dynamic view, I want to quickly import the project into my workspace without waiting for Workspace Refresh, such that I can start using a team shared CDT index and editing files immediately. Today, my project consist of around 65000 files, and just doing the project refresh which is compulsory on initial project import takes around 10 minutes during which I cannot use Eclipse. I have some build machines which re-create a CDT index every night, so when I import the project on some branch the next morning, I expect to be working immediately (even if the stored index data may not be 100% accurate). Implementation Proposal: ------------------------ 1. Create a new UI Wizard for "Export &gt; Team &gt; Project Snapshot" which is capable of creating a snapshot file from current resource state. Code from the attachments on bug 263671 can be used for this. Potentially, allow additional contributors (like CDT shared index) to take part in creating the snapshot. 2. ONLY when importing a project into a workspace, AND the snapshot file is found in a known (but configurable) location, load the snapshot file to initialize refresh data rather than performing a project refresh. Since the snapshot data is only loaded on project import, there is no issue of merge conflicts. Since there is no UI or option for loading or not loading the file, this happens transparently to any clients above core/resources. For clients, it appears as if all the resources get refreshed/imported extremely quickly. Like for the CDT team-shared index, the default index location would be .settings/resource-index.zip so when a project is imported, the importer would look here for the file. It should be possible to configure a different index location using Eclipse Variables, in this case the custom index location would be dumped into project preferences in .settings/org.eclipse.core.resources.prefs #Tue Feb 02 18:59:13 CET 2010 eclipse.preferences.version=1 snapshotImportLocation=${someVar}/resource-index.zip</description>
      <attachments/>
    </issue>
    <issue>
      <id>301625</id>
      <title>Upgrade to latest Service Releases for IBM Java JVMs on build.eclipse.org</title>
      <description>Due to various problems being uncovered by eGit/jGit as well as some build problems for rt.jetty that have been tracked down to possible bugs in the IBM JVMs installed, I would like to request that the JVMs be upgraded to the most current releases. The IBM J9 java 5 jvm is at SR6b, and the most current release of that JVM is SR11. We would need the JDK 1.4, Java 5, and Java 6 JVMs upgraded in the /shared/common folder. The latest versions can be downloaded from here: http://www.ibm.com/developerworks/java/jdk/linux/download.html This is blocking the jetty rt from running it's builds on the build.eclipse.org server, and I know the eGit/jGit folks could use this as well.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301775</id>
      <title>Support core.autocrlf</title>
      <description>Original feature request at http://code.google.com/p/egit/issues/detail?id=54 Synopsis: EGit/JGit ignores the core.autocrlf flag which may be quite inconvenient for Windows users. Besides actually doing this we need to figure out where /etc is. So far we have ignored this, but msysgit users typically have the core.autocrlf flag set in /etc/gitconfig. So how do we know it's set? An intermediate workaround could be to set the flags to false for repositories created by jgit. That way it will be set to the only setting we recognize at the momement, and thus our and msysgit users will see the same setting for this flag.</description>
      <attachments/>
    </issue>
    <issue>
      <id>301814</id>
      <title>[LinkedResources] The decorator for Virtual Folders is not intuitive</title>
      <description>+++ This bug was initially created as a clone of Bug #296566 +++ Build ID: Eclipse 3.6m5 Sorry for jumping in late on this, but when I just tried out creating a virtual folder in Eclipse 3.6m5, my initial impression was: "Huh? What is that little square supposed to mean?" I think that another iteration is needed to make the virtual folder icon intuitive. Even a little "V" as a decorator to indicate "Virtual" would be more intuitive than that little square. I know that my suggestion of using colors had to be abandoned due to accessibility requirements, and after playing around with the feature a little, I do understand the rationale behind the relation of the linked resource decorator (arrow in box) with the group (box only) -- but, alas, it is not intuitive!! If colors don't work, perhaps shading could be used, i.e. a folder that appears lighter or almost transparent, with less contrast?</description>
      <attachments/>
    </issue>
    <issue>
      <id>302078</id>
      <title>Add repository actions to file and folder context menu (Push, Pull, etc)</title>
      <description>Build Identifier: The commit menu item is available on all file sand directories, however fetch, pull, push, etc. are only available at the top level. It would be nice if these menu items were available everywhere. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>302113</id>
      <title>Spring support for ECF + Hello examples with Spring DM</title>
      <description>Hi, Here my work on Spring support where you can found examples host and consumer examples of org.eclipse.ecf.examples.remoteservices.hello.* with Spring DM. Spring DM provides the capaibility to declare your OSGi services (publish/get). It's possible too declare your IContainer into Spring configuration by using the bundle "org.eclipse.ecf.springframework" which give you a Spring factory bean to declare IContainer into XML Spring configuration. I have attached the org.eclipse.ecf.springframework_100208.zip which contains 4 bundles : * org.eclipse.ecf.examples.remoteservices.hello.dm.config.log4j : log4j * org.eclipse.ecf.examples.remoteservices.hello.dm.consumer : hello consumer declared with Spring DM. * org.eclipse.ecf.examples.remoteservices.hello.dm.host : hello host declared with Spring DM. * org.eclipse.ecf.springframework : Spring support to declare IContainer with XML Spring configuration. * target-platform : simple eclipse project which contains Spring DM bundles Jars. this projet contains too my Target Platform exported ("Spring Target Platform.target"). When you will import the hello DM examples, bundles will not compile. Click on the "Spring Target Platform.target" and click on "Set Target Platform" link to use Target platform with Spring bundles. The hello host/consumer works ONLY with last version of ECF (I have used CVS source of ECF) and follow "OSGi 4.2 remote services spec". If you want test hello host/consumer with ECF SDK (which is 3.0.0), you have host/consumer bundles into ecf_3.0.0 folder. If you like my work, I would like update the ECF wiki to explain how use Spring DM (and my Spring support) with ECF. Could you tell me where I could post that into the wiki? Which title can I use it? "Spring support for ECF" is that ok? Hope that my work will please you. Regards Angelo</description>
      <attachments/>
    </issue>
    <issue>
      <id>302121</id>
      <title>Fully support gdb pretty printers</title>
      <description>Build Identifier: The pretty printers provided with gdb 7.0 are not really taken advantage of. There is https://bugs.eclipse.org/bugs/show_bug.cgi?id=275238 to do the minimum necessary in order to at least see what the to_string() method of a python pretty printer returns. This brings DSF GDB to feature-parity with CDI GDB. This soluition, however, does not make the value tree provided by pretty printers available to the value tree in the variables view. Instead, the pretty printer is only used for the text represention of a value, not, however, for its set of children. The purpose of this bug is fully adapt DSF GDB to the enhance MI API for values. In detail the proposed approach looks like this: The solution will only enhance DSF GDB, it is not meant to generally provide the Detail formatters that the JDT has. The GDB Pretty printer is - Responsible to provide the value tree (the parent-child relationships) - not responsible for built-in values (the leaves of the value tree) format like binary,decimal, hexadecimal, octal, natural DSF GDB - takes care of the formatting of the leave objects (the built-in types) - checks the new attribute ‘dynamic’ returned by -var-create in order to call the other MI commands for variable objects appropriately. - Checks the new attribute ‘has_more’ in order to determine for dynamic objects whether there are children - checks the new attribute ‘displayhint’ returned by –var-create in order to adjust the tree display correctly. Does this require the extension points for the logical structures? How are arrays currently displayed? - Call the other MI commands for value objects appropriately for dynamic values. We are currently working on a patch that would provide the proposed solution. Everybody is welcome to provide feedback and further recommendatations. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>302125</id>
      <title>[content assist] Code assist for ids and classes in CSS</title>
      <description>Hi, would be very nice, if WTP CSS have support for the code assist for ids and classes in CSS In CSS it's necessary and nice to have support for this in HTML files too I want to tell, that this feature was implemented very fast in Aptana's HTML and CSS editor: http://support.aptana.com/asap/browse/STU-3048</description>
      <attachments/>
    </issue>
    <issue>
      <id>302190</id>
      <title>when checking out a project from SCM, don't add every single file to the context</title>
      <description>Build Identifier: M20090917-0800 One annoyance I have with Mylyn happens when I checkout a new project from our SVN repository. After it finishes the checkout, it takes several minutes after that to get my context into a reasonable state again. This is because when the checkout is done, it will end up adding every single file in the project to the current context. What I really want is just the top-level project directory being added to the context, and I will add to the context from that. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>302265</id>
      <title>Provide a way to get to the Java code generated from a JSP</title>
      <description>Build Identifier: M20090917-0800 Suppose you're working on a JSP and you have published it to your application server. Suppose the JSP contains an error which generates an exception like the following: java.lang.NullPointerException at org.apache.jsp.pages.location.edit_jsp._jspService(edit_jsp.java:78) That is, the exception occured on the Java code that the server generated from the JSP. As of now AFAIK, there's no way to see such code and/or to jump from the exception stack trace to that code. It would be very useful if WTP could let you do this. Talking with Nitin Dahyabhai on eclipse.webtools, he said that this could be problematic because of differences between various servers and the limitations of JSR-45. So I suggested that WTP could leave this feature to the server provider implementation: for instance, the Tomcat server WTP integration could provide a mechanism to open the generated code in the work directory. Other application servers may provide the corresponding appropriate mechanism that works with their implementation, if such a mechanism exist. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>302296</id>
      <title>Please update to Ant 1.8.2</title>
      <description>Ant 1.8.0 is bringing a lot of improvements in both functionality and speed. It would be nice if Helios ships with it.</description>
      <attachments/>
    </issue>
    <issue>
      <id>302386</id>
      <title>Helios Eclipse Modeling Package</title>
      <description>As you may already know we are refactoring the Eclipse Modeling Package to get a smaller package but providing means to discover complementary components. http://dev.eclipse.org/mhonarc/lists/modeling-pmc/msg01416.html Right now the discovery UI looks like this : http://literate.modeling.free.fr/modeling/amalgam/discovery.png Of course your project would be one of those If you want to ;) To do so I need a few data : * a logo, png file format in 32x32 * the feature ID to install * a single line description of your component. * a textual paragraph description * a screenshot, png file format in 320x240 * a web url Please add those elements to this bug if you want to be in the discovery UI. For the specific case of CDO, I would really like to integrate a runtime or base feature within the bundle if you have one and if it's a small one, the user would then be able to generate his Ecore implementation for CDO and get a compilable code even if the full CDO stack is not in his environment. Do you think it would make sense ?</description>
      <attachments/>
    </issue>
    <issue>
      <id>302441</id>
      <title>[LinkedResources][CommonNavigator] When to show "Files and Folders Operation" dialog on drop</title>
      <description>Spawned from bug 301144. When will we show the new "Files and Folders Operation" dialog on drop? For many users (e.g. JDT and PDE users), the new functionality is most of the time not wanted, so we should not hijack the existing drop operation (which defaults to DROP_COPY). But as people from CDT explained, this seems to be different for CDT users. Here's a strategy that could satisfy both sides and solve the problem of the one-way "Don't ask again" checkbox: - DROP_COPY stays as in 3.5, i.e. don't show the dialog and always copy (never create links) - DROP_LINK shows the dialog - we add a new preference (e.g. in General &gt; Workspace &gt; Linked Resources), e.g. a checkbox "Dropping files and folders shows dialog to create links". If the preference is set, the default drop operation becomes DROP_LINK (and hence the dialog appears by default). - CDT-based products can initialize this new preference with "true", so their users get the dialog out-of-the-box - the dialog could offer a checkbox to toggle the preference (e.g. with label "Show this dialog by default when dropping files and folders") The current "Always perform the selected operation in this situation" checkbox is confusing, since: - it does not spell out what "situation" is affected - there's no way to get the dialog back - the default drop cursor is always DND.DROP_COPY even if the operation will create links If there is sufficient interest, you can work out a proposal to fix these 3 problems. Otherwise, the "Always perform..." checkbox must go away.</description>
      <attachments/>
    </issue>
    <issue>
      <id>302549</id>
      <title>Enable following renames in resource history view</title>
      <description>Build Identifier: 20090920-1017 Currently in my Resource History view, the version graph does not contain any versions prior to move/rename of a resource. It should be possible to enable following renames for a resource in the resource history view, like using 'git log --follow'. Reproducible: Always Steps to Reproduce: 1. Select a resource and click Team -&gt; Show in Resource History 2. The version tree graph is shown in the Resource History view 3. The graph does not show any versions before resource was moved/renamed</description>
      <attachments/>
    </issue>
    <issue>
      <id>302628</id>
      <title>[breakpoints][cdi] Implement linking of active debug context with selection in Breakpoints view.</title>
      <description>The "link" button in Breakpoints view is intended to enable linking of the active debug context with the selection in Breakpoints view. I.e. if a frame is selected which has an execution context stopped at a breakpoint, that breakpoint should become hi-lighted in the BP view. This feature will likely require an extension to the DSF breakpoints service.</description>
      <attachments/>
    </issue>
    <issue>
      <id>302654</id>
      <title>support for Bugzilla 3.6</title>
      <description>Bugzilla 3.5.3 has the following change * comments for attachments changed from Created an attachment (id=????) to Created attachment ???? This breaks SaxMultiBugReportContentHandler.parseAttachment so Creator and created are no longer filled.</description>
      <attachments/>
    </issue>
    <issue>
      <id>302896</id>
      <title>Break out JSF plugins into distinct features from the rest of jst.web</title>
      <description>Build Identifier: WTP 3.2 M4 It would make good sense to break out the JSF plugins out of their current features: jst.web_core and jst.web_ui, into their own features. This offers an opportunity for adopter products to make JSF an optional install feature. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>302907</id>
      <title>[api] support categorization in Task Repositories view</title>
      <description>First steps for generalizing the Task Repositories view: * Add categories presentation similar to the Task List: Tasks, Bugs, Other * Rename view to "Team Repositories" Some thought needs to be put into how connectors can specify the repository type and how existing repositories can be migrated.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303009</id>
      <title>GitHub Mylyn connector contribution to EGit</title>
      <description>In a discussion on David Green's blog (http://greensopinion.blogspot.com/2010/02/good-things-come-in-threes.html) Chris Aniszczyk suggested that EGit might be interested in a contribution of the GitHub Mylyn connector originally developed by Christian Trutz (http://github.com/smilebase/org.eclipse.mylyn.github). Both Christian and David (who added new features to the connector at http://github.com/dgreen99/org.eclipse.mylyn.github) expressed their interest in contributing their work to EGit. I have added minimal tweaks to the project and would of course be happy to contribute them. There are two more contributors listed in the project's history. Would EGit be interested in the connector? What would we need to do to make it happen?</description>
      <attachments/>
    </issue>
    <issue>
      <id>303083</id>
      <title>Split CDT Spawner into a separate bundle / feature</title>
      <description>+++ This bug was initially created as a clone of Bug #196337 +++ Bug 196337 holds a contribution for DSDP-TM to provide a local terminal in Eclipse. This contribution depends on the CDT Spawner's native code in order to allocate a PTY. The contribution (and, in general, the Spawner itself) is useful to anybody running Eclipse, so there should not be a hard dependency on CDT Core as a whole. We discussed several alternatives for dealing with this dependency, including pushing the Spawner into Eclipse Platform. The Eclipse PMC denied this since there is no immediate need for the Spawner in the Eclipse SDK. Instead, the PMC suggested a different approach instead: Keeping the Spawner in the CDT project but splitting it out into a separate bundle, such that it can be consumed easily by other projects via p2 Repositories (such as Helios). It seems that this is currently considered the best practice for sharing small functionality between projects. Note that this split can be done fully API compatible by making org.eclipse.cdt.core depend on the new spawner bundle and reexport it.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303278</id>
      <title>Let the Task Trim Widget finally escape from incubation</title>
      <description>This widget is a great help for many users and for me it seems pretty stable for long time now. Please consider graduating it so that it can be more easily consumed via p2.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303356</id>
      <title>Add content assist that inserts Hyperlink markup to JavaDoc for Java classes</title>
      <description>I have the following usecase: I write a .textile file and want to include the java doc location for "java.lang.Runnable" by pressing M1+Space. The content assist should then provide me with the entry "JavaDoc reference" and when I select it it should transform "java.lang.Runnable" to {{{Runnable":http://www.sun.com/javadoc/....}}}. How would the content assist perform this replacement? It would try to look up the HTML file for "java/lang/Runnable.html" at Sun's server. The same would go for Eclipse classes. It would convert all "." with "/" and tries to load the website. If that was successful the content assist inserts the URL. I would like to implement that in my own plugin, and need some tips: # How do I contribute to the Mylyn WikiText content assist? The org.eclipse.mylyn.wikitext.ui.contentAssist EP only allows static assists. # How would I get access to the currently used Markup processor and as it for its Hyperlink markup so I can generate that markup at the current cursor position (and replacing the former text) I would provide a preference page where one can add JavaDoc locations and a regex when the location should match. This would also allow me to reference my own classes and their javadoc at github.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303373</id>
      <title>UI option for adding and commiting</title>
      <description>Hello, currently EGit requires (to my knowledge) two steps to commit new files to the repository. 1.) Add to Version Control 2.) Commit I would be great if we had in EGit the option to add and commit, similar to the command line "git commit -a". Best regards, Lars</description>
      <attachments/>
    </issue>
    <issue>
      <id>303501</id>
      <title>Update data connection logging in frameworks</title>
      <description>Update data connection logging in NEF/Hyades to support logging of individual messages/data to be logged to a file/console for debug purposes.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303511</id>
      <title>Allow to specify encoding for source attachments</title>
      <description>My OS's default encoding is GBK, while my java project "HelloWorldPrj"'s encoding is UTF-8 which uses one lib named "terasoluna-thin-server.jar". This lib's source attachment "terasoluna-server4jweb-src_2.0.1.0.zip"'s source code's encoding is Shift-JIS. There is only one way to view this lib's source properly: Windows -&gt; Preferences -&gt; General -&gt; Workspace, set "Text file encoding" to "Shift-JIS". Set either my project, or "terasoluna-thin-server.jar", or "terasoluna-server4jweb-src_2.0.1.0.zip", or all above's property "Text file encoding" to "Shift-JIS" has no effect. How to view all soucre attachement properly when add a soucre attachement's encoding is "Big5"'s lib? Hope this is reported to a right place!</description>
      <attachments/>
    </issue>
    <issue>
      <id>303751</id>
      <title>[Import/Export] Need a UI for fast project import from snapshot data</title>
      <description>+++ This bug was initially created as a clone of Bug #301563 +++ User Story: ----------- When importing a large project into Eclipse today, a deep refresh is started to populate the resource tree. This deep refresh takes long on a slow file system (in the range of minutes), and while this refresh is ongoing, quite many UI actions can not be performed. As a developer, I need to start working on a large imported project quickly. Therefore, I'd like to avoid this deep refresh and populate my resource tree from a pre-built snapshot instead. Any discrepancies between the snapshot and the actual file system can then be resolved as a low-priority refresh process in background. Constraints: ------------ With bug 301563, we have created a core mechanism for exporting and importing resource tree info. This is already in use today through domain-specific wizards for export and import: Essentially, clients of the Platform can write a UI-less application to create the resource tree snapshot, as well as a domain-specific wizard to import a project with snapshot. We'd now like to provide access to this functionality in the base Eclipse Platform, under the following constraints: - New UI must be non-intrusive since we expect only few users (with very large projects) to actually need the functionality, compared to the full installed base of the Eclipse IDE. - Various Producer-Consumer scenarios need to be considered (who creates the snapshot, where does it live, when is it updated, and how is it consumed). In many cases, this functionality will be related to a "Team" setup of some sort, with a team prime creating the snapshot and users importing it. - Potential extenders of the snapshot functionality are any kinds of indexers. The CDT team-shared index is very related to this. A JDT index could also be related. That much for the problem description. I'll post some implementation ideas next.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303808</id>
      <title>Debug console lacks many important features</title>
      <description>Build Identifier: 20090920-1017 Whenever I suggest others to use Eclipse/CDT/CDI for their debugging needs, I get a lot of complaints about the "unusable console". Power users are quite used to type commands in a gdb console for special stuff. Some of them have used gdb directly for years, or a different GUI like Insight/gdb. They often have little snippets of gdb commands somewhere in a notes.txt, that get pasted to the console over and over. Of course, this is nothing that is needed by novices, but experienced users are common in the embedded world :-) The biggest complaints concerning the console in Eclipse are: * no command history (scrolling up through previous commands) * no command repetition with the Return key * no prompt (as a visual sign that a command has finished), see Bug 78368 * no protocol file (to save commands and output for later processing) * no aliases (?) * no auto completion for variable names or other stuff As far as I can see there were no enhancements in these areas with DSF. (Correct me if I'm wrong) So it wouldn't help to switch to DSF/gdb. We discussed that on cdt-dev, there are already some patches available by Giuseppe MONTALTO [giuseppe.montalto@st.com], see topic "Future of debugger console" started 2010-02-24 Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>303867</id>
      <title>Provide an option to flatten JUnit testReport XMLs</title>
      <description>Created attachment 160163 [details] Screenshot of test structure Hudson can collect and analyze JUnit test XMLs and format HTML reports out of it. Unfortunately Hudson and JUnit do not use exactly the same schema for the data. The main difference seems to be that Hudson does not recognize XML files with nested &lt;testsuite&gt; elements. The consequence are failed builds. Here is an XSL script that we're currently using to transform the file (note that it fails for large files with an OOME): http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.emf/org.eclipse.emf.cdo/releng/org.eclipse.emf.cdo.releng/convert-test-results.xsl?root=Modeling_Project&amp;view=co Here is an example of a transformed file (one that Hudson recognizes properly): https://build.eclipse.org/hudson/job/emf-cdo-maintenance/ws/result/testReport.xml/*view*/ In our case we execute a test suite of ~800 test cases in different scenarios (each a set of fixtures). We have around 8 such scenarios (and counting), resulting in ~7000 test case executions. The flattening of our XSL script simply removes the information which tests were executed in which scenario. If tests fail it's impossible to see the needed context information. If you can preserve this information somehow while flattening the XML elements, that would be super cool ;-) I also attach a screenshot of our test structure.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303889</id>
      <title>[BiDi] BIDI3.6: Triggering Eclipse mirroring and Bidi-script based languages translation</title>
      <description>Eclipse Mirroring and translation to a Bidi-script based language should be coupled together, Eclipse must be mirrored only if it is translated to a Bidi-script based language, and it shall not be allowed to be launched in a Bidi-script based language translation unless it is mirrored, the current behavior doesn't guarantee this Description of current behavior : In general, the language in which Eclipse is launched is by default triggered by the system locale value i.e. if machine locale is English, it will be launched LTR and in English and if the machine locale is French and eclipse French NL packs are installed, it will be launched in LTR and in French. This default launch language can be overridden using "-nl &lt;locale&gt;" argument. Now, for Arabic/Hebrew, we have identified the following two erroneous behavior: If the machine locale is Arabic and Arabic NL packs are installed (and -nl ar argument is not used), eclipse is launched in LTR mode but translated If the Arabic NL packs are missing and -nl ar argument is used (regardless of the machine locale), eclipse is launched in RTL mode but (expectedly) in English The suggested behavior (to be implemented through this bug) Eclipse is to be launched in RTL and with Arabic/Hebrew translated UI strings only in the following two cases: Machine locale is Arabic/Hebrew and corespondent NL packs are installed Machine locale is non-Bidi, "-nl ar/he/iw" is used and corespondent NL packs are installed The command line option "-dir" , which is used to force the mirroring of Eclipse when it is launched, should be removed, or at least, to be considered obsolete , as the new proposed behavior will not require it Note : The Arabic/Hebrew languages are the immediate targets of this bug, further investigation is be done in future for other Bidi script based languages (Farsi, Urdu)</description>
      <attachments/>
    </issue>
    <issue>
      <id>303925</id>
      <title>Add .gitignore compatibility to JGit</title>
      <description>Ideally the 'add to .gitignore' button would be toggle-able within EGit, but a logical first step seems to be first checking the file for existing instances of the entry to be added before adding the entry. Currently the IgnoreAction will add files to .gitignore multiple times if the user selects the action multiple times.</description>
      <attachments/>
    </issue>
    <issue>
      <id>303960</id>
      <title>Ability to override javac task during pde builds</title>
      <description>I posted this to the pde-dev mailing list and was asked to raise a bug, so here it is: --- I am trying to work on the pde export facilities of AJDT (aspectj tool support for Eclipse). Currently, AJDT provides custom wizards for exporting plugins, features, and products, as well as headless build support. The problem is that these wizards are essentially a copy of pde export wizards. And this is difficult to maintain for each new release. For the Helios release, I am considering a different approach for aspectj aware pde export and pde builds. Essentially, the requirement is that the pde build happens as normal, except that the javac call should be replaced with a call to iajc (with a few extra options). I've been playing around a bit and I am able to get this mostly working through a customBuildCallBack.xml script and adding some ant commands to the @dot.post.compile task. In this task, I first delete the class files created by the javac call, and then I call the iajc task. There are some problems, however: 1. This feels hacky. The code is compiled twice and the results of the first compile is deleted. 2. The javac call will likely have some compile errors (expected because javac cannot compile the aspects). These errors will be logged and can be confusing to users. 3. Source bundles will not include the *.aj files unless there is something added to the customBuildCallBack.xml script (I think...I haven't actually tried to fix this yet). Note that I am having this problem with AspectJ-aware bundles, but I know this is also a problem for Groovy-aware bundles. And I expect that scala-aware modules and any other Java-like language will have the same problem. Any ideas on a more graceful solution to the porblem? I see: https://bugs.eclipse.org/bugs/show_bug.cgi?id=105631 but I don't know how relevant that is.</description>
      <attachments/>
    </issue>
    <issue>
      <id>304135</id>
      <title>[call hierarchy] Allow to pin Call Hierarchy</title>
      <description>Build Identifier: I20100225-1936 After I remove some methods from the 'call hierarchy view', open another call hierarchy and then go back in history, the removed methods come back (this is quite annoying and renders the 'remove from view' functionality ineffective ). This happens because the hierarchy is computed again while going back in history. I would prefer an implementation similar to 'Search view' where the history is remembered completely (including the removed from view items) and I can hit 'F5' to search again if the results could have changed since the last search. Reproducible: Always Steps to Reproduce: Steps - Open Call hierarchy of method A - Remove some methods from the call hierarchy view - Open Call hierarchy of method B - Go back in history to view hierarchy of Method A -&gt; the removed methods are back</description>
      <attachments/>
    </issue>
    <issue>
      <id>304152</id>
      <title>Support Jetty 7 in Equinox/Platform</title>
      <description>Build Identifier: Jetty 7 (under the renamed org.eclipse.* package) has been brought to Eclipse and is publishing P2 builds, as well as apparently participating in the Helios build train*. Yet the platform is still shipping Jetty 6 (under the org.mortbay.* package). There's a release 7.0.0 and 7.0.1 now available from Jetty's download site: http://download.eclipse.org/jetty/ I note, however, that it's not explicitly listed on the Helios/Participating_Projects page, though I'm not sure if that's just an error of omission: http://wiki.eclipse.org/Helios/Participating_Projects Given the high profile move to Eclipse.org, it would make sense for Eclipse 3.6 to ship with the newer Jetty 7 under the org.eclipse packages. (I assume that this is the right bug to report against; Jetty is shipped with the platform and Eclipse SDK as the Jetty server runs the help system. If not, please reassign to the correct bug list for whoever manages the contents of the Eclipse Platform build :-) Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>304182</id>
      <title>Adding origin</title>
      <description>Hi, It would be great if I can add an origin in EGit similar to the following command line? --------- git remote add origin git@github.com:vogella/de.vogella.git.github.git ---------- Christian gave here some advice in the user group: ----------- Currently you can't do that from the plugin. You have to use command line tools or edit your .git/config file directly. When you fetch or push with the plugin you can specify a custom URL (here you could enter your github url) but AFAIK this URL is not persisted and the next time you want to contact the same remote again you would have to specify the URL again. ------------ It would be nice if that could be done via the UI. Best regards, Lars</description>
      <attachments/>
    </issue>
    <issue>
      <id>304786</id>
      <title>Provide additional test cases to verify Map support in CDO</title>
      <description>We need a bunch of test cases to verify the support of different types of Maps.</description>
      <attachments/>
    </issue>
    <issue>
      <id>304871</id>
      <title>[releng] set up a sandbox for Mylyn WikiText</title>
      <description>Initially we'll need the following: * o.e.m.wikitext.sandbox.ui bundle * o.e.m.wikitext.sandbox_feature bundle * changes to include the sandbox feature in the sandbox update site * commit rights for David Green on the sandbox</description>
      <attachments/>
    </issue>
    <issue>
      <id>304910</id>
      <title>[api] recognize comment#number link on bug editor without bug number too</title>
      <description>Changes in bug 164221 provide recognition of patterns like bug#164221 comment#24. Bugzilla also recognizes the pattern "comment #24" making a link to the comment in current task. Mylyn does not seem to understand that yet. Perhaps a shortcut like bug 164221#24 would be nice to have too.</description>
      <attachments/>
    </issue>
    <issue>
      <id>304957</id>
      <title>discuss and refine Mylyn restructuring proposal</title>
      <description>The Mylyn project is proposed for restructuring: http://www.eclipse.org/project-slides/mylyn-restructuring-review.html</description>
      <attachments/>
    </issue>
    <issue>
      <id>305010</id>
      <title>[engine] Composite provisioning actions</title>
      <description>Build Identifier: There are cases when the action to be implemented needs to execute actions from other touchpoints. Executing those actions (context bound) will require a proper configured / correct state of touchpoint). Best would be that an action (new Action interface extending ProvisioningAction) to provide an API taht will allow the composite action to make P2 calls into other actions. For example, the composite action could do something like: executeAction("unzip( source:${artifact.location}, target:${installFolder} )"); executeAction("chmod( targetDir:${installFolder} , targetFile:foo, permissions:777)"); where "executeAction" is the new API method. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>305169</id>
      <title>Use different color for attachments marked with iplog flag</title>
      <description>Is it possible to mark attachments marked with iplog+ or iplog- with a different color in the table? It is very handy to see obsolete ones in gray. It would be a good thing to down-color iplog attachments as those patches have been applied and need little attention.</description>
      <attachments/>
    </issue>
    <issue>
      <id>305336</id>
      <title>Ability to open a file from command line at a specific line number</title>
      <description>Build Identifier: I20100309-0100 Now that bug #4922 is fixed, we can open files from command line and it's great. What would be even better would be to be able to jump to a specific location to the file, for example: &lt;path&gt;\eclipsec.exe -name Eclipse --launcher.openFile c:\workspace\MyClass.java:50 to jump to line 50. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>305367</id>
      <title>[DataBinding] Detail value observables for observable (list|set|map)s</title>
      <description>This is a split-off of bug 300043 and is intended to provide general detail value observables for observable (list|set|map)s which do not rely on the Simple*Property API.</description>
      <attachments/>
    </issue>
    <issue>
      <id>305642</id>
      <title>Support shared configurable multi-user installs</title>
      <description>+++ This bug was initially created as a clone of Bug #224145 +++ As a tools admin in a large organization, I want to prepare a centrally administered Eclipse installation, such that all my users work on the same approved version of Eclipse and extensions, but they can pick-and choose extensions as they need. My central install should be accessible by all users on a shared file system for easiest deployment. Acceptance criteria: 1. No need for end user interaction. End users ever just launch the central Eclipse and get updates automatically. There should not even be a single dialog when a minor update has been applied to the central install. 2. Easy central update. An administrator can update any individual Eclipse extension easily and roll that update out to the end users. 3. Users can configure their install by pick-and-choose extensions as they need. In case of an update of any extension, their configuration remains the same. 4. Protected shared install. End users can only influence their own installation, but not destroy any config of somebody else. Only admins can update packages. 5. Add-your-own. End users can add their own extensions such that they are not restricted to what has been centrally provided. 6. Team-level configs. Groups of users can define their own config and share that config in a team. I think this is all that I need (and I'm getting this today by using extension locations linked in by *.link files; the update criterion (2) is done by Michael Scharf's trick of starting eclipse -configuration foo and doing an update there. It's not perfect but workable. I'm now looking for an officially supported, better way of doing this since there is still some manual hassle involved. Especially I have to quit / restart Eclipse for each extension location to update in turn. I acknowledge that this all sounds a lot like what commercial Eclipse Distros like Genuitec Pulse are about. The difference between Pulse and my proposal is that in Pulse, end users decide a lot more themselves and the shared install can be multi-site. Here I am only talking about a single-site installation on a shared file system. Deployment across multiple sites would be a different add-on story IMO.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306001</id>
      <title>[mylyn] Integrate mylyn in the commit dialog</title>
      <description>The Eclipse EGit/JGit projects provide a team provider for accessing Git repositories. What's currently missing is full support for the Synchronize view and a Mylyn integration to leverage automatic change set management. In this project our intention is to create a Mylyn Egit connector to support the change set mode of the Synchronize view.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306220</id>
      <title>"only include exported entries" should per default be true</title>
      <description>Build Identifier: 20090920-1017 The behavior of Eclipse to per default include all libraries of an included project in the run classpath is cause for many hard to be found problems (jar hell). When developing in a multiproject setup, each project has an explicit list of jars and other projects that are to be used in that project. It is highly illogical that this definition is -per default- extended with jars that are not specified. This causes behavior like that when a jar is added to a utility project, it suddenly superseeds a jar that is explicitely included in the project. Try figuring out why the code suddenly behaves differently. "only include exported entries" should per default be true and optionally can be set to false (the opposite of the current way). Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>306222</id>
      <title>Further enhancement of Save Build Console feature</title>
      <description>After playing with new Save Build Console feature it appears that it is not convenient to use. Often it occurs to a user only after inspection of output that it is interesting and deserves saving. It is possible to do it now provided a) Save output feature was enabled beforehand and b) user goes to PE or outside eclipse and copies the file manually. The work that was done implementing this feature is good and I think we should build upon it to provide better. I suggest following: - Store build output originally in .metadata\.plugins\org.eclipse.cdt.ui\ and enabled by default - Use Save Output button to copy the working output file to a different file, similarly to what was originally suggested. - Properties will allow disable output and change default working output file (we already have it now).</description>
      <attachments/>
    </issue>
    <issue>
      <id>306494</id>
      <title>Improve SshConnectorService flexibility to handle loss of connection</title>
      <description>Build Identifier: M20080911-1700 When an SSH connection is lost, SshConnectorService.isConnected will launch an ASYNCRHONOUS SessionLostHandler Runnable that will reset the whole connection as soon as the user click a button, no matter you reset the connection in the meantime. It's not programmatically possible to gracefully handle a loss of connection: if you restore the connection, it will be lost again as soon as the user click a button. Reproducible: Always Steps to Reproduce: 1. Create a connection, launch a process 2. Kill the process. The connection will be lost (session in not connected state) 3. Ask if the SSH connector service is connected (SshConnectorService.isConnected). Along the way, the user get prompted with a message box (RSEG1058 - Connect to box was cancelled) 4. Reconnect the SSH Connector, do some nice things with your connection 5. User click the "OK button" of the MessageBox, which disconnect the connection again.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306555</id>
      <title>[variables][expressions][cdi]Add support for cast to type / view as array (IExpressions2)</title>
      <description>The implementation proposed in bug #306553 should be implemented in dsf/gdb.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306573</id>
      <title>Add Performance tests for fast project import from snapshot data</title>
      <description>+++ This bug was initially created as a clone of Bug #301563 +++ Since performance was the main driver behind the "import from snapshot" functionality in bug 301563, we should add performance tests to continue monitoring this operation. I would like to add two new performance tests: 1.) close/open project to monitor speed of writing/reading .tree snapshots, related to the idea of storing these in ZIP format as per bug 305717. 2.) importFromSnapshot to monitor speed of importing a large project from a refresh snapshot. I'll use this bug to coordinate with the maintainers of the performance test suite, to ensure that we don't cause ripple by unexpected timing differences due to addition of new tests.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306575</id>
      <title>Allow project to reference a refresh snapshot for use with standard import</title>
      <description>+++ This bug was initially created as a clone of Bug #301563 +++ Follow-up from bug 301563 comment 37: As a provider of a large source code base, I want to provide this source code along with a pre-computed refresh snapshot, such that people importing my source base can get access to the project quickly - regardless of what wizards, tools or plugins they use for importing these projects today. For the case where the provider of code also owns the Eclipse .project file, it is easiest to have the refresh snapshot referenced in the project. This is the workflow which is successfully being used by the CDT team-shared index: snapshot location defined as a project-scope preference, with allowing core variables replacement to parameterize the snapshot location when needed. Being able to combine a CDT team-shared index with a pre-computed refresh snapshot using the same location semantics would result in a very powerful project database that includes both files and symbol index and can be opened and browsed very quickly (today, the value of the CDT team-shared index is compromised on slow file systems by the need for refreshLocal). Moreover, this method of deploying a refresh snapshot along with the project very much simplifies adopting the refresh snapshot with end users, since the existing, known and working import-project operations can be used. Conceptually, by importing this special kind of project, one is importing a project without the need for refreshLocal.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306611</id>
      <title>[DataBinding] Converted value property</title>
      <description>I wanted to propose to add API for a value property which simply applies a given IConverter to the source object. This might be handy e.g. in bug 300043 where you might want to prepend such a converter value property before calling IValueProperty#reduce(ListReducers.join(",")) in order to make sure that you can drive the way the actual value property is converted to a string.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306646</id>
      <title>[painting] Print margin should differentiate on file type</title>
      <description>Build Identifier: I20090611-1540 In my company, we have style rules that C++ files should be at most 80 columns, while Java files should be at most 100 columns. The "Help &gt; Preferences &gt; General &gt; Editors &gt; Text Editors &gt; Print margin column" is helpful to adhere to the style rule, but it's the same for all file types, which means it can be either 80 or 100 columns, but not auto-adjustable according to the file type I'm currently editing. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>306818</id>
      <title>Improve license support in p2.</title>
      <description>A license is typically a named artifact with a version. p2 is very good at handling such artifacts and have IU's express requirements on them. Instead of using this, licenses are inlined in the IU. This leads to problems since there are many variants with minor, often unintended differences (see bug 306627 for examples). I think a license like EPL 1.0 should be provided by an IU and that other IU's that use this license should express that using a requirement rather then in-lining the license. This vouches for one occurrence of the license and one occurrence of each translation of that license. Not only would that fix the issue with minor variations, it would also speed up the parsing of content.xml and also make it smaller. Ideally, the tooling mechanisms for this should be designed in such a way that it can be used for copyrights as well since that too is a special thing in an IU. It's not uncommon that a vendor uses the same copyright for all things.</description>
      <attachments/>
    </issue>
    <issue>
      <id>306824</id>
      <title>Builders returning null scheduling rule can't work safely with other builders overriding #getRule()</title>
      <description>+++ This bug was initially created as a clone of Bug #305858 +++ &gt; Apart from the NPE there seems to be no good reason why null should not be &gt; allowed. There's a problem with relaxing scheduling rules, and allowing some builders to return null. If the project contains a combination of builders: -(1) at least one returns null (and expects to modify resources) -(2) at least one specified a scheduling rule The build will fail, as the build MultiRule representing (2) doesn't contain the resources which will be modified by the builder (1). The problem with the API is that builders (1) &amp; (2) don't know anything about each other. Builder (1) is using the API to be as flexible as possible -- don't lock anything -- and Builder (2) wants some subset of the tree to be locked. The MultiRule generated isn't compatible with builder (1). Problems occurred building the selected resources. Errors running builder 'CDT Builder' on project 'SrpDownlink'. Attempted to beginRule: P/p1, does not match outer scope rule: MultiRule[F/p1/Debug] Attempted to beginRule: P/p1, does not match outer scope rule: MultiRule[F/p1/Debug] Attempted to beginRule: P/p1, does not match outer scope rule: MultiRule[F/p1/Debug] Attempted to beginRule: P/p1, does not match outer scope rule: MultiRule[F/p1/Debug] Errors running builder 'Scanner Configuration Builder' on project 'SrpDownlink'. Attempted to beginRule: R/, does not match outer scope rule: MultiRule[F/p1/Debug]</description>
      <attachments/>
    </issue>
    <issue>
      <id>307026</id>
      <title>Allow to subclass OpenFileAction and OpenWithMenu</title>
      <description>I20100323-0800. We should allow to subclass OpenFileAction and OpenWithMenu so that clients can override or extend which or how an editor is opened. For a concrete use case see bug 153912. There we need to be able to extend - OpenWithMenu.openEditor(IEditorDescriptor, boolean) - OpenFileAction.run()</description>
      <attachments/>
    </issue>
    <issue>
      <id>307098</id>
      <title>[Build] IncrementalProjectBuilder#getDelta should be useful with relaxed scheduling rules</title>
      <description>+++ This bug was initially created as a clone of Bug #198591 +++ As per bug 198591 comment 40. IncrementalProjectBuilder#getDelta can't be trusted with relaxed scheduling rules. Any resource changes made while the build was taking place (and some builds can take a very long time) will not be seen by the next build when it does #getDelta. There are a couple possible solutions: 1) use a different workspace tree, or track the changes made by other operations separately (likely hard and unreliable). 2) Redefine #getDelta, for reduced-sched-rule builders only, to be the delta since the *start* of the previous build. Option 2 should be fairly straightforward and still provide a useful result. Builders can distinguish between source and derived files. The builder only cares that it rebuilds all source files that have changed since the start of the last build -- if it ends up unnecessarily rebuilding one extra source file, that's a lesser price that forgetting to rebuild a file changed as part of the last build...</description>
      <attachments/>
    </issue>
    <issue>
      <id>307393</id>
      <title>OSGi Web Container RI: WAR extraction when installing a web application</title>
      <description>Build Identifier: Hi, I'm using OSGi Web Container RI. In my application I want to use the getRealPath(String) method from the Servlet API. Unfortunately when the application is not extracted on the file system, but loaded from the archive, this method returns NULL, this behavior is specified in the Servlet Specification and is correct, but most of the forums and wiki applications use actively the file system and the method specified above and cannot be rewritten in a way to escape the methods that depends on the file system. I can see in the OSGi repository that only the jar files from the WEB-INF/lib are extracted in ".cp" directory, but the other files are not extracted. In my application I have index.jsp that contains: config.getServletContext().getResourcePaths(/): &lt;%=config.getServletContext().getResourcePaths("/")%&gt; config.getServletContext().getRealPath(/): &lt;%=config.getServletContext().getRealPath("/")%&gt; If I request it: http://localhost:8080/app/index.jsp I'm receiving the following: config.getServletContext().getResourcePaths(/): [/index.jsp, /WEB-INF/, /META-INF/] config.getServletContext().getRealPath(/): null Is it possible to provide a file system extraction for the application in OSGi Web Container RI? Reproducible: Always Steps to Reproduce: 1.Deploy the attached application 2.Request http://localhost:8080/app/index.jsp 3.You will see that the result of getRealPath() is NULL</description>
      <attachments/>
    </issue>
    <issue>
      <id>307437</id>
      <title>Refactoring: Replace Old-Style Do Loops - CQ 4177 (approved)</title>
      <description>Build Identifier: 20090920-1017 Replace Old Style Do Loops Refactoring: This refactoring replace old style do loop formats whith a more structured construction by adding a END DO statement . Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>307552</id>
      <title>JAX-RS and Java EE 6 setup is incorrect</title>
      <description>Build Identifier: 3.6m6 Java EE 6 includes JAX-RS. When using a EE 6 server like GlassFish, and adding the JAX-RS facet, a user would expect the EE 6 RS configuration to be done automatically: 1/ by default no need to define user lib since RS is included in a EE 6 server 2/ good default name for the server (could be provided by an extension by the server adaptor) or we should used the Reference Implementation Servlet name, i.e com.sun.jersey.spi.container.servlet.ServletContainer instead of a generic and buggy com.mycompany.web.rest.RestServlet name. (even better, an editable combo box with all known names would be nice) 3/ since web.xml is now optional in Java EE 6, adding the RS servlet in web.xml is just one option to propose, but the best option for Java EE 6 RS would be to offer the capability to generate a new class in the project that implements javax.ws.rs.core.Application (all REST resources will be registered by this class) This way, you do not need to modify web.xml and this is suppose to work for all JAX-RS implementation (no need to non API servlet name in web.xml). For example, the wizard should have an entry field for the "resources" value and the gen code would be: package foo; @javax.ws.rs.ApplicationPath("resources") public class ApplicationConfig extends javax.ws.rs.core.Application { } nothing more, and this would really show the power of Java EE 6 and JAX-RS which is part of Java EE 6 Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>307758</id>
      <title>[extract local] Unable to refactor expression without resolved type in variable initializer</title>
      <description>Build Identifier: 20100218-1602 Selection is between "&lt;" and "&gt;". Alt+Shift+L (extract local) here reports "expression expected". One should not have to fix the error before refactoring in this manner. class A { public void m() { // foo is undeclared. int a = &lt;foo + 5&gt;; } } Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>308000</id>
      <title>[formatter] Formatter is missing options regarding Annotation Newlines</title>
      <description>Build Identifier: 20100218-1602 There are three options for how to deal with newlines with respect to annotations -- these are not enough. I want a newline after a method annotation, but not after a field annotation. Reproducible: Always Steps to Reproduce: 1. Open Preferences 2. Go to Java -&gt; Code Style -&gt; Formatter 3. Edit a Profile 4. Go to the New Lines tab 5. There is an option for 'members', but it does not distinguish between 'fields' and 'methods'</description>
      <attachments/>
    </issue>
    <issue>
      <id>308208</id>
      <title>[api] support Creole markup aka WikiCreole</title>
      <description>Build Identifier: M20090917-0800 "Creole is a common wiki markup language to be used across different wikis. It's not replacing existing markup but instead enabling wiki users to transfer content seamlessly across wikis, and for novice users to contribute more easily." - http://www.wikicreole.org/ This project is fairly successful, therefore it would be useful if Mylyn WikiText supported it out-of-the-box. There are various parser libraries available at http://www.wikicreole.org/wiki/Engines including T4 WikiParser (T4-WP), a Java-based parser http://web-tec.info/WikiParser/ WikiCreole supports extensions. There should be an option to either a) hide all extension text or b) display all extension text in fixed-width text. Reproducible: Always Steps to Reproduce: 1. Install Mylyn WikiText 2. There is no Creole :)</description>
      <attachments/>
    </issue>
    <issue>
      <id>308713</id>
      <title>Unable to compile project with JPA Entities and Eclipselink javax.annotation.processing.FilerException CanonicalModelProcessor</title>
      <description>Build Identifier: 2.0 See details on http://netbeans.org/bugzilla/show_bug.cgi?id=183779 Reproducible: Always Steps to Reproduce: See details on http://netbeans.org/bugzilla/show_bug.cgi?id=183779</description>
      <attachments/>
    </issue>
    <issue>
      <id>309030</id>
      <title>Support xml artifacts in plugin bundle root folders</title>
      <description>Dali currently forces (defaults) the persistence.xml to be contained under META-INF in the Java source folder of a project. This makes sense for Java SE projects since persistence.xml is found at runtime using the classloader. However, when JPA is used within OSGi EEG bundles persistence.xml is normally found using methods like Bundle.getEntry() - i.e. a relative path from the root of the bundle, not on the bundle classpath. The result is that we restrict the development project structure of OSGi bundles. If you want to be able to run directly out of the workspace, developers: - cannot separate Java source and resources like persistence.xml to suit their preferred project layout. - cannot easily use Bundle-Classpath to put Java output in a non-root folder within the bundle. (e.g. putting .classes under a /bin folder within the exported bundle) - cannot convert all existing WTP flexible projects (e.g. JEE web modules with a WebContent folder structure) to use JPA without moving restructuring the project. Both PDE (IBundleProjectDescription.setBundleRoot()) and WTP (flexible project structure) already allow you to structure projects so that the Java source and 'resources' are different folders. Please allow some flexibility in where persistence.xml is located to enable these OSGi development scenarios. My preference would be something simple, e.g. when JPA is used on PDE projects use IBundleProjectDescription.getBundleRoot() as the root instead of the Java source path. Alternately, even a JPA 'root' setting with no UI would be enough to allow adopters to create new projects or convert existing projects in this way.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309057</id>
      <title>[patch] provide "edit query in web UI" in URL-query wizard page</title>
      <description>If a query-from-Url is used, we could provide an edit-in-WebUI link in the wizard page directing the user to the query editing webpage. This would make it a bit easier to update queries like that.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309113</id>
      <title>Ability to have a single build console for a multi-project build</title>
      <description>Consider the case where you're building multiple projects in one build command - potentially as the result of references, or using the build-selected UI. Currently the build output is cached per-project, and this is useful for narrowing down an issue with building a single project. However this prevents you from looking at or saving the overall build output for the entire build. Moreover as the build console is context sensitive, new users are confused that the build output from building referenced projects 'disappears' as the build progresses. [Note you can't tell, from the Console View, that build output exists for any but the currently selected project. It's impossible to see the build output for other projects without selecting a resource in a navigator view.] It would be great if there was: - an overall 'build output' console, containing all the build output from a CDT build - if the build console "Display Selected Console" menu explicitly displayed the available build output buffers that the user might want to examine.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309224</id>
      <title>[NLS] Extensible mechanism for controlling available assembly techniques based on technology or vendor restrictions</title>
      <description>The new Deployment Assembly framework allows much more flexibility for the user, but also allow the user to assemble project contents that isn't allowed in the Java EE spec. Examples of this... Assembling an archive within an archive is only allowed in rar's and war's via web-inf/lib folder. Also war's can's assemble other war's inside it. Also... on the MANIFEST tab - war's are not allowed as references.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309343</id>
      <title>New JAXB/LML resource manager framework</title>
      <description>+++ This bug was initially created as a clone of Bug #303384 +++ At the last meeting, we discussed the need to add functionality to the Resource Manager to support dynamic querying of process attributes, particularly the process' PID. This supports the scalability open bugs in that PIDs cannot be scalably stored within the runtime model.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309519</id>
      <title>[Tree] New client implementation for Tree</title>
      <description>The Tree has several problems that cannot be fixed with the current client-side implementation. A new client Tree should be implemented along the lines of the Table.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309578</id>
      <title>EGit and Mylyn encourage best-practice use of branches: task-related changes occur on a branch</title>
      <description>I would be great to see EGit/Mylyn integration support Git branching as a first-class citizen. Consider the following scenario: * User starts working on a Mylyn task (ie: activates the task) * EGit automatically creates a branch named after the task (eg: bug12345) if it doesn't already exist, and switches the right git repos to the new branch * User performs work on the branch, staging, committing etc. * User deactivates the current task either by deactivating it or activating a new task * EGit switches to the 'master' branch if there's no new active task, or switches to the appropriate branch for the newly activated task Obviously the workflow above is overly simplified; it doesn't consider things like subtasks, multiple git repos, etc. The general idea is that EGit and Mylyn together could encourage best-practice use of Git branching, possibly automating some of the steps involved.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309582</id>
      <title>Implement synchronization feature in EGit</title>
      <description>There are currently no Team synchronization participants in EGit. The 'Synchronize' view provides users with an excellent overview of changes in local and remote files and would be a great step forward over the existing tedious workflow of individually clicking files and going 'Compare With &gt; Git Index' ad infinitum (unless I'm missing some other way to do this from within Eclipse).</description>
      <attachments/>
    </issue>
    <issue>
      <id>309603</id>
      <title>Improve quick fixes to be more like JDT in the editor UI</title>
      <description>I noticed that quick fixes are not as obvious as JDT's: - The marker doesn't have a light bulb - You can't click on the marker to have a list of quick fixes - You can't hover on the problem and have a list of quick fixes So, I don't think there is a way for the user to know visually that there is a quick fix available.</description>
      <attachments/>
    </issue>
    <issue>
      <id>309899</id>
      <title>[terminal][local] New local terminal launch configurations should have reasonable default values</title>
      <description>Build Identifier: When the user creates a new terminal launch configuration for the local terminal connector the configuration initially comes up empty. It is up to the user to fill in the path to the shell's executable, the working directory, and any applicable command line arguments. To bring up a shell in a terminal for the first time the user must go through the complete configuration. As an improvement to this process, new terminal launch configurations should already contain sensible default values that are determined automatically. If present, the contents of the $SHELL variable can be used to initialize the location of the shell's executable. If reading $SHELL is not possible the terminal connector could still search in common platform-specific locations to find a shell. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>310059</id>
      <title>[api][framework] provide 'update configuration' button on query pages</title>
      <description>Build Identifier: It would be great to have generic solution to add the button to the bottom of the page where 'Finish' and 'Cancel' buttons are placed (but on the left). Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>310128</id>
      <title>Improve commit dialog: git index handling, tree view, embedded compare...</title>
      <description>Created attachment 165778 [details] Mock-up of a new EGit commit dialog Added a proposal for a new commit dialog. A Mock-up is attached. It adresses different topics: - Git index (stage) handling There are bugs open which show demand for handling the git index (309359 , 309362, 309365). This proposal adds the handling of the git index to the commit dialog. The commit dialog has a list of the unstaged changes and a list of the staged changes to (similar to git-gui). It is possible to stage or unstage files in the dialog. However, as before, only the files are committed whose checkbox is selected. Per default only the staged files have their checkbox selected. It would also be possible to (un-)stage parts of a file from the compare panel. There are users who do not want to use the index. For them the old behaviour may be better suited. Maybe we could offer a possibility to switch between the two styles: One with the two lists (and the possibility for the user to commit also partially staged files), and one with only one list as before. Another proposal was made in bug 309582: Show only one tree which contains three top nodes: -Staged --GitIndex.java -Modified --... -Untracked --... Or better use a new view for index handling? Maybe it would be better not to show the unstaged and staged changes in the dialog but in a new view which could serve as a good overview for the local changes. One could still show a list in the dialog: Either only the staged changes or staged and unstaged changes in one list like now, add the user could switch between the two. What do you think? - Better presentation of changes in a tree like manner (like in the CVS commit dialog) Besides a quicker overview of the location of the changed file this would make it easier to (de-)select whole trees. - Embedded compare The compare UI could be toggled with a button in the toolbar of the list(s)/tree(s) of changed files. We propose not to open another dialog but to show it in the same dialog. Most often a user wants to see the changes while typing the commit message. A toggle button (Diff/Compare in the proposal) enables to switch between unified diff and the eclipse compare UI. Please share you ideas and do not hesitate to propose something completely different ;-)</description>
      <attachments/>
    </issue>
    <issue>
      <id>310132</id>
      <title>[publisher] Publisher app + ant task should support statsURI option and generating required metadata for tracking download stats</title>
      <description>Per discussion in bug 302160, the Publisher should be able to add metadata required to track one or more bundles as described in bug 302160 comment 17 and bug 302160 comment 18. It would be awesome if this could be done in time for people to adopt it for Helios, so we can finally get an accurate picture of p2 install download stats.</description>
      <attachments/>
    </issue>
    <issue>
      <id>310208</id>
      <title>Graphical Modeling Framework (GMF) Restructuring</title>
      <description>Following from Bug 304589 , we now need to do the work. The Graphical Modeling Framework (GMF) project will be restructured under the new Graphical Modeling Project (GMP) within modeling. The existing GMF project will be split into three sub-projects under GMP and the proposed Graphiti project will join GMP. So GMP would contain: GMF Tooling GMF Runtime GMF Notation Graphiti This Bugzilla will be the parent Bugzilla for tasks assigned to webmaster and GMF teams.</description>
      <attachments/>
    </issue>
    <issue>
      <id>310547</id>
      <title>Support usage scanning tools in IDE</title>
      <description>The 3.6 API tools have support for usage scanning - allowing adopters to provide scans back to you on what API and internal code they're using. As far as I can tell, these tools are currently command-line and there is no support for using the reports within the IDE. I'm opening this enhancement to request IDE support - being able to point to a number of scans, have it show you which classes and methods are being used, and the ability to flag errors when usage is broken (i.e. when you don't want to break adopters within a service release, no matter how much internal code they used).</description>
      <attachments/>
    </issue>
    <issue>
      <id>310570</id>
      <title>[patch] Mirror-fy Orbit downloads</title>
      <description>Created attachment 166160 [details] patch for index.php.template to use mirror urls We should take advantage of mirrors and make the Orbit downloads use Eclipse mirrors. The attached patch changes the index.php in the drops directory to use Eclipse.org mirrors.</description>
      <attachments/>
    </issue>
    <issue>
      <id>310578</id>
      <title>[patch] Add ability to categorize Orbit builds</title>
      <description>Created attachment 166165 [details] patch for introducing categorization plumbing to Orbit build The attached patch modifies the publish.xml script of the Orbit builder to introduce an additional step. The step allows categorizing an Orbit repository using a category.xml file. Note, the step is completely optional. If the category.xml is not present, the step will be skipped. A category.xml has to be located in the releng project next to the map file (together with the other build driving files). This patch does intentionally not introduce categories. It's just the plumbing to support categorization.</description>
      <attachments/>
    </issue>
    <issue>
      <id>310602</id>
      <title>[formatter] Make the Java Formatter extensible</title>
      <description>Build Identifier: I20090611-1540 Many people (including me) don't use JDT's Java Formatter, because they don't like one or another detail of its formatting strategy. Since the Java formatter is not extensible (extension point "org.eclipse.jdt.core.codeFormatter" only worked for Eclipse 2, see https://bugs.eclipse.org/bugs/show_bug.cgi?id=309787 ), it is not possible to modify or enhance it. I envisage a set of extension points that allow one to, e.g., add "line wrapping policies", or tree items on the "Line Wrapping" tab of the profile editor. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>310835</id>
      <title>EMF support for GWT</title>
      <description>Port the core runtime to GWT and support generating model and edit plugins against the runtime platform.</description>
      <attachments/>
    </issue>
    <issue>
      <id>311128</id>
      <title>add support for metatype on declarative services</title>
      <description>Created attachment 166592 [details] proposed patch The current OSGi specification does provide for metatype on declarative services. I have proposed the addition of this capability here: https://www.osgi.org/bugzilla/show_bug.cgi?id=73 I have implemented the proposed change in the attached patch. I wasn't sure if I could create a filter with an AND nested in an OR, so I created a second service tracker. If there is a way to create a complex filter, the patch can be optimized by removing the second service tracker.</description>
      <attachments/>
    </issue>
    <issue>
      <id>311191</id>
      <title>[scm] provide core connector for Subversive</title>
      <description>Build Identifier: 20090920-1017 Define an interface to connect SVN repositories with Mylyn Reviews (via the Subversive plug-in) Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>311299</id>
      <title>Enable team context menu actions on working set</title>
      <description>Build Identifier: I20100413-1521 Many of the operations on (Java) projects make sense on the entire working set. Currently, there are no git actions available for a working set. If you block-select all the projects inside the working set, then many (all?) of the actions are available. This is the expected behaviour. Motivation: Maven multi-module projects create one Eclipse project for each subproject, and they'll all normally be stored in the same git repo (with the parent pom in the root). Subclipse allows this, too. Reproducible: Always Steps to Reproduce: 1. Add two or more git-enabled projects to a Java working set in the Java Package Explorer. 2. Right click it -&gt; Team -&gt; ... 3. Observe "Apply patch.." being the only action.</description>
      <attachments/>
    </issue>
    <issue>
      <id>311617</id>
      <title>[formatter] provide default tags to enable/disable formatter</title>
      <description>Follow-up to bug 27079 comment 40 When bug 311582 is fixed, we can supply default tags to enable/disable the formatter. Proposals so far: - @formatter:off / @formatter:on - //J- / //J+</description>
      <attachments/>
    </issue>
    <issue>
      <id>311966</id>
      <title>create XMLRPC operation for status transition</title>
      <description>bug#259291 adds support for version &lt;3.6 so we use this but to track the needed changes for the 3.6 version.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312146</id>
      <title>Improve Support for ON Clause</title>
      <description>Build Identifier: Eclipse Persistence Services - 2.0.1.v20100213-r6600 This request is just a marker where information can be shared between parties that are interested in the topic. Thanks to Tom Ware for presenting the idea to the specification group. This was discussed in eclipselink-users in May 2010, subject: [eclipselink-users] Conditional LEFT JOIN in JPQL. Attached is a demo case that can be used to play with the subject. Tom has generously offered to try an EclipseLink API solution that will provide the desired result without prematurely implementing a JPQL solution. I hope that Tom finds this demo case useful for that purpose. Again, many thanks for supporting this development. Reproducible: Always Steps to Reproduce: Please refer to attached demo case. The aim is to support query results from what would otherwise be a native query like: SELECT p.name, f.id FROM product p LEFT OUTER JOIN product_favorite f ON (p.id = f.product_id AND f.user_id = :userId) The current issue is that JPQL does not support any construct that lets us qualify the outer join beyond the relationship condition, in other words the "ON" keyword or an equivalent is missing.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312163</id>
      <title>[validation] Investigate XML Schema 1.1 support</title>
      <description>It would be quite possible to add XSD validation for the XML Schema 1.1 even if the EMF model and editor can't cope just yet. XML Schema 1.1 is supported by the upcoming Xerces-J 2.10 release, which would have to be added to Orbit. Actually Xerces-J 2.10 optionally relies on WTP's very own PsychoPath XPath2 engine for XML Schema 1.1 instance validation, so this will be tricky, dependency-wise. I OSGi will help out here.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312254</id>
      <title>Plan verifier to allow third party plugin to veto a provisioning plan</title>
      <description>Created attachment 167704 [details] Patch v 01 The issue is very visible in the Eclispe based products which have all plugins marked as optional. This patch should open P2 for verification - if particular feature/plugin should be installed into the product.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312378</id>
      <title>Provide ssh key upload UI</title>
      <description>The current process for storing a committer's SSH keys on git.eclipse.org is a little arcane and labour intensive as it depends on providing shell access - see https://bugs.eclipse.org/bugs/show_bug.cgi?id=312034#c3. Other git hosting solutions such as gitorious provide a web UI for uploading SSH keys. Something similar should be provided in Eclipse, especially as increasing numbers of projects are likely to turn to git in the future. Perhaps this would also apply to other eclipse.org servers which support ssh access.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312534</id>
      <title>Revert objects to CLEAN if new state matches clean state</title>
      <description>Say one loads an object A with a value of 1 for attribute x. A will be CLEAN. Say one then assigns A.x=2; this causes A to transition to DIRTY. Then, say one assigns A.x=1. A will still be DIRTY even though its state is now identical again to its persisted "current" revision. It would be useful to have a way of detecting that A's state is now identical to its persisted state again, and of having it therefore revert to state CLEAN (and to using the persisted revision instead of the transactional revision). This is useful, for example, when using EMF Commands, the purpose of which is (among other things) to support undo/redo of operations on EObjects. Currently, if one undoes an EMF command that operated on a CDOObject, the CDOObject will remain DIRTY even if the undo-op restores the object's state to what it was when it was cleanly loaded. From the perspective of an EMF Command user, that will seem strange.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312586</id>
      <title>Fetch/Push dialog needs to be grossly simplified</title>
      <description>Okay, I lied in bug 311354, I also use the command line to push. Why? Because the dialog is confusing. ------- What I wanted to do: $ git push ssh://rsuen@egit.eclipse.org:29418/egit.git HEAD:refs/for/master What I expected: A wizard page with two fields, a text field for the URI and maybe a combo for selecting the destination. Extras can come in later wizard pages but I should be able to "early finish" the wizard. What I got: Multiple input fields with completion support, many choices for adding a spec, one of which is a button that says "Add spec" but with an 'X' marker (upon careful inspection you realize it is something to do with _deletion_), checkboxes under a 'Force Update' column and a trash can icon. The most exciting thing is probably that the 'Next &gt;' button is enabled, implying more options for you to pick in page two. http://wiki.eclipse.org/images/9/9c/Egit-0.6-007-PushRefSpecifications.png ------- I do use the dialog to fetch because it seems to have magically guessed what I wanted to fetch. I have since never touched the input of that dialog for fearing of screwing it up. I've spoken to two other people on IRC that also agree that this dialog is way too cluttered. I imagine there are more people out there that feel the same. My question to you is, do you fetch/push using EGit? And if yes, how often do you actually change the input fields of this dialog?</description>
      <attachments/>
    </issue>
    <issue>
      <id>312715</id>
      <title>Need symlink support in eclipse for windows vista</title>
      <description>Status WARNING: com.ibm.team.filesystem.client code=0 Problem detected: your filesystem supports symlinks but you are missing the Eclipse native support for them null. I am using Rational Team Concert 2.0.0.2</description>
      <attachments/>
    </issue>
    <issue>
      <id>312787</id>
      <title>Can signing processes be moved or added to new build2 hardware?</title>
      <description>I suspect you've already thought of this ... but, "signing" adds significantly to our builds. * Sometimes, I suspect, simply because some other large build is in the queue. But, seems it is a bottle neck, in either case. Can the process take advantage of the (currently) idle hardware? Hopefully transparently to those of us building on 'build'. * We had one case of a 30 minute build taking 3 hours when signing turned on. But more routinely it at least doubles our build time ... a normally 4-5 hour build/test cycle taking 8, 10, or even 12 hours, when signing turned on.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312811</id>
      <title>Create a Helios wallpaper</title>
      <description>I would love to see a Helios wallpaper to grace my desktop. Can Nathan come up with one this year if he has the time? He's got skills.</description>
      <attachments/>
    </issue>
    <issue>
      <id>312928</id>
      <title>[build] create Hudson JAXB model</title>
      <description>Generate a JAXB model from the Hudson XML schema for marshalling/unmarshalling to communication with the Hudson REST API. Place build.xml, PrimaryView.xsd and jaxb-dependencies.zip in the root of org.eclipse.mylyn.hudson.core (this files don't need to be checked in). Then unpack the zip and execute the ant build. Apply the patch for the javax.xml.bind dependency. The proposed package is org.eclipse.mylyn.hudson.internal.rest.model</description>
      <attachments/>
    </issue>
    <issue>
      <id>313179</id>
      <title>[Usability] Refactor CreateModelWizard</title>
      <description>Now CreateModelWizard class has checks like this almost in every method: if (templatePath != null) {...} else {...} It(and some other methods ) makes it very difficult to re-use (say, in bug #267010 ' [General] Project creation wizard creating a new project and a new Papyrus model at once') Refactor the code of CreateModelWizard for easier re-user</description>
      <attachments/>
    </issue>
    <issue>
      <id>313479</id>
      <title>Allow for individual project donations</title>
      <description>Friends of Eclipse is fine and lets the ecosystem benefit. However, individual project donations would help especially smaller projects without commercial backing. Thus please add functionality that allows projects to embedded a "Donate to this project" button on their website and have the foundation handle the backend transactions. I think it is best if the foundation still receives the donation (for legal/tax deductible reasons) but the project gets to choose how the money is eventually spent. My concrete use case is, that the ECF project needs new build hardware.</description>
      <attachments/>
    </issue>
    <issue>
      <id>313524</id>
      <title>[formatter] Add preference for improved lines wrapping in nested method calls</title>
      <description>3.6 M7. See bug 59891 for details. Possible name of the preference: [ ] Try to keep nested expressions on one line</description>
      <attachments/>
    </issue>
    <issue>
      <id>313883</id>
      <title>Have a command-line argument for cleaning deltas or not creating it, at all</title>
      <description>Build Identifier: I20100520-1730 (started in e4 community forum, see http://www.eclipse.org/forums/index.php?t=msg&amp;th=168572&amp;start=0&amp;) There should be a way to clean the workbench deltas.xml on application startup or to not even create them, at all. There are three use-cases currently on my mind: 1. Application trouble-shooting. Let's say user is starting up an e4-based product, which (howsoever) shows some mis-behaviour. To reset an application to an initial model state (as when rolled out) would be a good idea. This could be utilized for example from 1st level support. 2. Enforced initial perspective If you want to always have the same perspective on each startup of the application (a so-to-say enforced initial perspective) using model-deltas will always be counter-productive. This is, you need some additional code (maybe in add-on or LifecycleManager) to make the intial perspective _initial_ again. 3. Confusing behavior Let's say, you have to choose a project on application startup, which will be the global context for everything you do when using the application. May be you utilize the "File-Open" menuitem to choose the project. After project is chosen, parts will open up programmatically and you can navigate through your application. On application restart, the deltas.xml is interpreted and all the views last-opened show up again. But you do not have any project, that is global context is missing. Now you're in the need to have some additional code, to ensure "all" the views get closed again, since the end-user might feel it being strange to have a table-view with no contents (thus, support is called, "all the project data are gone" :-) ). Another possible way could be, persisting &lt;variable&gt;'s in deltas.xml. But this could be a security-breach. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>314021</id>
      <title>Make debugging proxy resolutions easier</title>
      <description>A rather too common debugging problem is identifying why a proxy resolution failed. This is rather hard. a) the residual proxy is not detected till long after the failure b) instrumenting EcoreUtil.resolve is hard If the three common final return paths in EcoreUtil.resolve for: 1) null proxyURI (very common and not an error) 2) resolved to no change 3) resolved to null had different return statements, breakpoints could easily distinguish the problem from the noise.</description>
      <attachments/>
    </issue>
    <issue>
      <id>314166</id>
      <title>improve scheduled presentation bins and sort order</title>
      <description>The scheduled presentation currently has the following problems: * Items can show up in more than one bin, eg, if something is both scheduled and overdue. This duplicates information, is confusing, and makes the presentation appear buggy. * Tasks are missing from the presentation, meaning that the user needs to switch back to the Categorized presentation to reliably find things. Here's an updated design that addresses these problems, bins are: * *Today*: Same us now, only place that "overdue" tasks show. Day bins have are similar. * *This Week*: no change, same sorting as now, "Next Week""Two Week" and "Future" bins are similar. * *Outgoing*: new bin with all outgoing tasks * *Incoming*: new bin with all tasks with incomings not already shown in above bins, sorted by modification date. * *Unscheduled*: no change. * *Completed*: all tasks that don't show in above bins. The idea is that no tasks that show in a higher-ranked bin show in the bin below.</description>
      <attachments/>
    </issue>
    <issue>
      <id>314283</id>
      <title>[package explorer][render] Decorator on CUs for deprecated and package-visible</title>
      <description>Build Identifier: 20100318-1801 In the Preferences window (General-&gt;Appearance-&gt;Label Decorations) user can set a check-box "Java Type Indicator". If the box is checked, small icons appear in the Package Explorer: I (interface), A (abstract), E (enum). I propose the following extensions: 1) (more important). Add check-box "Java Deprecated Decorator" which means that deprecated classes will be highlighted somehow in Package Explorer. At once I can imagine 3 variants a) strike-out; b) italic; c) diagonal line like in Outline. As for me, (a) strike-out is the best variant (if the name of a class remains readable). 2) (less important). Add the check-box "Java Throwable Indicator/Decorator" for Throwable and possibly for abstract Throwable (because Throwable can be abstract also). It can be a) Indicator, so small icon will be shown for Throwable (maybe letter "T" and letters "AT" for abstract one). Or b) Decorator and the name of the class become italic for example (if deprecated decorator is not italic) or something like this. Reproducible: Always Steps to Reproduce: 1. Open Package Explorer.</description>
      <attachments/>
    </issue>
    <issue>
      <id>314388</id>
      <title>Provide composite software site(s) for all Modeling projects</title>
      <description>Based on our discussions during various PMC calls, we want to create (a) composite site(s) for all Modeling projects rather than having aggregate sites for the various container projects. This is desirable since we're already using "Eclipse Modeling Project" and an associated branding icon for our projects; it only makes sense to use common update and discovery sites as well. The proposal is to host composite content and artifacts XML files in CVS which would be accessible at http://www.eclipse.org/modeling/updates. Projects would contribute to the site by including references to their respective (operating) project-specific sites for each release. Similar sites for milestone and interim builds would be be at http://www.eclipse.org/modeling/updates/milestones and http://www.eclipse.org/modeling/updates/interim, respectively. In order to adopt the new composite site in time for Helios, each project would need to a) add a reference to their (project-specific) site and b) change the update and discovery site references in their features to point to the new URL.</description>
      <attachments/>
    </issue>
    <issue>
      <id>314591</id>
      <title>Refactoring: Remove Unreferenced Labels - CQ 4178 (approved)</title>
      <description>Build Identifier: I20100513-1500 This refactoring removes the labels that are not longer referenced by any statement. If the statement is a Continue statement , the Continue stmt is removed from the code. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>314659</id>
      <title>Move remote launch/debug to DSF</title>
      <description>I'd like to have this feature working with DSF.</description>
      <attachments/>
    </issue>
    <issue>
      <id>314853</id>
      <title>Missing support for submodules</title>
      <description>Trying to import a repo from Github [0], I get a ITE. java.lang.reflect.InvocationTargetException at org.eclipse.egit.core.op.CloneOperation.run(CloneOperation.java:130) at org.eclipse.egit.ui.internal.clone.GitCloneWizard$2.run(GitCloneWizard.java:178) at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121) Caused by: java.lang.NullPointerException at org.eclipse.jgit.lib.GitIndex$Entry.&lt;init&gt;(GitIndex.java:435) at org.eclipse.jgit.lib.GitIndex.addEntry(GitIndex.java:847) at org.eclipse.jgit.lib.WorkDirCheckout$1.visitEntry(WorkDirCheckout.java:183) at org.eclipse.jgit.lib.IndexTreeWalker.finishVisitTree(IndexTreeWalker.java:199) at org.eclipse.jgit.lib.IndexTreeWalker.walk(IndexTreeWalker.java:136) at org.eclipse.jgit.lib.IndexTreeWalker.walk(IndexTreeWalker.java:114) at org.eclipse.jgit.lib.WorkDirCheckout.checkoutOutIndexNoHead(WorkDirCheckout.java:167) at org.eclipse.jgit.lib.WorkDirCheckout.checkout(WorkDirCheckout.java:144) at org.eclipse.egit.core.op.CloneOperation.doCheckout(CloneOperation.java:227) at org.eclipse.egit.core.op.CloneOperation.run(CloneOperation.java:121) ... 2 more Root exception: java.lang.NullPointerException at org.eclipse.jgit.lib.GitIndex$Entry.&lt;init&gt;(GitIndex.java:435) at org.eclipse.jgit.lib.GitIndex.addEntry(GitIndex.java:847) at org.eclipse.jgit.lib.WorkDirCheckout$1.visitEntry(WorkDirCheckout.java:183) at org.eclipse.jgit.lib.IndexTreeWalker.finishVisitTree(IndexTreeWalker.java:199) at org.eclipse.jgit.lib.IndexTreeWalker.walk(IndexTreeWalker.java:136) at org.eclipse.jgit.lib.IndexTreeWalker.walk(IndexTreeWalker.java:114) at org.eclipse.jgit.lib.WorkDirCheckout.checkoutOutIndexNoHead(WorkDirCheckout.java:167) at org.eclipse.jgit.lib.WorkDirCheckout.checkout(WorkDirCheckout.java:144) at org.eclipse.egit.core.op.CloneOperation.doCheckout(CloneOperation.java:227) at org.eclipse.egit.core.op.CloneOperation.run(CloneOperation.java:121) at org.eclipse.egit.ui.internal.clone.GitCloneWizard$2.run(GitCloneWizard.java:178) at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121) org.eclipse.egit.feature.group: 0.8.0.201005262112 org.eclipse.jgit.feature.group: 0.8.0.201005241328 [0] http://github.com/lemmy/org.eclipse.ecf.discovery.dnssd</description>
      <attachments/>
    </issue>
    <issue>
      <id>315031</id>
      <title>Adopt faceted project framework in pdt</title>
      <description>There's more and more extensions for php projects. To name a few, there is: PHPUnit, PHP frameworks (e.g. Zend Framework, Cake PHP), and possibly all general-web related frameworks (e.g. javascript, tag libraries). Currently there's no common way to add/remove such extensions to PDT project, so user has to spend considerable time figuring out the right place in Project Properties dialog. It would be great to standardize around one mature solution. The option that I like the most is faceted project framework, because: 1. it's documented (http://www.eclipse.org/articles/Article-BuildingProjectFacets/tutorial.html) 2. supports such nuances as multiple versions of the same library 3. it's ready to use PDT 2.3 would be a good time to implement this.</description>
      <attachments/>
    </issue>
    <issue>
      <id>315264</id>
      <title>Feature: support for git-svn</title>
      <description>I request the support for git svn support to commands like: git svn clone git svn rebase git svn dcommit git svn branch git svn tag Follow some suggestion: On a git-svn project it should raise a warning if the user try to rebase an already dcommitted (on subversion branch) commit. see https://git.wiki.kernel.org/index.php/SvnMigration and this discussion on the git mailing list http://marc.info/?l=git&amp;m=127445374518553&amp;w=2 I think this would help a lot java developers willing to switch to git. Moving to git-svn before "pure" git would be easier then moving directly to git.</description>
      <attachments/>
    </issue>
    <issue>
      <id>315507</id>
      <title>Add JavaScript formatting option for anonymous functions</title>
      <description>Build Identifier: Build id: 20100218-1602 It should be possible to set white-space formatting rules differently for anonymous functions and named functions. Use-case: It should be possible to stipulate that white-space must precede the opening parenthesis in an anonymous function declaration while named function declaration should not. Example: var foo = function () { // some code }; function foo() { // some code } Reproducible: Always Steps to Reproduce: Not really a bug, more of a feature request. Go to Window &gt; Preferences &gt; Web &gt; JavaScript &gt; Code Style &gt; Formatter. Under the White Space tab open Declarations and see that there is only a setting for Functions (not Named Functions and Anonymous Functions)</description>
      <attachments/>
    </issue>
    <issue>
      <id>315589</id>
      <title>When cloning a repository, if a URL is in the clipboard, use that</title>
      <description>Build Identifier: 0.8.1 It's possible to get hold of the SWT clipboard with: Clipboard clippy = new Clipboard(shell.getDisplay()); String text = (String)clippy.getContents(TextTransfer.getInstance(); clippy.dispose(); We can then check if it's against a known URLish (though I don't know of a good way to do that? The various transport.canHandle() return true/false, but there's no easy way of checking that without doing an open), and if so, pre-fill that with a value. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>315677</id>
      <title>[variables] Add "hasSubExpressions" method to IExpressions</title>
      <description>Currently "getSubExpressionCount" of the "IExpressions" service is used to handle both IHasChildrenUpdate and IChildrenCountUpdate requests. Adding "hasSubExpressions" will allow models to distinguish these cases and handle it differently.</description>
      <attachments/>
    </issue>
    <issue>
      <id>315680</id>
      <title>Moveable/Draggable Views</title>
      <description>Created attachment 171032 [details] Patch to enable view dragging/movement. We need to have moveable/draggable views...very important eclipse feature. So I decided to try a quick and dirty attempt to get it working. Obviously from the newsgroup discussions, the Tracker widget is the blocker: http://www.eclipse.org/forums/index.php?t=rview&amp;goto=515434&amp;th=162885#msg_515434 And we have some ideas how this can be implemented properly. But while we are getting our hands dirty, here is a patch for the 1.3M7 target platform that will enable views to be dragged, obviously with no feedback. But most eclipse users in general will know what happens when you drag a view to the top, left, right, or bottom of another view. Again, this is a quick and dirty hack to get it working so we can work on a client-side tracker implementation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>315772</id>
      <title>[preferences] Better UI to find preferences on Java &gt; Compiler &gt; Errors/Warnings</title>
      <description>I always have a difficult time finding the correct preference on this page - scrolling and twisties are painful. (Plus we do not have mnemonics for all the preferences - I don't care for mnemonics too much but someone else might) Possible solutions: 1. Sub pages for each category - Preferences in each category (except potential programming problems) fit in one screen, hence (almost) no scrolling required. - Lesser mouse clicks - Opening and closing a twistie is 2 mouse clicks, selecting a sub page would be only one mouse click Pros - Simple to implement! Cons - Names of 3 categories are longer than 2 words, hence the subpages names in the tree will not look too good. - You still have to know the category to find the preference quickly - and except for very frequently used preferences this will not be true. 2. Create a filter box in this page - This might be useful in other preference pages as well? 3. Use the existing filter box on the left side to reveal and highlight individual preferences. - I do not know how easy or difficult it is going to be with existing UI 4. Mozilla provides Power User preference management where you can filter by single pref. Maybe we can add a node 'All' at the bottom of the tree in left pane, which just lists all the preferences available in a filterable table containing 3 columns - key, type, default value?, value. - A command can be added to directly go to this 'All' page - This 'All' page is something similar to what is suggested for Properties View on http://wiki.eclipse.org/index.php/UI_Best_Practices_v3.x#Properties_View. My favorite is option 4, but would settle for Option 2 as well.</description>
      <attachments/>
    </issue>
    <issue>
      <id>315780</id>
      <title>[SysML] Papyrus shall support SysML Requirement diagram</title>
      <description>Papyrus shall support SysML Requirement diagram</description>
      <attachments/>
    </issue>
    <issue>
      <id>315951</id>
      <title>WSDLElementImpl leaves spaces in source afrer forceNiceRemoveChild - EMF command undo/redo broken</title>
      <description>Build Identifier: M20100211-1343 We do use EMF based model for WSDLs in Eclipse (org.eclipse.wst.wsdl). We have noticed that: org.eclipse.wst.wsdl.internal.impl.WSDLElementImpl.forceNiceInsertBefore(Node, Node, Node) does insert spaces, and other formating characters into WSDL document. This method is called when do execute EMF command over org.eclipse.wst.wsdl model. When we do call undo of the executed EMF command the following method is called: org.eclipse.wst.wsdl.internal.impl.WSDLElementImpl.forceNiceRemoveChild(Node, Node) this method does not remove spaces and other formating characters, and thus leaves them in the WSDL document. This makes imposible to mix "EMF command undo", and "Text command undo", because the text command characters' range is cahnged by the left spaces into WSDL source. Please do see the effect into the attached wsdl files (open them with editor which shows all characters - CR,LF): 1. wsdl_step1.wsdl - in this wsdl I have added lines 23,24,25 by Text Command from source editor 2. wsdl_step2.wsdl - using EMF model org.eclipse.wst.wsdl we did add lines 22,23 3. wsdl_step3.wsdl - we did undo of (2), and we can see that the method: org.eclipse.wst.wsdl.internal.impl.WSDLElementImpl.forceNiceRemoveChild(Node, Node) did not removed the spaces (formating) added by forceNiceInsertBefore - lines 22, 23. 4. wsdl_step3.wsdl - we did undo of (1), and here the wsdl is broken. The reason is the left formating characters (by 3) by forceNiceRemoveChild Reproducible: Always Steps to Reproduce: Bug is visible into the code - not symetric methods: org.eclipse.wst.wsdl.internal.impl.WSDLElementImpl.forceNiceRemoveChild(Node, Node) and org.eclipse.wst.wsdl.internal.impl.WSDLElementImpl.forceNiceInsertBefore(Node, Node, Node)</description>
      <attachments/>
    </issue>
    <issue>
      <id>316152</id>
      <title>Add EDL to the list of licenses in the SUA</title>
      <description>Add the Eclipse Distribution License[1] to list of "other" licenses in the "Applicable Licenses" section of the Eclipse Foundation Software User Agreement[2]. The plain HTML[3] and Java Properties[4] versions of the SUA will also have to be updated as well. [1] http://www.eclipse.org/org/documents/edl-v10.php [2] http://www.eclipse.org/legal/epl/notice.php [3] http://www.eclipse.org/legal/epl/notice.html [4] http://www.eclipse.org/legal/epl/feature.properties.txt</description>
      <attachments/>
    </issue>
    <issue>
      <id>316225</id>
      <title>Error message from Proxy should be displayed in Dialog</title>
      <description>Created attachment 171482 [details] Patch to show errorMsg argument Currently if the Proxy sends a Error event an error dialog is shown. But this error dialog doesn't show the error event errorMsg argument. The patch fixes this and uses it for the PBS proxy to send error message if the pbs commands can't be executed correctly.</description>
      <attachments/>
    </issue>
    <issue>
      <id>316444</id>
      <title>Provide a mechanism to prevent containment cycles</title>
      <description>Build Identifier: 3.0 CDO should provide an option which prevents the creation of containment cycles on server side. Containment cycles can occur if multiple client work on a containment tree (composite pattern). Perhabs this enhancement could be covered by enhancement 316434. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>316513</id>
      <title>JMX: Refactor MBean support to include JBoss WebSphere and GlassFish</title>
      <description>&gt;EclipseLink currently supports JMX MBeans on WebLogic 10.3 via bug# 248748 &gt;This enhancement starts the investigation extend JMX support to JBoss and WebSphere and optionally Glassfish We are splitting the enhancement request by application server, the actual analysis, design and implementation will have aspects that are common to all 3 or 4 of these sub-requests. &gt;WebLogic = bug# 316509 &gt;JBoss 6 = bug# 316511 &gt;WebSphere 7 = bug# 316510 &gt;Glassfish 3 = bug# 316512(optional)</description>
      <attachments/>
    </issue>
    <issue>
      <id>316671</id>
      <title>PBS: Read model definition from XML and send to client</title>
      <description>Currently the model definition (including the attribute definitions) is coded into the Java code of the Proxy and Client. It would be better to store it in an XML file and send it to the client during the ModelDef Proxy Protocol phase.</description>
      <attachments/>
    </issue>
    <issue>
      <id>317129</id>
      <title>Implement graphical editor</title>
      <description>Implement a full fledges graphical editor for STEM</description>
      <attachments/>
    </issue>
    <issue>
      <id>317384</id>
      <title>[build] add "Run build" functionality</title>
      <description>Users should be able to start a build on the CI server inside Eclipse.</description>
      <attachments/>
    </issue>
    <issue>
      <id>317657</id>
      <title>[console] add command history</title>
      <description>The Virgo project has a requirement for command history to be supported in the Equinox console. We had to drop our jline support which provided command history (up arrow retrieval of earlier commands) because of the failure to get Eclipse legal approval for jline.</description>
      <attachments/>
    </issue>
    <issue>
      <id>317764</id>
      <title>Could there be a "prefer signed" option?</title>
      <description>I've seen this issue come up a few times, so wanted to capture the use case, here ... not sure if it is a common case, or feasible to implement. Some bundles are not signed every build. (for example, WTP doesn't sign every build ... just because it is so expensive to do so ... especially if you do "continuous builds"). So, if someone installs or "mirrors" one of those, then it will never be replaced, unless the qualifier changes ... even once it is signed in a later build. Seems it would be nice to have some metadata to say if the IU had been signed and for mirror tasks and install tasks to allow a "prefer signed" option so an IU with same qualifier would be replaced, if a signed version was available. I guess it is debatable, but to me, a signed bundle and an unsigned bundle do have the "same bits" (same executable code) ... just difference is signing. It seems unreasonable to me to have to have a new qualifier, just to say you now have a signed version. And, seems kind of inefficient to say you just have to sign each and every build ... and, even if that was the policy, seems like mistakes could happen, and could not be "recovered from" unless everything given a new qualifier. So ... if no one else ever has this problem ... then maybe we'll just start signing each and every build :( If there was such a "prefer signed" option, then I'd think "true" should be the default (as it'd be rare not to want that?) ... but, guess it could be argued to maintain backward compatibility to leave "false" as the default.</description>
      <attachments/>
    </issue>
    <issue>
      <id>317827</id>
      <title>[console] Use the gogo with the Equinox framework</title>
      <description>Build Identifier: 3.7 This bug is for adapting the Equinox commands for use in the GoGo shell, or vice versa - using the GoGo functionality through the Equinox shell. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>317890</id>
      <title>[hudson][build] support auto discovery of Hudson servers</title>
      <description>Hudson instances listen on UDP port 33848. Whenever a UDP packet is received, it will respond with a short XML fragment that shows the connection information: http://wiki.hudson-ci.org/display/HUDSON/Remote+access+API It would be nice if the Mylyn connector supported auto discovery and configuration of Hudson servers.</description>
      <attachments/>
    </issue>
    <issue>
      <id>317892</id>
      <title>[registers] Use variable objects to access registers</title>
      <description>The current implementation of the IRegisters service has the following issues: - members of aggregate types can't be viewed separately and their values can't be modified - types of the registers are not displayed correctly Using the GDB/MI variable objects mechnism would solve these problems and provide a better way to access registers in general.</description>
      <attachments/>
    </issue>
    <issue>
      <id>317943</id>
      <title>[Gemini Blueprint] Use Gemini Blueprint instead of Spring DM</title>
      <description></description>
      <attachments/>
    </issue>
    <issue>
      <id>318681</id>
      <title>[quick assist] create fields from multiple parameters</title>
      <description>Build Identifier: There is already a function Source-&gt;Create constructor using fields. I would like just the opposite. When I program I call constructors that do not exists: MyClass m = new MyClass("first", "second", "third"); I then use the light bulb to create this new constructor. Inside the constructor I change the names of the parameters and begin the hard work I would like some help with: public MyClass(String firstValue, String secondValue, String thirdValue){ // These lines could be generated automatically // Prefix 'i' is already there under "Code Templates" iFirstValue = firstValue; iSecondValue = secondValue; iThirdValue = thirdValue; } // Also, the fields would have to be created: private String iFirstValue; private String iSecondValue; private String iThirdValue; Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>318682</id>
      <title>Enhancement request: Warning if no fields are used and the method is still not static</title>
      <description>Build Identifier: I would like an option under Compiler-&gt; Errors/Warnings that said "Methods that could be static" ot something. If a method is using no fields and no calls to non-static functions it could and should be set as a static method. Would like some hints on how to find these methods. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>318863</id>
      <title>Adopt R3.4 Attribute and Directive name syntax (Was: Deployer fails with split packages)</title>
      <description>Deploying bundles with split packages currently fails with the following exception. [2010-07-05 12:00:06.942] fs-watcher &lt;HD0002E&gt; Hot deploy failed for file 'split.provider_1.0.0.201007051158.jar'. org.eclipse.virgo.kernel.deployer.core.DeploymentException: Error parsing bundle manifest header [a.split.pkg;nasty.split=split] HP011E:[col 23]: Unconsumed data found at end of header '=split' at org.eclipse.virgo.kernel.install.artifact.internal.StandardInstallArtifactTreeInclosure.createInstallTree(StandardInstallArtifactTreeInclosure.java:129) at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.doInstall(PipelinedApplicationDeployer.java:140) at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.install(PipelinedApplicationDeployer.java:123) at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.deploy(PipelinedApplicationDeployer.java:187) at org.eclipse.virgo.kernel.deployer.hot.HotDeploymentFileSystemListener.deploy(HotDeploymentFileSystemListener.java:174) at org.eclipse.virgo.kernel.deployer.hot.HotDeploymentFileSystemListener.onChange(HotDeploymentFileSystemListener.java:78) at org.eclipse.virgo.util.io.FileSystemChecker.notifyListeners(FileSystemChecker.java:176) at org.eclipse.virgo.util.io.FileSystemChecker.check(FileSystemChecker.java:138) at org.eclipse.virgo.kernel.deployer.hot.WatchTask.run(WatchTask.java:58) at java.lang.Thread.run(Thread.java:619) Caused by: org.eclipse.virgo.util.osgi.manifest.parse.BundleManifestParseException: Error parsing bundle manifest header [a.split.pkg;nasty.split=split] HP011E:[col 23]: Unconsumed data found at end of header '=split' at org.eclipse.virgo.util.osgi.manifest.parse.standard.StandardHeaderParser.parsePackageHeader(StandardHeaderParser.java:112) at org.eclipse.virgo.util.osgi.manifest.internal.StandardExportPackage.parse(StandardExportPackage.java:39) at org.eclipse.virgo.util.osgi.manifest.internal.CompoundParseable.resetFromParseString(CompoundParseable.java:54) at org.eclipse.virgo.util.osgi.manifest.internal.StandardBundleManifest.initializeHeaders(StandardBundleManifest.java:118) at org.eclipse.virgo.util.osgi.manifest.internal.StandardBundleManifest.&lt;init&gt;(StandardBundleManifest.java:73) at org.eclipse.virgo.util.osgi.manifest.internal.StandardBundleManifest.&lt;init&gt;(StandardBundleManifest.java:95) at org.eclipse.virgo.util.osgi.manifest.internal.StandardBundleManifest.&lt;init&gt;(StandardBundleManifest.java:91) at org.eclipse.virgo.util.osgi.manifest.BundleManifestFactory.createBundleManifest(BundleManifestFactory.java:91) at org.eclipse.virgo.util.osgi.manifest.BundleManifestFactory.createBundleManifest(BundleManifestFactory.java:102) at org.eclipse.virgo.kernel.install.artifact.internal.bundle.BundleInstallArtifactFactory.retrieveArtifactFSManifest(BundleInstallArtifactFactory.java:91) at org.eclipse.virgo.kernel.install.artifact.internal.bundle.BundleInstallArtifactFactory.createBundleInstallArtifact(BundleInstallArtifactFactory.java:76) at org.eclipse.virgo.kernel.install.artifact.internal.bundle.BundleInstallArtifactTreeFactory.constructInstallArtifactTree(BundleInstallArtifactTreeFactory.java:66) at org.eclipse.virgo.kernel.install.artifact.internal.StandardInstallArtifactTreeInclosure.constructInstallArtifactTree(StandardInstallArtifactTreeInclosure.java:155) at org.eclipse.virgo.kernel.install.artifact.internal.StandardInstallArtifactTreeInclosure.createInstallTree(StandardInstallArtifactTreeInclosure.java:123) ... 9 common frames omitted Even though split packages [OSGi 4.2, §3.12.2] are not recommended, they are still used in some rare cases. RCP introduced several splits in the 3.3 workbench and thus Eclipse RAP has the same split packages.</description>
      <attachments/>
    </issue>
    <issue>
      <id>318920</id>
      <title>[Element Edit Service] SysML specific types</title>
      <description>When we use SysML, user needs to create directly a block in the model explorer for example</description>
      <attachments/>
    </issue>
    <issue>
      <id>318989</id>
      <title>Proposal for extension: Resolver for jruby</title>
      <description>Created attachment 173521 [details] initial extension plugin In a heap dump that has jruby executions will be thery nice if some additional informations is fetched, like ruby scripts that call java and what exactly java method is called within the jruby, since it is masked by JRuby objects. Here is simple initial plugin for these types of resolutions.</description>
      <attachments/>
    </issue>
    <issue>
      <id>318998</id>
      <title>[DB] Support queryXRefs()</title>
      <description>See bug 300149</description>
      <attachments/>
    </issue>
    <issue>
      <id>319018</id>
      <title>WYSIWYG HTML Widget Contribution</title>
      <description>We discussed at a Mylyn Meeting (http://wiki.eclipse.org/Mylyn_Meetings#March_11th.2C_10-11am_PT) the collaboration in creating a wysiwyg html editor. The already implemented editor in Eclipse Remus was not usable due to the licesnse of the underlying tinyMCE editor. In the progress of the initial checkin of the Remus Sources I've rewritten the Widget based on the CKeditor, which is licensed under an EPL-compatible license. This contribution is not completed with all functions, but is already usable. I also want to use this contribution as a base for further discussion about possible requirements. I've attached also an example-bundle with a single view to see the widget in action. Please take a look at the code and tell me if you are still interested in hosting this widget under the mylyn-commons.</description>
      <attachments/>
    </issue>
    <issue>
      <id>319196</id>
      <title>Quick fixes for creating a variable</title>
      <description>Build Identifier: This includes fixes for creating a local variable, a parameter or a field. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>319295</id>
      <title>review custom workflow repository settings UI</title>
      <description>Current UI is difficult for users to understand, need to provide some pointer to docs.</description>
      <attachments/>
    </issue>
    <issue>
      <id>319360</id>
      <title>"launch" command should support running more than one .launch in parallel</title>
      <description>For testing purposes it is sometimes required to spawn a host and a consumer in parallel. This should be supported by Bucky by e.g. taking a comma separated listed of .launch files as an argument the launch command.</description>
      <attachments/>
    </issue>
    <issue>
      <id>319487</id>
      <title>[Dawn] Provide web-based access to GMF Diagrams</title>
      <description>Dawn should provide web-based access to GMF diagram as shown in the screencast (in the end). http://www.mftech.org/dawn/screencasts/8_more_sophisticated_Diagrams/8_more_sophisticated_Diagrams.htm This certainly also means to extend the generator to provide an easy generation for the web-based extension.</description>
      <attachments/>
    </issue>
    <issue>
      <id>319652</id>
      <title>[releng] provide a Buckminster build of Mylyn</title>
      <description>Please "Buckminsterize" the Mylyn build.</description>
      <attachments/>
    </issue>
    <issue>
      <id>319889</id>
      <title>improve task visibility and sorting in the Scheduled presentation</title>
      <description>We still need to do some design work here, but the main areas where we need improvement are: * Removing or reducing the amount of duplication between containers * Ensuring all items related to a container are shown * Improving container assignment (eg, Unsubmitted tasks should only show in Outgoing) * Improving container sorting (eg, This Week container should show tasks overdue for others on top, Incoming should be sorted by date modified)</description>
      <attachments/>
    </issue>
    <issue>
      <id>319907</id>
      <title>[Help] Promote main help servlets to public API</title>
      <description>To allow customized Help front ends, the Eclipse Help System should have a set of servlets which publicly expose all of the back end functionality. This would include filtering, searching, indexing, navigation, runtime content, etc. As part of this effort, we need to maintain a system to recognize any public API servlets, so that consumers can easily understand that it is API.</description>
      <attachments/>
    </issue>
    <issue>
      <id>319948</id>
      <title>Move to git</title>
      <description>We would like to have the ECF project move to git as it offers a better ground for collaboration. Please create the /gitroot/ecf folder and I'll take it from there. Once the sync is done, I'll come back to you to ask you to get rid of the ECF CVS (unless it's possible to keep a r/o and synced CVS repo).</description>
      <attachments/>
    </issue>
    <issue>
      <id>319977</id>
      <title>wikitext-to-eclipse-help for Trac doesn't support images</title>
      <description>Using wikitext-to-eclipse-help ant task with markupLanguage="org.eclipse.mylyn.wikitext.tracwiki.core.TracWikiLanguage" doesn't handle [[Image(your_image_name]] properly. a href tag is created (not proper though) when img tag is supposed to be created.</description>
      <attachments/>
    </issue>
    <issue>
      <id>320130</id>
      <title>How to customized PHP Code Format like Java Code Formatter</title>
      <description>Build Identifier: 20100617-1415 I want to customized PHP code format like java code formatter. I have also facing problem with PHP code format. Code Before Format : &lt;?php if($checkCondition) echo 'Condition True'; else echo 'Condition False'; ?&gt; Code After Format : &lt;?php if($checkCondition) echo 'Condition True'; else echo 'Condition False'; ?&gt; How to retain original code format with indent in control structures ? Reproducible: Always Steps to Reproduce: 1. In Preferences -&gt; Java -&gt; Code Style -&gt; Formatter having add/edit code format option to customize coding style. 2. In Preferences -&gt; PHP -&gt; Code Style -&gt; Formatter no any option like java. 3.</description>
      <attachments/>
    </issue>
    <issue>
      <id>320193</id>
      <title>[Dawn] Provide a flexible testing environment for UI tests</title>
      <description>To guarantee the stability of Dawn and to be able to write bug related tests we need to provide a small testing environment for UI specific Dawn tests. There are some frameworks out there which could with support this (see http://wiki.eclipse.org/Automated_Testing). Though, first tests with SWTBot (http://www.eclipse.org/swtbot/) were quite promising I should also have a look at TPTP (http://www.eclipse.org/tptp/) and it's GUI Recorder (http://www.eclipse.org/tptp/test/documents/userguides/Intro-Auto-GUI.html).</description>
      <attachments/>
    </issue>
    <issue>
      <id>320416</id>
      <title>Improve usability of editors in Tigerstripe</title>
      <description>Build Identifier: Most of the Tigerstripe form editors have common usability issues that need to be addressed. These issues include (but are not limited to): - Lack of good use of the real estate in the editor. There is unnecessary white space - The general layouts needs to be improved - Some of the buttons and/or other widgets are not properly aligned - Some of the controls are "hidden". They should be rearranged to make them more visible - There are small scrollable regions displayed in the forms which should be resolved - Hor/Ver layout buttons should be removed - Some of the controls need to resized - Promote consistency throughout all the editors. Example: Some of the editors use Sections and some of them use Expandable Composites to display information The following is a list of usability defects that apply to Tigerstripe editors: Bug 319497 - A long description confuses the form layout for a project descriptor file Bug 320049 - Some of the form sections are collapsed by default when they should really be expanded Bug 320050 - Edit button for stereotypes that can't be edited should be disabled Bug 320053 - Layout of Stereotype page of Profile editor needs to be fixed Bug 320054 - Stereotype selection changes when Profile editor is saved Bug 320055 - Problems with naming valid values for a list attributes Bug 320056 - A long description for a primitive type causes a horizontal scroll bar Bug 320105 - Return value of stereotype is not displayed on form Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>320439</id>
      <title>Add support for rich hovers in editor (like JDT)</title>
      <description>Build Identifier: 1.0.0 The attached patch contains an initial implementation of a generic html based text hover for EObjects in Xtext (XtextHtmlHover). The text hover is a clone of JDT's javadoc hover. The hover content is made by an IHtmlHoverContentProvider, which returns the html content for a given model element. The hover supports linking to other model elements (see XtextElementLinks), navigating forward and backward and open declaration. All classes related to the html hover can be found in the org.eclipse.xtext.ui.editor.hover.html package. I've attached a couple of screen shots which show the hover in action in the domainmodel example. The hover content can be build in arbitrary ways. To mimic javadoc style one has to extract the content of multi line comments in front of model elements. The class MultiLineDocumentationProvider does exactly this task. Note: The comment has to start with /** to be recognized as a documentation comment (look at DomainmodelHoverContentProvider or DefaultHtmlHoverContentProvider). Issues: (1) Think about a reasonable default hover (see DefaultHtmlHoverContentProvider, or should the hover be turned off by default?) (2) Review AbstractXtextEditorHover.getXtextElementAt() method. I'm not sure that the implemenation is correct. (3) Add support for showing the icon of a model element (from the label provider). Not easy as the image itself can not be displayed (must be a link to a file embedded in html, JDT offers an implementation for converting ImageDescriptions to files). (4) Remove hard coded reference to "org.eclipse.jdt.ui.javadocfont" (5) Potential clean-up: Remove XtextTextHover, remove AbstractHover, derive ProblemHover from AbstractXtextEditorHover Possible Future Improvements: (6) Add an Xtextdoc view (like javadoc view) (7) Add the hover to completion proposals for cross references. (8) Enhance problem hover, show available quickfixes as JDT does. (9) Handle the case where no browser is available (fallback to styled text, convert html to styledtext, see JDT). (10) Add support for displaying arbitrary hovers for certain elements (e.g. display the original JDT hover for references to java classes (JDTTypes)). Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>320561</id>
      <title>Override markers in C++ editor</title>
      <description>The C++ editor lacks the markers on overridden methods. As there's no counterpart of @Override tag in C++, it's untrivial to spot overriding virtual methods in a class. On top of that, it's easy to mistake a shadowing method for an overriding method. The markers similar to JDT 'triangles' would be a big aid here. Should method shadowing (same name, but no 'virtual' in base / different parameters/ throws declaration / etc = no override) generate a warning message, btw?</description>
      <attachments/>
    </issue>
    <issue>
      <id>320927</id>
      <title>By default, .svn files should not be copied to bin folder</title>
      <description>Build Identifier: M20100211-1343 When projects are built, the contents of src are copied into bin. This is usually not a problem. However, if you are using SVN, then it is a huge problem. In SVN, each folder has a .svn folder embedded inside. That means that each of these .svn folders is copied to the bin folder. That means that when you use your svn, suddenly you notice that bin has all sorts of duplicate information. Which means you go to remove bin from the svn repository, and instead, due to the fact that the .svn files are copies, the src folder is deleted instead. See http://stackoverflow.com/questions/3336576/svn-how-does-removing-a-bin-folder-cause-the-src-folder-to-be-removed-instead/3336623#3336623 for more details The solution is to go into Preferences-&gt;Java-&gt;Compiler-&gt;Building and add "*.svn" as a filtered resource. Due to the aforementioned havoc it wreaks with source control, I request that that is a default option. I only use eclipse for Android development so I know it's an issue there; I don't know whether it affects standard java development but I would bet it does. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>320958</id>
      <title>[xpath2] Add proper API for xpath2</title>
      <description>The XPath2 API and standard implementation classes need a makeover. The primary concerns are the following: - Have a real API for types - Support proper "customizable" function libraries - Support proper/decoupled tifecycles for dynamic and static contexts - ResultSequence API kills performance - Separate into a builder and an read-only part - Provide a simple XPath facade which resembles the XPath1 API and makes simple "single use" scenarios easy. Finally, we'll want to provide other PSVI type providers than Xerces (notably WTP, possibly also Xalan). I already have a patch for that.</description>
      <attachments/>
    </issue>
    <issue>
      <id>320977</id>
      <title>Missing sources for log4j</title>
      <description>Rather than reopen bug 241042. Log4j has had new releases. Surely new releases should at least have sources? It is really inconvenient, not having a) a source attachment b) sources in CVS c) a link from readme to the Apache source CM</description>
      <attachments/>
    </issue>
    <issue>
      <id>321391</id>
      <title>[CA] for phpDoc tag @return should provide all PHP types</title>
      <description>Hi, CA after *@return* | should provide all PHP types as is described here: http://cz.php.net/manual/en/language.types.php Don't forget include type *void* too. Thank you</description>
      <attachments/>
    </issue>
    <issue>
      <id>321397</id>
      <title>Adding tests for kernel core class org.eclipse.virgo.kernel.core.BlockingSignal</title>
      <description>Build Identifier: A modest contribution to Virgo's tests classes Reproducible: Didn't try</description>
      <attachments/>
    </issue>
    <issue>
      <id>321410</id>
      <title>[EditorMgmt][navigation] Provide Mini-map of text in editor</title>
      <description>Build Identifier: 20100218-1602 This is a feature request for the implementation of a Minimap feature, as can be found in the "Sublime" text editor and in a few (non-Eclipse) IDE plugins. A good explanation, as well as a screenshot can be found here: http://blog.quplo.com/2010/05/5-innovations-in-text-editing-and-ides/ Copy-paste of the description, should the website go down: "The Sublime text editor puts a column to the left of your text editing environment which displays a Google Maps-like minimap. For editing huge code files, this is a great way to get an overview of the buildup of your code, especially if you need to jump quickly to your class properties, definitions, or just want to get a feel for the structure of your file. We found that the minimap works best when you’re trying to discipline yourself to keep your files small: large classes in C#, tons of style rules in CSS, and deeply nested HTML become really obvious when the minimap is right there staring at you the whole time." I think this would be a very powerful addition to Eclipse. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>321443</id>
      <title>Build Model Enhancements</title>
      <description>This bug tracks discussion on enhancements to CDT's build model to improve support for other managed build systems, such as CMake, Qt's qmake, autotools configure, and other vendor build systems. The hope is to provides something that everyone can plug into and take advantage of CDT's build system for things like scanner discovery, and other automations. I'll be attaching a document shortly describing what I want to do.</description>
      <attachments/>
    </issue>
    <issue>
      <id>321457</id>
      <title>introduce a standalone help feature</title>
      <description>Build Identifier: Helios final The title says it all basically. With a product based on the Eclipse RCP and Eclipse Help features, the help system will not start. Inspection of the logs reveals that this is due to the org.eclipse.ui.forms plugin missing. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>321701</id>
      <title>[api] Support common keyboard commands for textual navigation</title>
      <description>OS X, GNU Readline, Emacs, and many other applications/platforms support a basic set of useful keyboard navigation meta-sequences, such as: * CTRL-E - go to end of line * CTRL-A - go to beginning of line * CTRL-F - go forward one character * CTRL-B - go backward one character * CTRL-H - delete backward from cursor one character * CTRL-W - delete backward from cursor one word * CTRL-U - delete backward from cursor to beginning of line * CTRL-K - delete forward from cursor to end of line * Up-arrow - go to beginning of line if first line of text * Down-arrow - go to end of line if last line of text .. and so on. Mylyn's wikitext task editor does not support these sequences/shortcuts and it results in a significantly worse experience than the JIRA web application offers. The web application does not actually do anything special, it simply allows the OS X support for these sequences to pass through when typing in a textfield. It's understood that some of these commands will have collisions with existing keyboard shortcuts (e.g.: CTRL-H) I would set this up myself as a custom configuration in Preferences-&gt;Keys, but many of the movements/commands mentioned above are not even listed there. Please consider providing such support, thanks.</description>
      <attachments/>
    </issue>
    <issue>
      <id>321775</id>
      <title>Add support for HTML-Like labels (DOT editor and Graph viewer)</title>
      <description>First I would like to thank you for the nice product that you are developing here. I'm in the process of testing ZEST and assessing its capabilities to see if it has all the features we need and if it will incorporate in our product correctly. Hopefully dot2zest is out there and makes zest a good candidate. The only missing piece right now, is the ability to specify HTML labels in the dot language as we have some graphs that needs this to render correctly. I would like to know if there's any plan to integrate those ? If not can you please give some hints on the efforts needed to do such integration. Thanks</description>
      <attachments/>
    </issue>
    <issue>
      <id>321795</id>
      <title>signing process isn't signing due to "no response from the Timestamping Authority"</title>
      <description>I noticed many messages in signing logs as pasted below. And, I have confirmed in fact our build was not signed. This is bad. Because ... if we'd "delivered" this build in its unsigned state, then technically speaking we'd have to retag everything so the future signed version (once fixed) would "replace" the jars that are unsigned. So ... we're stuck and can't deliver a build until signing is fixed. Seems to me the whole process should fail if this happens, with some error message sent ... but I think there's already a bug on that somewhere. /opt/public/download-staging.priv/webtools/wtp-P-P20100804181547-20100804181547.zip/temp_wtp-P-P20100804181547-20100804181547.zip/org.eclipse.wst.common_ui.feature.patch_3.0.5.v200910060730-10_87w311_21171841.jar updating: META-INF/MANIFEST.MF jarsigner: unable to sign jar: no response from the Timestamping Authority. When connecting from behind a firewall then an HTTP proxy may need to be specified. Supply the following options to jarsigner: -J-Dhttp.proxyHost=&lt;hostname&gt; -J-Dhttp.proxyPort=&lt;portnumber&gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>322088</id>
      <title>Adding tests for kernel core class org.eclipse.virgo.kernel.config.internal.ConfigurationAdminDumpContributor</title>
      <description>Build Identifier: A small contribution to test classes Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>322327</id>
      <title>Java Model and Kdm Inventory Model discovery</title>
      <description>Here is an entry for a planned new MoDisco technology layer component. MoDisco should propose a metamodel and associated discoverer for a composition of Java metamodel and KDM inventory metamodel (disk file representation). Such a composition will enable a future feature for browsing source code from MoDiscoBrowser. Such a contribution should rely on framework released in bug 322135. Fabien.</description>
      <attachments/>
    </issue>
    <issue>
      <id>322494</id>
      <title>[clean up] Add a 'Sort modifiers' clean up</title>
      <description>Build Identifier: 20100617-1415 This warning would report misorted modifiers on classes, fields and methods. This is explained is JLS 3rd Edition (last lines): http://java.sun.com/docs/books/jls/third_edition/html/classes.html#8.1.1 http://java.sun.com/docs/books/jls/third_edition/html/classes.html#8.3.1 http://java.sun.com/docs/books/jls/third_edition/html/classes.html#8.4.3 A quick fix could be suggested to resolve the reported warnings. Reproducible: Always Steps to Reproduce: 1. Here is a sample code snippet for a field declaration: [bad] abstract public class A {...} [good] public abstract class A {...} 2. Here is a sample code snippet for a field declaration: [bad] final static private int a = 0; [good] private static final int a = 0; 3. Here is a sample code snippet for a method declaration: [bad] static public synchronized void doA() {...} [good] synchronized public static void doA() {...} Even though I'm a Eclipse user, I still use IntelliJ Inspection Gadgets to get this warning report and quick fixes. I'll try to dig into JDT to provide a base AST manipulation, I've been given this good starting point by the JDT team: http://www.eclipse.org/articles/article.php?file=Article-JavaCodeManipulation_AST/index.html With that done, we could extend the align fields feature with an align modifiers and fields one: private static final int a = 3; String bbb = "Eclipse rocks!"; protected final C cc = null; protected static final D d = new D(); What do you think? Chris</description>
      <attachments/>
    </issue>
    <issue>
      <id>322534</id>
      <title>jetty client cannot work with NTLM authentication</title>
      <description>Build Identifier: 2204 It is truth that jetty-client doesn't support NTLM authentication. There is only one NTLM bug report which is on https://bugs.eclipse.org/bugs/show_bug.cgi?id=289669 So I've to do it myself. However, to my disappointed, jetty-client seems to has no ability to work with NTLM authentication. I've researched for a long time. My conclusion is jetty HttpDestination use different HttpConnection to resend with a pool. So IIS web server doesn't verify the challenge of the type3message which is sent by client. Here are my source codes: BasicTest.java // ======================================================================== // This is the test main program. // ======================================================================== import org.eclipse.jetty.client.ContentExchange; import org.eclipse.jetty.client.HttpClient; import org.eclipse.jetty.client.security.Realm; import org.eclipse.jetty.client.security.RealmResolver; import org.eclipse.jetty.client.security.SimpleRealmResolver; public class BasicTest { public static void main(String[] args) throws Exception { HttpClient _client = new HttpClient(); _client.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL); RealmResolver resolver = new SimpleRealmResolver(new Realm() { public String getId() { return "realm"; } public String getPrincipal() { return "test"; } public String getCredentials() { return "password"; } }); _client.setRealmResolver(resolver); _client.start(); ContentExchange exchange = new ContentExchange(); // if send type2message directly, it may work fine mostly. //exchange.setRequestHeader("Authorization", "NTLM TlRMTVNTUAABAAAAATIAAA0ADQAgAAAADAAMAC0AAABXSU4ySzMtU0VSVkVSSkNJRlMwXzE4XzMx"); exchange.setURL("http://192.168.10.156/ntlm/index.asp"); exchange.setMethod("GET"); exchange.setVersion(11); _client.send(exchange); exchange.waitForDone(); System.out.println(exchange.getResponseStatus()); // all be 401 System.out.println(new String(exchange.getResponseContentBytes())); } } org/eclipse/jetty/client/security/SecurityListener.java // ======================================================================== // Copyright (c) 2008-2009 Mort Bay Consulting Pty. Ltd. // ------------------------------------------------------------------------ // All rights reserved. This program and the accompanying materials // are made available under the terms of the Eclipse Public License v1.0 // and Apache License v2.0 which accompanies this distribution. // The Eclipse Public License is available at // http://www.eclipse.org/legal/epl-v10.html // The Apache License v2.0 is available at // http://www.opensource.org/licenses/apache2.0.php // You may elect to redistribute this code under either of these licenses. // ======================================================================== package org.eclipse.jetty.client.security; import java.io.IOException; import java.util.HashMap; import java.util.Map; import java.util.StringTokenizer; import org.eclipse.jetty.client.HttpDestination; import org.eclipse.jetty.client.HttpEventListenerWrapper; import org.eclipse.jetty.client.HttpExchange; import org.eclipse.jetty.http.HttpHeaders; import org.eclipse.jetty.http.HttpStatus; import org.eclipse.jetty.io.Buffer; import org.eclipse.jetty.util.StringUtil; import org.eclipse.jetty.util.log.Log; /** * SecurityListener * * Allow for insertion of security dialog when performing an * HttpExchange. */ public class SecurityListener extends HttpEventListenerWrapper { private HttpDestination _destination; private HttpExchange _exchange; private boolean _requestComplete; private boolean _responseComplete; private boolean _needIntercept; private int _attempts = 0; // TODO remember to settle on winning solution public SecurityListener(HttpDestination destination, HttpExchange ex) { // Start of sending events through to the wrapped listener // Next decision point is the onResponseStatus super(ex.getEventListener(),true); _destination=destination; _exchange=ex; } /** * scrapes an authentication type from the authString * * @param authString * @return the authentication type */ protected String scrapeAuthenticationType( String authString ) { String authType; if ( authString.indexOf( " " ) == -1 ) { authType = authString.toString().trim(); } else { String authResponse = authString.toString(); authType = authResponse.substring( 0, authResponse.indexOf( " " ) ).trim(); } return authType; } /** * scrapes a set of authentication details from the authString * * @param authString * @return the authentication details */ protected Map&lt;String, String&gt; scrapeAuthenticationDetails( String authString ) { Map&lt;String, String&gt; authenticationDetails = new HashMap&lt;String, String&gt;(); authString = authString.substring( authString.indexOf( " " ) + 1, authString.length() ); StringTokenizer strtok = new StringTokenizer( authString, ","); while ( strtok.hasMoreTokens() ) { String token = strtok.nextToken(); String[] pair = token.split( "=" ); // authentication details ought to come in two parts, if not then just skip if ( pair.length == 2 ) { String itemName = pair[0].trim(); String itemValue = pair[1].trim(); itemValue = StringUtil.unquote( itemValue ); authenticationDetails.put( itemName, itemValue ); } else { Log.debug("SecurityListener: missed scraping authentication details - " + token ); } } return authenticationDetails; } @Override public void onResponseStatus( Buffer version, int status, Buffer reason ) throws IOException { if (Log.isDebugEnabled()) Log.debug("SecurityListener:Response Status: " + status ); if ( status == HttpStatus.UNAUTHORIZED_401 &amp;&amp; _attempts&lt;_destination.getHttpClient().maxRetries()) { // Let's absorb events until we have done some retries setDelegatingResponses(false); _needIntercept = true; } else { setDelegatingResponses(true); setDelegatingRequests(true); _needIntercept = false; } super.onResponseStatus(version,status,reason); } @Override public void onResponseHeader( Buffer name, Buffer value ) throws IOException { if (Log.isDebugEnabled()) Log.debug( "SecurityListener:Header: " + name.toString() + " / " + value.toString() ); if (!isDelegatingResponses()) { int header = HttpHeaders.CACHE.getOrdinal(name); switch (header) { case HttpHeaders.WWW_AUTHENTICATE_ORDINAL: // TODO don't hard code this bit. String authString = value.toString(); String type = scrapeAuthenticationType( authString ); String type2Message = null; if("ntlm".equalsIgnoreCase(type)) { if ( authString.indexOf( " " ) != -1 ) { // if header is "WWW-Authenticate=NTLM TlRMTVNTUAACAAA...... // type2Message is not null type2Message = authString.substring(authString.indexOf( " " ), authString.length()).trim(); } } // TODO maybe avoid this map creation Map&lt;String,String&gt; details = scrapeAuthenticationDetails( authString ); String pathSpec="/"; // TODO work out the real path spec RealmResolver realmResolver = _destination.getHttpClient().getRealmResolver(); if ( realmResolver == null ) { break; } Realm realm = realmResolver.getRealm( details.get("realm"), _destination, pathSpec ); // TODO work our realm correctly if ( realm == null ) { Log.warn( "Unknown Security Realm: " + details.get("realm") ); } else if ("digest".equalsIgnoreCase(type)) { _destination.addAuthorization("/",new DigestAuthentication(realm,details)); } else if ("basic".equalsIgnoreCase(type)) { _destination.addAuthorization(pathSpec,new BasicAuthentication(realm)); } else if ("ntlm".equalsIgnoreCase(type)) { _destination.addAuthorization("/",new NTLMAuthentication(realm, type2Message)); } break; } } super.onResponseHeader(name,value); } @Override public void onRequestComplete() throws IOException { _requestComplete = true; if (_needIntercept) { if (_requestComplete &amp;&amp; _responseComplete) { if (Log.isDebugEnabled()) Log.debug("onRequestComplete, Both complete: Resending from onResponseComplete "+_exchange); _responseComplete = false; _requestComplete = false; setDelegatingRequests(true); setDelegatingResponses(true); _destination.resend(_exchange); } else { if (Log.isDebugEnabled()) Log.debug("onRequestComplete, Response not yet complete onRequestComplete, calling super for "+_exchange); super.onRequestComplete(); } } else { if (Log.isDebugEnabled()) Log.debug("onRequestComplete, delegating to super with Request complete="+_requestComplete+", response complete="+_responseComplete+" "+_exchange); super.onRequestComplete(); } } @Override public void onResponseComplete() throws IOException { _responseComplete = true; if (_needIntercept) { if (_requestComplete &amp;&amp; _responseComplete) { if (Log.isDebugEnabled()) Log.debug("onResponseComplete, Both complete: Resending from onResponseComplete"+_exchange); _responseComplete = false; _requestComplete = false; setDelegatingResponses(true); setDelegatingRequests(true); _destination.resend(_exchange); } else { if (Log.isDebugEnabled()) Log.debug("onResponseComplete, Request not yet complete from onResponseComplete, calling super "+_exchange); super.onResponseComplete(); } } else { if (Log.isDebugEnabled()) Log.debug("OnResponseComplete, delegating to super with Request complete="+_requestComplete+", response complete="+_responseComplete+" "+_exchange); super.onResponseComplete(); } } @Override public void onRetry() { _attempts++; setDelegatingRequests(true); setDelegatingResponses(true); _requestComplete=false; _responseComplete=false; _needIntercept=false; super.onRetry(); } } org/eclipse/jetty/client/security/NTLMAuthentication.java // ======================================================================== // Author: Lion Shooray // shooray@gmail.com // ======================================================================== package org.eclipse.jetty.client.security; import java.io.IOException; import jcifs.ntlmssp.Type1Message; import jcifs.ntlmssp.Type2Message; import jcifs.ntlmssp.Type3Message; import org.eclipse.jetty.client.HttpExchange; import org.eclipse.jetty.http.HttpHeaders; import org.eclipse.jetty.http.security.B64Code; import org.eclipse.jetty.io.Buffer; import org.eclipse.jetty.io.ByteArrayBuffer; import org.eclipse.jetty.util.log.Log; public class NTLMAuthentication implements Authentication { private Buffer _authorization; public NTLMAuthentication(Realm realm, String strType2Message) throws IOException { String domain = "WIN2K3-SERVER"; String authenticationString = null; if(strType2Message == null) { //type1 authenticationString = "NTLM " + new String(B64Code.encode( buildType1Message(Type1Message.getDefaultFlags(),domain, null))); } else {//type2 -&gt; type3 byte[] byte2Msg = B64Code.decode(strType2Message); Type2Message type2Message = new Type2Message(byte2Msg); byte[] byte3Msg = buildType3Message(type2Message, realm.getCredentials(), domain, realm.getPrincipal(), null, Type3Message.getDefaultFlags()); authenticationString = "NTLM " + new String(B64Code.encode(byte3Msg)); } if (Log.isDebugEnabled()) Log.debug("NTLMAuthentication(" + (strType2Message == null?"type1":"type3") + "): " + authenticationString ); _authorization= new ByteArrayBuffer(authenticationString); } public void setCredentials(HttpExchange exchange) throws IOException { exchange.setRequestHeader( HttpHeaders.AUTHORIZATION_BUFFER, _authorization); } protected byte[] buildType1Message(int flag, String domain, String workstation) { Type1Message type1 = new Type1Message(flag, domain, workstation); return type1.toByteArray(); } protected byte[] buildType3Message(Type2Message type2, String password, String domain, String user, String workstation, int flags) { Type3Message type3 = new Type3Message(type2, password, domain, user, workstation, flags); return type3.toByteArray(); } } Reproducible: Always Steps to Reproduce: 1. replace SecurityListener.java with my edition org/eclipse/jetty/client/security/SecurityListener.java 2. add new java file: org/eclipse/jetty/client/security/NTLMAuthentication.java 3. add jcifs-1.3.14.jar to classpath, you can get it from http://jcifs.samba.org/src/ 4. run BaseTest.java to test</description>
      <attachments/>
    </issue>
    <issue>
      <id>322585</id>
      <title>JPA2: Refactor Metamodel usage via EMF before the first EM deploy that would result in an uninitialized metamodel</title>
      <description>&gt;Issue: if an emf.getMetamodel() call is done before at least 1 EM deploy - the metamodel is invalid - why? the predeploy does not initialize entity descriptor - we need to fully deploy at least 1 entityManager first. We will refactor Metamodel usage via EMF before the first EM deploy that would result in an uninitialized metamodel. &gt;This bug will fix several issues where uninitialized descriptors would cause issues between a predeploy and deploy including bug # 297748, bug # 297928, bug # 303063, bug # 322166, bug # 322184 Customer bug # 315041 (duplicated to bug # 303063) &gt;the following is via the EM not the EMF in Spring (so may not be related) http://jira.springframework.org/browse/SPR-6826</description>
      <attachments/>
    </issue>
    <issue>
      <id>322680</id>
      <title>skip redundant parameters when creating new bugs</title>
      <description>Problem: Some Bugzilla installations may not have custom field information available in their config.cgi. This is problematic, because on task creation Mylyn attempts to send every available custom field as a parameter with a blank value. Bugzilla treats these blank parameters as invalid options, and task creation fails. Possible fix: AFAICT there are no issues if Mylyn ignores blank parameters (i.e. does not pass them into the method). Side note: I did a quick check, and even if the blank string is set as a valid option for a custom field (via direct SQL insert into the database, the web interface will not allow this) Bugzilla will treat it as invalid.</description>
      <attachments/>
    </issue>
    <issue>
      <id>322716</id>
      <title>[website] automatically update bug count on contributors page</title>
      <description>I ctrate a patch with the following changes: 1) email address changed from dgreen99@gmail.com to David.Green@tasktop.com 2) company icon changed from independent.gif to tasktop.png 3) company name change from independent to Tasktop Should we do an update of the bug counts?</description>
      <attachments/>
    </issue>
    <issue>
      <id>322721</id>
      <title>Contribution of Search Console</title>
      <description>Created attachment 176614 [details] Search console source code Hi, As disscussed with Boris Bokowski and Karsten Schmidt (in CC) at the end of April, we (SAP) would like to contribute a compoment called "Search Console". The search console is a highly extensible framework which allows easy and unified integration of searching and consuming artifacts within Eclipse environment. The extensisiblity is implemented via several extension points. The search console provides two Eclipse views - the very "Search Console" view and "Search Favorites" view grouped under the "Saerch Console" views category. The search console view is the component which performs the very search. Contributors may - define their own artifact types - specify their own destintaions to perform the search in - contribute a custom search parameters user interface - should conitrbute a designated interface implementation which performs the search The view also provides a section to display the search result. The "native" results user interface would show the search result as a tree. Contributors may - specify their own label/content/tooltip providers - install custom actions in the context menu or on a designated toobar The results UI implements properties view connectivity thus allowing contribution of custom property view tabs via the standard eclipse properties extension points. Drag from the results UI is also supported. Contributors are also able to embed their own search results user interface in the search console view in case the native one does not suite their needs. If they do so, they should however implement the complete integration with the Eclipse environment (context menues, properties, drag-and-drop, etc) on their own. Both search parameters and search results components are embedded in a single view. Thus the user is capable of seeing both query parameters and result at the same time. If the result does not satisfy the user, the search parameters can be edited and the search can be executed again. The search favorites view implements the concept of bookmarking "favorite" search results. The favorite items are persisted and remain bookmarked after Eclipse restart. In order to get their search result items in the favorites view contributors - could specify their own label/content/tooltip providers - could install custom actions in the context menu or on a designated toobar - should contribute implementations of designated interfaces which persist and load favorites items Drag-and-drop from the native search result UI to the search favorites view is natively supported by the framework I am aware that I should provide more technical details on the extension points and the architecture of the framework. I don't have such details in hand but will start woking on such documentation soon. The extension point schemas and the very source code contain pretty much javadoc but I think that that it is not sufficient for a contributor to understand what to do in order to plug into the console. The archived source code proposed is attached. In the "plugins" directory of the archive you may find the "productive" plugins and in "tests" you may find the automated tests plugins. The naming convention of the plugins follows the "org.eclipse.platform.discovery.*" pattern. Each plugin has its test counterpart. The automated tests provide more than 75% overall code coverage. Each test plugin has a "AllTestsSuite" class which is the suite for executing all the tests contained in the plugin. The "productive" plugins depend on Eclipse functionality only and do not deal with any cryptography. The test plugins depend also on JMock 1.x (http://jmock.org/) for unit tests and Abbot (http://abbot.sourceforge.net) for UI tests. JMock has been approved during JAX-WS DOM tools contribution (https://bugs.eclipse.org/bugs/show_bug.cgi?id=283846) and is already a part of the WTP/webservices project as "org.jmock". In order to avoid code duplications it should be probably moved to another place in order search console tests to reference it. As far as I know Abbot has not been discussed till now. Abbot eclipse plugins (abbotswt) can be downloaded from http://sourceforge.net/projects/abbot/files/abbot.swt/0.1.0.20080305_1254/abbot.swt-0.1.0.20080305_1254.zip/download There is a kind of an issue with the Abbot tests. In order the tests to run successfully it should be provided that the test workbench window is on top of all other windows. This is usually the case for newly opened windows but it is not 100% guaranteed. Implementation for MS Windows which can assert that is provided (check the commented code in org.eclipse.platform.discovery.testutils.utils.abbot.util.PDEUtil). Unfortunately this implementation uses specific Win32 APIs and is not portable to other platforms. That is why this coding is commented. It would be great if someone has an idea how to achieve this via platform independent code. The feature proposed is completely developed by SAP and SAP has given the agreement for contribution under the EPL licence. Here are the SAP employees who contributed to the code: - Hristo Sabev - Danail Branekov - Mladen Tomov - Martina Galabova - Iliyan Dimov - Dimitar Georgiev - Richard Birenheide - Joerg Dehmel Let me know in case you have further questions. Best regards, Danail</description>
      <attachments/>
    </issue>
    <issue>
      <id>322817</id>
      <title>Compiler option to ignore unavoidable type safety problems due to raw APIs</title>
      <description>I20100810-0800 While generifying the JDT plug-ins, I found some places where I couldn't get rid of warnings because the used API was still on 1.4 (e.g. in TestRunnerViewPart in org.eclipse.jdt.junit). I would like to have a new compiler option to ignore unavoidable type safety problems due to raw APIs. These warnings are not interesting until the API is generified, but they should not be completely suppressed, since they are only applicable as long as the used API stays raw. @SuppressWarnings(..) should only be used to hide "real" problems. The new option should modify the existing two options that generate problems for raw types and unchecked operations (e.g. COMPILER_PB_UNAVOIDABLE_GENERIC_TYPE_PROBLEMS, enabled by default). Below is an example that shows various kinds of type safety problems that should be ignorable. Note that I don't make a difference on whether 'Top' is declared in a 1.4 or in a 1.5 project (although the former will be the common use case). package problems; import java.util.List; class Top { public void set(List arg) { } // OK to warn in 1.5 code public List get() { return null; } // OK to warn in 1.5 code } class Sub extends Top { @Override public void set(List arg) { // should not warn (overrides) super.set(arg); arg.set(0, "A"); // should not warn ('arg' is forced raw) } @Override public List get() { // should not warn (overrides) return super.get(); } } public class GenericWarnings { void run() { new Top().get().add("arg"); // should not warn (uses raw API) List raw= new Top().get(); // OK to warn ('raw' declared here) raw.add("arg"); // OK to warn ('raw' declared here) // When Top#get() is generified, both of the following will fail // with a compile error if type arguments don't match: List&lt;String&gt; unchecked= new Top().get(); // should not warn (forced) unchecked.add("x"); // Should not warn about unchecked cast, but should warn about // unnecessary cast: List&lt;String&gt; cast= (List&lt;String&gt;) new Top().get(); cast.add("x"); } }</description>
      <attachments/>
    </issue>
    <issue>
      <id>323050</id>
      <title>Improved GWT Support.</title>
      <description>We need improvements to both the generator and the runtime itself.</description>
      <attachments/>
    </issue>
    <issue>
      <id>323223</id>
      <title>[evaluator] OCL change impact analysis, e.g., for incremental re-validation, should be provided</title>
      <description>Build Identifier: 20100617-1415 OCL expressions can navigate across EMF resource boundaries. This means that after modifications to one resource it is usually not sufficient to re-evaluate the OCL expressions on the context elements on the resource modified. Instead, expression values for context elements in other resources may as well be affected. Without an impact analysis, generally it would be necessary to re-validate all OCL constraints on all elements from all EMF resources from where it is possible to navigate to the resource modified. This doesn't scale. It is, however, possible to trace back the changes indicated by a Notification to those elements on which a subset of a set of OCL expressions given is affected. Also, only Notifications need to be considered that may at all affect the value of a given OCL expression. This can build upon a scalable event manager such as that proposed in https://bugs.eclipse.org/bugs/show_bug.cgi?id=323187. We propose an OCL impact analysis component which solves this problem for various cases. In addition to the event manager, it depends on the "hiddenopposites" patch proposed in https://bugs.eclipse.org/bugs/show_bug.cgi?id=251621. An implementation proposal is attached. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>323259</id>
      <title>Show "Star Rating" in MPC wizard when searching</title>
      <description>Build ID: MPC 1.0 (Helios) As a user of MPC searching a solution, I would like to see the "star rating" for any solution like on the MPC web interface (#votes, rating, reviews).</description>
      <attachments/>
    </issue>
    <issue>
      <id>323707</id>
      <title>[server] Improve ServletBridge to declare BridgetServlet as HTTP Filter + using directly bundles (ex : sample.http) from workspace</title>
      <description>Hi Equinox Team, I'm improving ServletBridge to : 1. declare the BridgetServlet in the web.xml as an HTTP Filter. So no I can declare BridgetServlet in web.xml like this : --------------------------------------------------------- &lt;filter id="bridge" &gt; &lt;filter-name&gt;equinoxbridgeservlet&lt;/filter-name&gt; &lt;filter-class&gt; org.eclipse.equinox.servletbridge.BridgeFilter &lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;equinoxbridgeservlet&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; --------------------------------------------------------- The benefit with filter declaration is that you can delegate to the FilterChain when NO ServletRegistration are founded for a path. So I can do that : ---------------------------------- if (chain != null) { // Delegate the HTTP request to the Web server container. chain.doFilter(req, resp); } ---------------------------------- instead doing that : ---------------------------------- // Send HTTP 404 Error. resp.sendError(HttpServletResponse.SC_NOT_FOUND, "ProxyServlet: " + req.getRequestURI()); //$NON-NLS-1$ ---------------------------------- So with Filter feature you can add some HTML, JSP, Servlet into the Bridget Web Application and it will work. By using BridgetServlet declaration you can NOT add your own resources (if you use /* pattern). With Filter declaration, 404 error is managed by the WEB server container. 2. Today, It's impossible to use directly bundles (ex : sample.http) from the workspace. You must create the bundle JAR and copy/paste to plugins folder (or use the ANT /scripts/webAppBuilder.xml"). I think it's not very easy. So I have improved FrameworkLauncher to give the capabilty to use bundles from the Eclipse workspace. To do that I'm using "-dev" options command of the org.eclipse.core.runtime.adaptor.EclipseStarter where you can set a dev.properties file (this is used with OSGi launch). So you can create a file "dev.properties" like this : ---------------------------------- sample.http=bin ---------------------------------- and use reference of your bundle in the "config.ini" like this : ---------------------------------- osgi.bundles=org.eclipse.equinox.common@2:start,... reference\:file\:WORKSPACE_PATH/sample.http@start ---------------------------------- where WORKSPACE_PATH is your workspace path. After no need to copy/paste your sample.http.jar in the plugins folder. You can use directly the sample.http project from your workspace. If you are interested with my work, tell me and I will send you patches. I had to modified : * org.eclipse.equinox.http.servlet * org.eclipse.equinox.http.servletbridge * org.eclipse.equinox.servletbridge Regards Angelo</description>
      <attachments/>
    </issue>
    <issue>
      <id>323792</id>
      <title>Provide CDO-based TransactionalEditingDomain</title>
      <description>The TransactionalEditingDomain (certainly) comes with transactional handling for changes of the model. CDO also comes with a transactional API. On GMF-based Dawn editors, where both worlds are combined, this often leads to problems. In this case I think having two transaction mechanisms is at least unnecessary. Having a CDO-based TED would be a much better solution. So we should provide a *CDOTransactionalEditingDomain* which implements the TransactionalEditingDomain interface with CDO related technologies.</description>
      <attachments/>
    </issue>
    <issue>
      <id>323802</id>
      <title>[General] Papyrus shall provide a read only mode</title>
      <description>Papyrus shall enable to configure a model in read-only mode in order to be able exchange model between users only for reading purpose.</description>
      <attachments/>
    </issue>
    <issue>
      <id>324215</id>
      <title>[remoteserviceadmin][remoteservices] implement remote services admin spec</title>
      <description>In OSGi 4.2 enterprise spec chapter 122 is the remote services admin specification. As of version 3.3, ECF fully implements the remote services spec (chapter 13 in compendium), but ECF does not yet implement the remote services admin spec. This enhancement would be to implement the remote services admin spec upon the ECF discovery API, ECF remote services API, and the ECF OSGi remote services implementation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>324310</id>
      <title>Allow API baseline to be specified via a target definition</title>
      <description>I have my target platform set up as a target definition that references a p2 repository. Similarly, I have a target definition that references a p2 repository for the previous version/release of the target platform. It would be nice to be able to set up my baseline by pointing to a target definition (currently the user is limited to point to an install location only). Better yet, it would be nice to be able to optionally associate an API baseline (target definition) with each target definition. That way, whenever the user switches targets, the API is also kept in synch.</description>
      <attachments/>
    </issue>
    <issue>
      <id>324327</id>
      <title>Define a common model for reviews</title>
      <description>Created attachment 178059 [details] Initial model from Alvaro and the R4E team</description>
      <attachments/>
    </issue>
    <issue>
      <id>324445</id>
      <title>Provide Virgo support</title>
      <description>We should make sure that RAP 1.4 can be deployed on Virgo.</description>
      <attachments/>
    </issue>
    <issue>
      <id>324701</id>
      <title>Support Systems Dynamics style models.</title>
      <description>This is an "epic-lite" feature to support Systems Dynamics style models in a seamless well integrated way. Le't discuss the overall effort here and then break out bite sized chunks of functionality as appropriate. In general, we'll need: a) Some kind of meta-model AMF support. b) Basic editor support for existing EMF tree style editor. c) Basic Runtime support that from which we can replicate any arbitrary Systems Dynamics style model. then, either as a follow-on feature, or as part of this main effort, we'll want: d) A classic Systems Dynamics style editor, just as IMS-FHS has created for Global Simulate. e) Support for faster runtime execution as has always been envisioned for the MetaABM / AMF project by inferring what can be calculated in O(1) vs. O(t). This project will be the first contribution of the IMS-FHS team based in part on their SD efforts. All interested parties are encouraged to provide comments on functionality and implementation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>325006</id>
      <title>handle links when transforming file based wikitext to eclipse help</title>
      <description>When wikitext is transformed to eclipse help using the standalone ant task, wiki links are translated to references to the link name without appending ".html". A an example - the input: See [details] for more information. Is transformed to: See &lt;a href="&lt;&lt;HELPROOT&gt;&gt;/details"&gt;details&lt;/a&gt; Minimal support for wiki links, just needs to output: See &lt;a href="&lt;&lt;HELPROOT&gt;&gt;/details"&gt;details&lt;/a&gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>325076</id>
      <title>Add swtbot support for Nebula Gallery</title>
      <description>Build Identifier: Add swtbot support for Nebula Gallery Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>325079</id>
      <title>[build] Implement mechanism for service messages similar to the Task List</title>
      <description>The TasksView has a nice GUI for displaying service messages. There is also some fairly generic code for handling such messages. The BuildsView should have a similar mechanism for displaying service messages.</description>
      <attachments/>
    </issue>
    <issue>
      <id>325131</id>
      <title>ASTRewrite should offer get/setProperty() like ASTNode</title>
      <description>HEAD ASTRewrite should offer get/setProperty() methods like ASTNode. E.g. for bug 319069, I need to modify our VariableDeclarationRewrite#rewriteModifiers(..) to store additional information about nodes that have already been touched by a rewrite. Storing this information externally and rippling it through all APIs where the ASTRewrite is currently passed through is a pain.</description>
      <attachments/>
    </issue>
    <issue>
      <id>325179</id>
      <title>javax.xml.bind bundle fails to instantiate JAXB implementation</title>
      <description>If the javax.xml.bind bundle is used with com.sun.xml.bind on Java 5 which does not ship with a JAXB binding (only Java 6 does) a ClassNotFoundException exception occurs when a JAXBContext.newInstance() is invoked (see bug 325176). I believe javax.xml.bind needs to specify a dependency or buddy policy in order to be able to load classes from com.sun.xml.bind.</description>
      <attachments/>
    </issue>
    <issue>
      <id>325328</id>
      <title>investigate replacement of extension point by OSGi services</title>
      <description>Build Identifier: N20100727-2000 Currently p2 extensibility is implemented on top of extension points (Eclipse standard extension mechanism). Even p2 is a self-contained functionality, it's almost impossible to use it outside Eclipse IDE due to the extension points usage. To keep such a powerful feature as extensibility, p2 could be implemented on top of OSGi standard extension mechanism - for example using publish/bind model of OSGi services. Such refactoring would make p2 consumable not only by Eclipse IDE, but also by any other party who is looking for a reliable provisioning. To keep the backwards compatibility, a new bundle could be introduced to "translate" custom-defined extension points (only p2 related) into OSGi services. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>325489</id>
      <title>Add platform support for Build Configurations for builders which support multiple project configurations</title>
      <description>Source in a C/C++ project is very frequently built in different ways to produce multiple artifacts within in one project / build tree. In one mode a library may be built, in another an executable testing that library. In CDT we model these variants as "build configurations". A configuration is associated with a tool chain, a collection of source, and an artifact of a given type. We allow references between these configurations. Currently its very difficult to inter-operate with the platform, as: 1) The platform assumes projects are only built in one way =&gt; only one delta 2) The platform assumes builders are fast 3) The platform doesn't provide context on why a project is being built This leads to the following problems: 1: when users change build configuration, we have no idea what's changed since the last build of that configuration, so we must FULL_BUILD (or trust the makefile) 2: FULL_BUILDS are expensive, and we want to both be able to use the delta, and not lock the workspace for too long 3: When IncrementalProjectBuilder#build is called, we don't know whether the user has requested a build on the project's active configuration, or whether a full workspace build has been requested, or whether the project is being built because a referencer is being built. In all these cases we need to build different configuration(s). The current CDT builder implicitly runs the CDT builder on referenced projects as part of the top-level project build. This leads to 2 problems: - Too much building: Low-level projects referenced from multiple places are built multiple times - No delta for the referenced projects builds - Non CDT builders aren't run: only one platform build can be in progress at any one time. If referenced projects are built by the build action, other builders are run, but the wrong configurations are built in the referenced CDT projects leading to even more excessive building. We've investigated a few ways of connecting CDT build to the platform. And we can trade-off the annoying bugs. What we can't do is fix them all. As a result the only way I can see of making this better is by making configurations, or 'ProjectVariants' a first class part of the core.resources model. We map these 1-to-1 to CDT configurations. The functionality added is: - Add methods to IProjectDescription / IProject to create / set IProjectVariants on named projects. - Add support for creating IProjectVariantReferences between project variants. - Add API in core.resources to build a project variant + references - Add API to IncrementalBuilder to discover which variant is being built - Add IBuildContext for IncrementalBuilders to discover why they're being built - Preserve the build delta per build variant Patch to come.</description>
      <attachments/>
    </issue>
    <issue>
      <id>325560</id>
      <title>InnerFrameworkDetection support in Virgo</title>
      <description>Build Identifier: 2.1.0.M04-incubation As discussed before we are trying to contribute the Inner Framework Detection commands into Virgo. I'll post in this enhancement request the intermediate patches until everything is fully ready to go productive and a final patch is posted. Below is the first intermediate patch. It includes enabling the inner framework commands with a startup parameter: example: &gt;startup.bat -frk New components were created for the framework detection agent and lib, and the commands were included in the already existing osgishell Virgo component. These are covered with JUnits. One thing to note here is that the agent and the lib components are packaged without their versions - that is required since the -javaagent vm argument won't take '*' for the version of the jar, also in the manifest of the agent the both the detection and the javassist libs are set in the boot-classpath and again '*' are not permitted there, so the versions had to be removed. If that is a problem i'm open to any suggestions that can workaround that issue :) Also you'll notice there is also a javassist component created - thats until javassist goes further through the IP process so that it can be referenced with Ivy, when that point arrives i'll erase the component. It is here temporary for testing purposes only so that you can try how the commands are integrated within Virgo and return feedback. The thing that is missing for the moment are the integration tests. When they are completed i'll attach a new patch for review. Reproducible: Always Steps to Reproduce: 1.Apply patch &amp; package Virgo 2.Uncomment the osgi.console property for the user region 3.Run Virgo with "startup.bat -frk" or "startup.sh -frk" 4.type "frk" in the OSGi console to check if the commands work</description>
      <attachments/>
    </issue>
    <issue>
      <id>325735</id>
      <title>As a user I'd like to be able to deploy config properties file for ManagedServiceFactory configuration</title>
      <description>Currently Virgo can deploy properties files for ConfigAdmin consumption, but there is no support for ManagedServiceFactory, i.e. multiple configurations of the same service. This would be very useful when configuration multiple datasources for example. See for discussion in he context of dm Server.</description>
      <attachments/>
    </issue>
    <issue>
      <id>325795</id>
      <title>support Windows Vista and 7 Aero Glass shells</title>
      <description>Windows Vista and 7 allow shell's to have transparency known as Glass. SWT should support this feature so that applications can take advantage of this to make modern looking UI's. Widgets can be placed on the glass area so that they look integrated with the application title bar. For examples, see the tab bar of IE 9 or Chrome.</description>
      <attachments/>
    </issue>
    <issue>
      <id>326059</id>
      <title>[launch] [patch] Add Eclipse Product launch configuration type for true product configuration launches</title>
      <description>Created attachment 179460 [details] patch The current way of launching products has some usability issues. For example, if a product configuration is modified the launch config is not updated. Another issue is validation of missing feature for feature based products, i.e. there is no way to find out if the launch configuration is valid based on feature products. Additionally, what also bothers me is that every time I launch, a shared launch config is overridden so it appears dirty in the workspace and needs to be committed to SCM. The attached patch introduces a new launch configuration type. I decided to create a new one in order to get rid of all the legacy handling. At some point, Eclipse Application might be just deprecated. However, the way it is implemented currently would allow to merge it back into "Eclipse Application" type. But looking forward I'd like to introduce additional usability enhancements (read "simplify the launch configuration dialog"). For example, currently the plug-ins tab group is not disabled at all, because it's all managed through the product. There might be instead an option to modify the product. While I'm add it, I also did some fixes to validation in order to discover missing product/application extensions.</description>
      <attachments/>
    </issue>
    <issue>
      <id>326186</id>
      <title>Provide a URI format that contains connection information</title>
      <description>Build Identifier: Currently one can not access a CDO model with the generic EMF resource framework, as CDO does not (yet) have a URI schema that provides all the necessary information to connect to the CDO server to retrieve the resource. The new URI could look like this: cdo.net4j.tcp://user@server:port/repository/MAIN/branch/@HEAD/folder/resource (got that example URI from Eike) Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>326269</id>
      <title>Checker for instantiation of an abstract class</title>
      <description>Build Identifier: 201009170810 class Cl { Cl(){} virtual void pure() = 0; }; void test() { new Cl; } I think it would be good if codan can check that class has private constructor or private assignment operator or pure virtual functions and shows an error when user tries to create instance of such class. Reproducible: Always Steps to Reproduce: 1. launch eclipse 2. white example as described. 3. eclipse doesn't show any errors/warnings on this code.</description>
      <attachments/>
    </issue>
    <issue>
      <id>326383</id>
      <title>Automate IP checks of downloads</title>
      <description>There has been discussion in the RT PMC of what constitutes "released content" as this is crucial to applying the IP policy correctly. The term is not currently crisply defined. There is also a general issue of manual, and therefore time-consuming and error-prone, checks being necessary to compare the contents of downloads to CQs. One way to formalise released content would be to focus on the download area and produce a tool which automatically guarantees all archive content and other files in the download area match CQs for the relevant project. Content destined for the download area would be placed there using the tool and would need to pass an automated check first. A failed check would return a report listing the problem files and would not update the download area. Apart from formalising released content, such an approach would have the benefit of removing a source of human error and would reduce the manual checking that is needed when a project is released. Admittedly this would take some investment as such a tool would be be a significant addition to the IP log tool, but I think it would pay for itself over time. The tool could be implemented by introducing secure hashes into IPZilla. Each JAR covered by a CQ would be attached to the CQ and a secure hash would be calculated and recorded against that CQ. To check content being placed in the download area, any archives would be exploded and then each JAR would have its secure hash calculated and mapped to a CQ. If there was no matching CQ for the relevant project, then the check would fail. Such a check would need to be introduced "gently" to allow the set of secure hashes to be built up gradually. So the process should for a given introductory period - perhaps 6 months - allow content through to the download server without insisting on matching CQs but report back to the user which JARs were not matched to CQs and warn that later this will prevent the content from going on the download area. After the introductory period, when all projects should have ensured they are clean, the check could be made hard.</description>
      <attachments/>
    </issue>
    <issue>
      <id>326524</id>
      <title>FastDamagerRepairer is too slow</title>
      <description>Build Identifier: I20100608-0911 FastDamagerRepairer is too slow when working with files &gt; 10000 lines. Internally, it is implemented using an ArrayList that gets copied (shifted actually) thousands of times as tokens get inserted in the middle. This makes the editor non-responsive for over a minute for really big files. Reproducible: Always Steps to Reproduce: 1.Instantiate an XText environment based on the demo DomainModel. 2.Create a big file with 10000 entities 3.Import it and edit.</description>
      <attachments/>
    </issue>
    <issue>
      <id>326610</id>
      <title>[content assist] code assist for package-info.java</title>
      <description>There are currently no code assist choices for the package declaration in package-info.java I would expect to see at least annotations that are package targettable.</description>
      <attachments/>
    </issue>
    <issue>
      <id>326695</id>
      <title>[Workbench] WorkbenchLabelProvider and IWorkbenchAdapter doesn't support StyledString</title>
      <description>Build Identifier: Build id: M20090917-0800 In eclipse 3.4 IStyledLabelProvider was introduced, such that the plug-in developer can use label provider which implements IStyledLabelProvider in extension org.eclipse.ui.navigator.navigatorContent. This is of great help, as the plug-in developer can show the StyledString for there items in views like Project Explorer, but because of the fact that WorkbenchLabelProvider, and WorkbenchAdapter doesn't support StyledString, we ended up with situation where our project items does show property StyledString in Project Explorer, but when our project items are incorporated in a third party view, then it shows the simple plain text labels because WorkbenchAdapter doesn't support StyledString. Even though IWorkbenchAdapter2 have support for foreground, background, and font, but it doesn't let the single element rendered in multiple colors, which is possible using StyledString. Reproducible: Always Steps to Reproduce: 1. This is API availability issue, no steps to reproduce is required. 2. 3.</description>
      <attachments/>
    </issue>
    <issue>
      <id>326871</id>
      <title>[QVTo] Be able to add blackbox java libraries in standalone environment</title>
      <description>Build Identifier: 20100917-0705 Currently, it is not possible to enable Blackbox Java Libraries when running a qvto transformation in standalone mode. This, however, is extremly important if working with complex data types like QName or javax.xml.Duration. These cannot be constructed without additional blackbox java libraries. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>326926</id>
      <title>API to configure and import SCM URLs</title>
      <description>PDE requires an API from Team to materialize workspace projects from SCM URLs. SCM URLs are URIs that refer to projects/source code in different repositories (similar in concept to "project set format" files). SCM URLs can be specified in bundle Manifests to refer to source code associated with a bundle. Having support from team to materialize projects in the workspace allows users to easily import the source code associated with bundles as workspace projects. The following WIKI page describes the current and desired API/implementation: http://wiki.eclipse.org/PDE/Importing_SCMURLs PDE originally provided this function in 3.6 using internal code and extension points. During 3.7, we'd like to make a public API to allow other team providers to participate. There is also some relevant history on bug 195729.</description>
      <attachments/>
    </issue>
    <issue>
      <id>327263</id>
      <title>Allow multiple debug views and multiple debug context providers</title>
      <description>Build Identifier: I20100608-0911 To supports the pin &amp; clone feature, platform needs to enable the following: 1. Supports multiple Registers view, Expressions view, Variables view, Modules view, (Memory - already has allowMultiple set to true). 2. Supports swapping a different debug context provider for the cloneable views. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>327387</id>
      <title>Better aligning of CDO and EMF notifications</title>
      <description>Build Identifier: 3.5 Let's begin with a short example to motivate this request for an enhancement: There are two CDO transactions t1 and t2 connected to the same resource, with o1 being a CDO object retrieved from t1 and o2 from t2. At least t1 must have it's change subscription policy set to CDOAdapterPolicy. session1: o1.eAdapters().add(notificationHandler1); session2: assert o2.getStreet() == null o2.eAdapters().add(notificationHandler2); o2.setName("me"); o2.setStreet("street"); o2.setName("you"); t2.commit(); In the case of o2 the adapter is called with the regular EMF mechanism for dispatching notifications. In the case of o1 CDO handles the dispatch of notifications during the process of updating the session (delivering passive updates or "session invalidation"). Only if both dispatch mechanism were completely compatible, the notification handler could be unaware of the scenario in which they are used. Unfortunately, there are some differences, which troubled us while porting an application with sophisticated notification handling to CDO. Some of the differences are: * the order of CDO notifications is random. The notification handler for o2 is called at first with the notification concerning the change of the name and after that with a notification for the change of the street. However, the order in which the handler for o1 is called is undefined. * CDO applies *all* change deltas first and later dispatches the notifications. Therefore the state of the notifier is different in both scenarios. When the handler of o2 is notified about the change of the name, o2.getStreet() will return null. However, when the handler of o1 is notified o1.getStreet() will return "street". * CDO optimizes change deltas. Therefore notificationHandler2 is called for both "me" and "you" whereas notificationHandler1 is only called for "you" I think that it would mitigate the effort to migrate applications to CDO with CDO notifications being as close as possible to EMF notifications. On the other side I think that optimization is an issue, too. So, maybe an option to switch to a "dispatch compatibility mode" would be best. Attached you find some tests and a very raw implementation which addresses the three issues. In particular the "old value" argument is not determined correctly and conflicts are ignored. I would be glad if this enhancement would be considered useful for other users of CDO, too. Reproducible: Always Steps to Reproduce: enhancement.</description>
      <attachments/>
    </issue>
    <issue>
      <id>327399</id>
      <title>Provide SVN operation tracking API</title>
      <description>Hi, I need for my project some additional information. I found that there exists some extension points, but the offered functionality seams to be not sufficient. http:// www.eclipse.org/subversive/documentation/gettingStarted/abou tSubversive/extensions.php Is there a way to get informed that the user has selected Team- &gt; Update / Update to Revision / Revert. I need to get informed about those actions. When the user executes once of these actions I want to execute additional user specific code. Is this possible with Subversive? Do you have any ideas how to reach that target? Thank you Adrian Hi Adrian, Currently there is no API that allows to solve such a tasks. What you really asking is API that allows to monitor user actions while using Subversive, right? If so, the task is pretty complex by itself: there is plenty of different actions, some of them pretty simple, but some of them have really complex workflows ("Share Project" action, for example). On the other side they all were made in similar manner: gathering user input, composing action from several different but simple tasks and then running composed task as background or foreground work. So, you could take it as the start point and try to figure out which areas is really interesting for you to be monitored. Then we can discuss the issue a little more deep in order to define what kind of API changes would be required to solve it. ----------------------------------------------------------------------------- Hi Alexander, you are right. I need an API that tells me the user actions while Subversive will be used. Actually what I need is quit simple. I need only the information which files were {modified, deleted, created}. What I also currently miss at the commit extension point is, that I can't get the information which files were be realy commited. The method performAfterCommitTasks(...) is not a real "after commit task" method. I would also need a list of resources which were modified during an action. Interesting actions would be for me: {commit, update, update to revision, revert}. A notification, that the user has shared now a new project will be also very interesting. And in respect also a notification that the user has disconnected from a project. What do you think? Is there maybe already today a solution for me go gain those goals?</description>
      <attachments/>
    </issue>
    <issue>
      <id>327696</id>
      <title>[Browser] implement support for xulrunner &gt;= 4.0</title>
      <description>This could be useful for clients requiring an embedded cross-platform browser that exposes more of its internals than is typically available via JS. For example: String string = "var httpRequestObserver = {observe: function(subject, topic, data) {alert('called!');}};" + "var observerService = Components.classes[\"@mozilla.org/observer-service;1\"].getService(Components.interfaces.nsIObserverService);" + "observerService.addObserver(httpRequestObserver, \"http-on-modify-request\", false);" + "observerService.addObserver(httpRequestObserver, \"http-on-examine-request\", false);"; browser.execute(string); Note: Time-permitting item, not currently on the plan for 3.7.</description>
      <attachments/>
    </issue>
    <issue>
      <id>327899</id>
      <title>include the Ant compiler adapter in ecj JAR</title>
      <description>The separate ecj download jar is great. It would be interesting/useful if it also included the Ant compiler adapter (and the relevant extension contribution) so that it could be directly used in Ant / Eclipse scenarios (e.g., PDE Build). Currently AFAICT users have to use JDT core which pulls in quite a number of other things.</description>
      <attachments/>
    </issue>
    <issue>
      <id>327913</id>
      <title>Performance improvements for commit dialog</title>
      <description>The commit dialog takes a long time to come up on large repositories. This is most likely due to scanning the working tree looking for untracked files. We should implement bug 309359 to support committing staged changes only and this should become the default (as in command line git). This would completely skip scanning for untracked files. In the commit dialog itself it should be ensured that: - show untracked files is 'off' by default - state of this setting is persisted When scanning for untracked files is "on" untracked files that should be ignored according to .gitignore should be ignored.</description>
      <attachments/>
    </issue>
    <issue>
      <id>328227</id>
      <title>EMF will not run on Felix or other OSGi frameworks</title>
      <description>Both org.eclipse.emf.ecore and org.eclipse.emf.common use "Require-Bundle" to depend on org.eclipse.core.runtime. This in turn uses Require-Bundle to depend on org.eclipse.osgi, i.e. Equinox. Therefore EMF depends on Equinox, and cannot run on Felix or other OSGi frameworks. If Import-Package was used for the dependencies then we would at least have a chance of constructing a set of bundles that work on other frameworks. As it is, I am forced to rebuild the EMF bundles (along with org.eclipse.core.runtime etc) using Bnd.</description>
      <attachments/>
    </issue>
    <issue>
      <id>328404</id>
      <title>JPA Persistence Unit Composition</title>
      <description>Support SessionBroker in Eclipselink JPA as a first class citizen. SessionBroker should be easy for the user to configure using just custom Eclipselink jpa (annotations, xml, properties).</description>
      <attachments/>
    </issue>
    <issue>
      <id>328418</id>
      <title>provision Mylyn Builds project</title>
      <description>Bugzilla product: Mylyn Builds Bugzilla components: B3, Framework, Hudson CVS location: /cvsroot/mylyn/builds Existing bugs for Hudson component: https://bugs.eclipse.org/bugs/buglist.cgi?query_format=advanced;short_desc=[hudson];short_desc_type=allwordssubstr;product=Mylyn;classification=Tools Existing bugs for Framework component: https://bugs.eclipse.org/bugs/buglist.cgi?query_format=advanced;short_desc=[build];short_desc_type=allwordssubstr;product=Mylyn;classification=Tools Existing CVS projects: /cvsroot/tools/org.eclipse.mylyn/sandbox/org.eclipse.mylyn.builds* -&gt; /cvsroot/mylyn/builds /cvsroot/tools/org.eclipse.mylyn/sandbox/org.eclipse.mylyn.hudson* -&gt; /cvsroot/mylyn/builds Existing CQs: 4123, 4124, 4218, 4361, 4393, 4441</description>
      <attachments/>
    </issue>
    <issue>
      <id>328421</id>
      <title>move Mylyn Reviews project</title>
      <description>Mylyn Reviews (tools.mylyn.reviews) is currently a sub-sub project under the Mylyn Tools project (tools.mylyn). It be moved to a sub-project (mylyn.reviews) under the new Mylyn top-level project (mylyn). Bugzilla product: Mylyn.Reviews -&gt; Mylyn Reviews Bugzilla components: Framework, Gerrit, R4E, SCM, Tasks Existing CQs: CQs from tools.mylyn.reviews -&gt; mylyn.reviews Existing Git modules: No changes necessary</description>
      <attachments/>
    </issue>
    <issue>
      <id>328477</id>
      <title>Community Web Site</title>
      <description>we think it would be a good idea, to list and feature all the cool things people have built around Xtext on Xtext.org. For that matter, we would like to have a dedicated additional page "Community". If you have developed or came across something you'ld like to see there, please provide the following information as a comment to this bugzilla: - name - description (max. 2 sentences) - link - license (any license, even commercial is ok) - category (language, framework, documentation) - version (0.7.x, 1.x, latest Milestone) - author</description>
      <attachments/>
    </issue>
    <issue>
      <id>328522</id>
      <title>Content Assist feature - auto-replace "." with "-&gt;" during manual or automatic Content Assist activation</title>
      <description>Created attachment 181568 [details] patch to provide cdt editor feature to auto-replace "." with "-&gt;" under appropriate circumstances a user has requested for a feature to replace "." with "-&gt;" when appropriate when typing. the attached patch performs this feature under the following conditions. - the new pref for the feature must be checked - the user must be typing the member name immediately after entring '.' - the user is allowed to backspace to delete &amp; continue typing - the user's member/field name entered must be amongst Content Assist choices by using ContentAssist, it will help distinguish when looking for values for a pointer versus for an object instance. no attempt to perform replacement will occur for non-pointers if that is how ContentAssist would treat it. the attempted replacement will occur when the user types any non-C-ident character. this includes arrow keys to navigate away. the user can abort replacement by hitting ESC at any point during member typing to skip attempted insertio. if the insertion at the end of the member is a "(" or "[" (or any other character for that matter, PointerReplacer will do its work first, and then the existing VerifyKeyListener BracketInserter will do its work second. undo will put the "." back in place and allow the user to continue as previously. this feature is subject to the minor whims of the ContentAssist suggestions (there appear to be some instances where it makes some suggestions.</description>
      <attachments/>
    </issue>
    <issue>
      <id>328556</id>
      <title>Enhance Instance Diagram 'Add Related Artifact'</title>
      <description>Two suggested improvements (1) when adding a related instance, an association instance should be programmatically added between the new instance and the one that the action was started from. (2) the action needs to take into account inheritance - I'll add an attachment on this</description>
      <attachments/>
    </issue>
    <issue>
      <id>328566</id>
      <title>Add TAB completion and command History to Virgo console</title>
      <description>Build Identifier: A solution exists [1] that can provide TAB completion and commands history to the Virgo console. This code should be integrated to Virgo to overcome the limitations of Equinox implementation. Currently the bundle can be used in latest versions of Virgo [2]. The current implementation of this features has some limitations: 1) no tab completion for command parameters 2) special characters do not work without configuration Testing the dm Server console (using JLine) proved that the special characters do not work there either. The problem is that JLine (and the implementation we have) relies on the host operating system to detect the special characters. In case of incoming telnet connection these characters are not necessary the same as on the host OS. This causes the console to look as malfunctioning - it does not accept backspace for instance and the command history is not working since the arrow keys are not recognized. A research we made showed that detection of the client terminal key bindings is possible. Therefore a implementation that detects the bindings should solve the problem with the special keys. The tab completion of commands parameters is dependant on the command interface used. It can be implemented in the same (or at least similar) way to the one present in dm Server. [1] http://dev.eclipse.org/mhonarc/lists/virgo-dev/msg00254.html [2] http://dev.eclipse.org/mhonarc/lists/virgo-dev/msg00257.html Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>328605</id>
      <title>MPC should retrieve list of catalogs from the server</title>
      <description>Having the client hard coded with the locations of all the Marketplace Catalogs could prove troublesome if we ever have a problem with a catalog and wish to de-list it permanently or temporarily. We should move this list to the server and fetch it when launching MPC. This would allow not only remove entries but also add them on the fly.</description>
      <attachments/>
    </issue>
    <issue>
      <id>328818</id>
      <title>UI freeze during expanding EJB project</title>
      <description>It is known that parsing Java EE annotation model (bug 198815 c 12) may take a long time. Actually it may take as much as 5 minutes for a medium project with about 60 beans. The model is parsed when the project is expanded in the Project Explorer, which causes 5 minutes adopter product freeze. org.eclipse.jst.jee.ui.internal.navigator.Ejb3ContentProvider.getChildren(Ejb3ContentProvider.java:75) should adopt lazy approach as described in the post http://dev.eclipse.org/newslists/news.eclipse.platform/msg55021.html to avoid UI freeze.</description>
      <attachments/>
    </issue>
    <issue>
      <id>328929</id>
      <title>[target] Would you like source with that?</title>
      <description>it would be awesome if users could pick a feature, add it ot the target and say they want source with that. Currently the producing team has to create and publish source features for this purpose. This can be a problem as they factor their world into interesting runtime pieces. They might make 100 features to suit different runtime scenarios. making 100 source features is clutter. Rather, PDE could have a check box (whatever) that asked the user "Would you like source with that?". I'll work on a patch to support this capability and attach it here presently.</description>
      <attachments/>
    </issue>
    <issue>
      <id>329124</id>
      <title>ECF Documentation Project</title>
      <description>Hi, Documentation of the ECF is fragmented. We need a central place for at least a users guide and a programmers/integration guide (t1). There must be a single source (t2) from where all forms of documentation can be generated (t3) like PDF, Eclipse help, etcetera, but there may not be a barrier to block contributions like commit access or specialized tools to create the documentation (t4). Specialized tools may be used to transform documentation to other forms of documentation. All public accessible existing documentation should be integrated into the new documents or be removed (t5). We must agree on a form of versioning (t6) that is functional but not intrusive. This can be to copy the documentation after each release or use some kind of @since construct that gets parsed by the documentation builder (t7) The format of the guides must be sober and fixed (t8) which aims to avoid endless topics and subtopics and enables the document builders to do some checking.</description>
      <attachments/>
    </issue>
    <issue>
      <id>329164</id>
      <title>Bugzilla 4.0 - New Default Status Workflow</title>
      <description>Bugzilla 4.0rc1 is released soon so I think we should prepare for the New Default Status Workflow</description>
      <attachments/>
    </issue>
    <issue>
      <id>329198</id>
      <title>Support PDE/Equinox bundles in Eclipse IDE</title>
      <description>Currently it is not possible to run/deploy regular Equinox bundles with Virgo from the Eclipse IDE. On the other hand, PDE does not work out of the box with EclipseRT bundle projects. I guess this is mostly because of the different structures, when the bundles live as projects in the IDE rather being packed as regular OSGi JAR files. It would be great if PDE/Euqinox bundles would be first class citizens in the Virgo world. This would make it much easier to develop server-side OSGi bundles for Virgo using Eclipse as IDE.</description>
      <attachments/>
    </issue>
    <issue>
      <id>329456</id>
      <title>Add API to access the application menu (Mac) and system menu (win32/gtk)</title>
      <description>On the Mac developers want control over the application menu. They want to set the about menu text, enable/disable/hide the preferences item, and add items to the application menu. They also want to listen for selections on those items. In other words, treat it like any other Menu in the application. Likewise, on Win32 or Linux, you can access the system menu of a window and listen to each of its items, as well as add items to the menu. On the Mac the only way to do this right now is via the eAWT package from Apple. This works correctly now, in 3.7, but using it loads the AWT, which shouldn't be necessary just to listen to some menu items that the SWT creates anyway. On Windows or GTK the system menu is not accessible without going to the PI. I know it can be done on Win32 as we already modify it for TOOL and child windows. We don't do it in GTK but I'm pretty sure I saw API somewhere to get at the system menu.</description>
      <attachments/>
    </issue>
    <issue>
      <id>329517</id>
      <title>state call backs during creation of a connection</title>
      <description>The interesting states during creation of a connection are - connecting - attached to source - attached to target - canceled The first state is the initial one. It should be entered when a connection tool is selected. The second state is assumed after clicking on a valid anchor. Then a feedback figure for the connection to be created is drawn. The third state is entered when a valid target anchor was clicked. The last state is entered if escape is pressed or after having clicked on an invalid target. The CreateConnectionFeature should have overridable methods that are called when either of these states are entered.</description>
      <attachments/>
    </issue>
    <issue>
      <id>329528</id>
      <title>Support Markdown in WikiText</title>
      <description>WikiText looks to be a great standard for representing wiki text formats. It's especially useful if you have one or more already in existence. However, I'm surprised that Markdown isn't mentioned (or supported). StackOverflow uses markdown for its wiki syntax and is increasinly popular as both a text-readble and convertable format. There's also real-time previews for such syntaxes, like wmd-editor.com as well as StackOverflow's fork of the same. Lastly, it also supports inline HTML where necessary, code blocks, and conversion to pretty-printed data. In fact, this entire comment is valid Markdown, even if I use *emphasis* or other HTML. One key benefit of Markdown over the existing textile support is with headers. Compare and contrast: h1. A header # A Header # A Header ====== All of these will work the same way. You can also have nested headers too. Finally, code samples (with indented spaces) work better with MArkdown than others. For example: // Java code example for(int i=0;i&lt;10;i++) System.println("I doesn't need escaping");</description>
      <attachments/>
    </issue>
    <issue>
      <id>329561</id>
      <title>[releng] migrate Mylyn projects to Git</title>
      <description>With CVS being deprecated at Eclipse.org, Mylyn and its sub-projects should consider migrating to Git.</description>
      <attachments/>
    </issue>
    <issue>
      <id>329645</id>
      <title>Execute bundled models</title>
      <description>Build Identifier: I made changes to EclipseEscapeRunner so loading a model from a Project is a specific case of loading from the name of a class (which now allows loading models from bundles). I've also modified InfoView so it uses getResource instead of relying on a project to load the about file. This works for both models loaded from workspace projects and models run from bundles. I've also created a new execute handler and command to load using just the name of the class (ie: for models in bundles). Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>329723</id>
      <title>Common Query Language as EMF Query2</title>
      <description>Created attachment 182676 [details] Junit test cases for EMF Query integration Hi All, In Conjunction with the bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=256931 Opening this enhancement request. CDO Has a Query interface through which every backend queries can be executed from the client, but then the queries are backend specific. A common query language is needed through which generic queries from the client can be executed. Already OCL as a server side query language is in place. We propose to make EMF Query 2 also as one option for backend language. User can express their queries in textual based syntax.For this we need to analyze the requirements. Also to check the feasiblity and the time span for the task. Lets start our discussion about the EMF Query2 integration with CDO here.I have written a test case where EMF Query2 based queries are fired from the client and the queries are handled in a server class called EMFQueryHandler.The QueryHandler and the test are on same lines of OCL tests and OCL Query Handler.The queries in the test case are written in LPG grammer based syntax. Next Steps on this topic: 1.Checking the File based store implementation for CDO.Execution of EMF Query on the file based store. 2.Improving the test cases accordingly. 3.Analyzing the feasibility of the Extensibility aspect so that EMF Query could be mapped /or understood by other backend query languages. How to run the test cases: 1. Unzip the file attached. 2. Put the org.eclipse.emf.cdo.server.emfquery plug-in in your workspace. 3. 'Files_In_Tests_Plugin' folder contains the files to be put in the org.eclipse.emf.cdo.tests plug-in.It contains the EMF Query test file and the changed manifest.mf which now has a dependency to EMF Query2 and the CDO server EMF Query plug-in. Let me know if any issues coming while running the tests. Please provide your comments/suggestions on this topic. Thanks and Regards, Saurav</description>
      <attachments/>
    </issue>
    <issue>
      <id>329741</id>
      <title>[generator] make generated / referenced GenModels available to generator fragments</title>
      <description>It would be nice if a generator fragment could obtain the generated and referenced GenModels from the generator framework for all EPackages referenced by the grammar. This would allow the fragment to generate code which depends on the code generated by EMF (e.g. the generated EClasses or the XyzPackage.Literals interface). Although none of the generator fragments provided by Xtext require any information contained in the GenModel files I think this is a quite common use case for custom generator fragments. As a workaround we currently implemented our own EcoreGeneratorFragment subclass which makes this information available statically for other fragments to use.</description>
      <attachments/>
    </issue>
    <issue>
      <id>329777</id>
      <title>No passive update mode and ChangeSubscriptionPolicies (compatibility with other transactional frameworks)</title>
      <description>Build Identifier: 20100917-0705 A. Use Case description In order to be able to use both CDO and a transactional framework (EMFTransaction for example), the passive update mode must be disabled. Indeed, if the passive update mode is activated, remote changes won't be integrated inside a Command of the EditingDomain commandStack, causing IllegalState Exceptions. On an other hand, we need to be notified of any remote changes in order to integrate them properly to the EditingDomain. This use case have already been discussed, please see http://www.eclipse.org/forums/index.php?t=msg&amp;goto=559360&amp;S=d2575181f9e963b075ed35f97229f38a#msg_559360. B. Work-Arounds In order to allow CDO to work with other transactional frameworks, we have identified two solutions : 1. Using two cdo sessions We first thought of a mechanism based on two sessions : - the first session has no passive update mode, and is used to commit changes - the second session has activated the passive update mode, and receive notifications whenever Repository content changes. When receiving such notifications, it will execute the refresh() method on the first session, inside a Command of the Editing Domain's Command Stack. No transaction is opened on this session, as it is just used to be notified of remote changes. Although this mechanism worked perfectly, it seemed a bit shaky and not efficient. 2. Integration of remote changes inside the transactional change recorder We then studied how to integrate remote changes directly inside the transactional Change Recorder (EMF transaction). If the Notification received by this Change Recorder is a Remote Notification (i.e coming from the Repository), we append the changes inside a Command. Otherwise, we append the notification as a standard transactional Change Recorder would do. The main problem is that it's hard to determine whether a notification is Remote or Local : for now on, we have considered that a Remote Notification is a Notification that is received when no local transaction is currently being executed. It's partly true, but Remote Notifications can also been received while a local modifications is currently executed inside a transaction. This solution, although more effecient, is far from being perfect and reliable. C. Feature Request It seems that the best and the most generic approach will be to allow users to deactivate passive update mode and yet be able to be notified of CDOSessionInvalidationEvents. A good solution might be to be able of activate/deactivate the passive update mode for a Transaction instead of a Session : by doing so, one can still attach Listeners to the Session (and consequently receive notifications for any remote change), but the elements won't be locally updated. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>329844</id>
      <title>provision Mylyn Docs project</title>
      <description>Provision the Mylyn Docs Project as outlined under: http://wiki.eclipse.org/Mylyn/Restructuring#Docs . Project name: Mylyn Docs Project id: mylyn.docs Bugzilla product: Mylyn Docs Bugzilla components: HtmlText, Framework, WikiText</description>
      <attachments/>
    </issue>
    <issue>
      <id>329935</id>
      <title>Moving EMF core to +0</title>
      <description>On today's planning council call, we discussed the fact that the Platform (4.1) now has a dependency on EMF. Since EMF is a +1 project, it means Platform 4.1 also needs to be +1. Of course EMF also has dependencies on Platform so there is a cyclic dependency here. One possible solution is that the portions of EMF consumed by the platform would be moved to become +0 features. I'm opening this bug to discuss how that might be achieved and what impact it might have on how EMF is built and delivered to the release train.</description>
      <attachments/>
    </issue>
    <issue>
      <id>330048</id>
      <title>Allow commit and push to remote in one interaction</title>
      <description>With the traditional VCS, we're able to do a single UI action to get changes to the repository. Given Git's distributed nature, the pushes and commits are separate. But as the Eclipse workflow (or at least my approach) is typically to make a change and want to get it up to the repos immediately, I need to go through two UI steps with some wizard interaction as well for the push. It would be nice to have a one step "commit and push" action. This might use the default push setup so that you could simply click the commit and push button and have the push happen as well if you have the remote push set up correctly. Alternatively you might combine the two into a single wizard.</description>
      <attachments/>
    </issue>
    <issue>
      <id>330324</id>
      <title>[Intro] Allow perspectives to contribute help</title>
      <description>3.6. A known problem of Eclipse is that it can be hard to use a new plug-in at the beginning (see also bug 307889). While discussing this with co-workers the following idea came up: since the Welcome page is too crowded and not activity driven, it would be nice for plug-ins to have a way to show their tips &amp; tricks in their context. A good place for this would be the empty editor area. ==&gt; Allow perspectives to specify help contents that gets displayed in the empty editor area. This might require API/extensions in Platform UI to allow contributions to the empty editor area.</description>
      <attachments/>
    </issue>
    <issue>
      <id>330482</id>
      <title>[diagram] Support diagram editing in Sapphire UI</title>
      <description>Build Identifier: M20100909-0800 Currently Sapphire Editor consists of form based editors and xml source editors. This bug is tracking an enhancement request to support diagram editing in Sapphire framework. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>330576</id>
      <title>[Search] Implements XML/Search engine with XPath like File/Search, Java/Search</title>
      <description>Hi WST Team, I don't know if you are interested with my work but I'm implementing an XML Search Engine to give the capability to search Nodes with XPath (or pur DOM) by using DOM SSE. With this XML Search Engine you can search nodes in your XML files of your Eclipse workspace. In my case I have several (custom) XML files which are linked with attribute and I manage completion. For instance image you have thoses XML files in your workspace : roles.xml : ------------------------ &lt;roles&gt; &lt;role id="role1" /&gt; &lt;role id="role2" /&gt; &lt;/roles&gt; ------------------------ person.xml ------------------------ &lt;person&gt; &lt;role-ref id="role1" /&gt; &lt;role-ref id="role2" /&gt; &lt;/person&gt; ------------------------ role-ref element from person xml file is linked to role element from roles.xml. I have managed completion for the "id" attribute of the person/role-ref. To do taht I need to query roles.xml to display the list of the roles. I'm using my XML Search engine to manage that. I'm studying Eclipse Search API to manage Ctrl+Shift+G. For instance if you do Ctrl+Shift+G after selecting the "id" attribute (from roles.xml), I want display XML files wich are linked to the role id. Once I will finsish to implement Eclipse Search API with my search Engine I would like add XML Search like File Search or Java Search to type Xpath in a field and start the search and retrieve XML files wich follow teh XPath expression. Today I have created 2 projects : * org.eclipse.wst.xml.search.core * org.eclipse.wst.xml.search.ui If you are interested, tell me and I will send you a patch when I will finish my work. Regards Angelo</description>
      <attachments/>
    </issue>
    <issue>
      <id>330695</id>
      <title>Make tasks assigned to me more prominent in the task list</title>
      <description>Currently, you communicate to others that you are taking ownership of a bug by assigning it to yourself. Unfortunately, this is not reflected in the task list in any way, so you are not effectively communicating it to yourself. It seems like adding any more decorations to the task list is a bad idea, but I have 2 suggestions on how this could be supported: # Make the "Assigned to" field in the task tooltip stand out when assigned to me, e.g. by making it bold and/or showing the little yellow person icon. # Add a "Show only my tasks" filter button to the task list toolbar. This would work similarly to the "Hide completed tasks" button, except that it would be available when the task list is focussed as well as when it's not.</description>
      <attachments/>
    </issue>
    <issue>
      <id>330894</id>
      <title>Open J2EEFlexProjDeployable's list of participants to 3rd party plugins</title>
      <description>Build Identifier: Hi, I've been doing some work on m2eclipse integration for WTP for quite some time now and I've thought of a few enhancements in WTP's API that'd make my life easier : I'd like to create custom components that would generate archives the maven way, and which could be consumed by WTP for export/deployment. For instance, for a web project we would have in its .component : &lt;dependent-module deploy-path="/" handle="module:/ejb-client/someejbproject"&gt; &lt;dependency-type&gt;consumes&lt;/dependency-type&gt; &lt;/dependent-module&gt; &lt;dependent-module deploy-path="/" handle="module:/test/someutilityproject"&gt; &lt;dependency-type&gt;consumes&lt;/dependency-type&gt; &lt;/dependent-module&gt; The ejb-client module would allow to deploy a ejb client jar in the web project, defined in maven (seelcting a few classes and interfaces in someejbproject) The test module would allow to deploy a jar containing only the test classes of someutilityproject. I've discussed this feature with Rob Stryker, according to him : - "J2EEFlexProjDeployable has the list of participants. some of these participants (JEEHeirarchyExportParticipant) tells what is a child module and what is not. You'd need something to recognize a reference as a child module and not just as resources to be published" - "so you'd just want to use maven for the overlays, filesets, include,s excludes, etc and then expose it all via virtualfolder and virtualfile and then designate that it's a child module and needs to be zipped" - "to get your custom reference recognized as a zipped child inside a war project, might require small changes to j2eeflexprojdeployable to allow other adopters to add participants" We might also want to be able to let a 3rd party plugin (maven) generate the archives completely, and tell WTP to pick this archive. What do you think? Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>330988</id>
      <title>Provide a generic ODA driver implementation for EMF models</title>
      <description>Please provide an "official" ODA driver that can be used to create BIRT reports (for example) based on EMF models. The driver should support user-specified input parameters and ideally be pluggable so that different query languages can be "plugged in".</description>
      <attachments/>
    </issue>
    <issue>
      <id>331065</id>
      <title>improve Bugzilla client error handling and error messages</title>
      <description>Bugzilla provides an HTML message in a tag identified by id 'error_msg'. It's possible to improve error handling to use IStatus.ERROR instead of IStatus.INFO and provide a more descriptive message in some cases.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331143</id>
      <title>[evaluator] Provide a generic ODA driver implementation for EMF models</title>
      <description>Support the MDT/OCL aspects of Bug 330988.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331154</id>
      <title>[api] extend TaskOperation to support tooltip and enablement</title>
      <description>I want to add the following two new features. 1) enable/disable of an TaskOperation 2) add Tooltip support Patch is coming soon.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331213</id>
      <title>[scp] Provide UI-less scp IFileService in org.eclipse.rse.services.ssh</title>
      <description>We should refactor the core UI-less scp IFileService implementation, such that it can be used in server-side environments without RSE. This should be easy, by just 1.) moving the 3 core classes into a new package inside services.ssh 2.) exporting that package as x-friends:=subsystems.files.scp 3.) Requiring services.ssh with the new version in subsystems.files.scp The drawback of doing so would be that the scp plugin requires the new (3.3) version of RSE, whereas today it might also work with the older (3.2 or even 3.1) version of TM. What do others think, should we move forward with the refactoring or wait?</description>
      <attachments/>
    </issue>
    <issue>
      <id>331287</id>
      <title>Add at least stubs for Mouse Track Listeners to swt/widgets/Control</title>
      <description>Hi All, The problem is that org/eclipse/swt/widgets/Control.java lacks definition of certain methods. For example Mouse Track Listener related. This causes No Such Method exception to be thrown in swt apps using these methods. I know that it would be problematic to handle mouse tracking in RWT, however, I would at least add their methods so the transition of SWT Apps to RWT could be seamless. No code alterations would be necessary in existing code written for SWT. For example, there are some widgets on the net, that work great but they use Mouse Track Listeners to provide nifty tooltips etc. The problem is that No Such Method exceptions are thrown when ran on RWT. I would not want to alter these widgets etc... I think it is ok to define all necessary methods in the SWT classes in such way that swt apps can run seamless, even if these methods do nothing. The proposition is to add to org/eclipse/swt/widgets/Control.java the following empty method definitions (stubs): public void addMouseTrackListener(MouseTrackListener listener) { } public void addMouseMoveListener(MouseMoveListener listener) { } public void removeMouseTrackListener(MouseTrackListener listener) { } public void removeMouseMoveListener(MouseMoveListener listener) { }</description>
      <attachments/>
    </issue>
    <issue>
      <id>331442</id>
      <title>To be able to add and remove lines (model elements) from the table</title>
      <description>Hi, In this feature we should be able to: - drag and drop a model element to add it to the Table - use the table's contextual menu to remove a line Nicolas Guyomar</description>
      <attachments/>
    </issue>
    <issue>
      <id>331467</id>
      <title>[LTTng] Add a latency analysis compoment</title>
      <description>It would be useful to add a latency analysis component to the LTTng integration in Eclipse. The idea is to scan an LTTng trace, determine the elapsed time between 2 related events (the latency), and then to plot the distribution of the latencies.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331480</id>
      <title>[Validation] Need validation for embeddable id class</title>
      <description>Build Identifier: 20100917-0705 1. Embedded id class must include method definitions for equals() and hashcode() 2. The fields or properties of the embedded id class must be in the set of valid identifier types (Pro EJB 3 book P83) (too ambiguous to validate? too restrictive?) 3. Embedded id class must be public, implement Serializable, and have a no-arg constructor 4. No @Id nor @IdClass is used in the entity that uses the embedded id class (validation for @IdClass exists) 5. Embedded id class must be annotated with @Embeddable (validation exists) 6. The access type of the embedded id class must match the access type of the entity that uses it Corresponding validation message(s) should be given when any of the rules above is violated. Reproducible: Always Steps to Reproduce: 1. Create an id class 2. Create a java entity making the type of its primary key attribute as the id class and annotating its primary key attribute with @EmbeddedId</description>
      <attachments/>
    </issue>
    <issue>
      <id>331517</id>
      <title>Implementation of GASTM (OMG specification)</title>
      <description>Hi MoDisco Team, I thought that the infrastructure component was my target, but I saw a nice Contribution one. Perhaps this one is better ;) Attaching the GASTM implementation contribution.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331647</id>
      <title>[compiler][null] support flexible default mechanism for null-annotations</title>
      <description>Applying the annotations introduced in bug 186342 for inter-procedural null checking would require tremendous efforts if no smart defaults can be selected. A mechanism for defaults should have these properties: - be configurable at all levels of granularity: method, class, package, project. - be applicable to - just method parameters, or - method return, or - both - support cancellation of defaults from an outer scope. - work well with inheritance. NB, that canceling defaults from a super class is not a sound option. Just as in bug 186342, any annotation names used for this mechanism should be configurable.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331649</id>
      <title>[compiler][null] consider null annotations for fields</title>
      <description>Once bug 186342 is fixed we might want to think of supporting those annotations also for fields. Without bending the semantics of Java this would imply that for any @NonNull field: - any exit from a constructor must establish that the field is definitely non-null - any assignment in a method must assign a definitely non-null value. More sophisticated and more flexible models may exist, e.g.: - allowing fields to be still null after the constructor but designating init methods to do the job, forcing clients to call init immediately after the constructor - allowing intermediate states with nulls given the invariant is restored at each exit of a method. Here costs and benefits must be weighed.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331651</id>
      <title>[compiler][null][external] Support external null annotations for libraries</title>
      <description>The mechanisms of bug 186342 and bug 331647 are limited by the fact that existing libraries do not (yet) specify the nullity contracts of their API. A profile mechanism should be provided that feeds external nullity information regarding those libraries into the compiler. Such a profile can be obtained from byte code analysis of the library. Such tools and profiles exist in other projects and the possibility to re-use those should be investigated. Using the default mechanism from bug 331647 should help to keep profiles compact.</description>
      <attachments/>
    </issue>
    <issue>
      <id>331781</id>
      <title>[multicore][Pin&amp;Clone] Pin and Clone support</title>
      <description>Now that the platform patch (327263) is committed, CDT can provides pin and clone supports for these views. - Memory Browser - Disassembly - Registers - Expressions - Variables</description>
      <attachments/>
    </issue>
    <issue>
      <id>331880</id>
      <title>Refactoring [427]: IF Statement/Construct Refactoring - CQ Approved</title>
      <description>Created attachment 184567 [details] Patch including all updated projects for this enhancement. Added and modified classes in order to implement IF statement to IF construct and IF construct to IF statement refactoring to Photran. Program will validate that a valid IF statement or construct is selected at the time of refactoring, and will ensure that the selected text is refactorable.</description>
      <attachments/>
    </issue>
    <issue>
      <id>332122</id>
      <title>Add ANT task for converting from wiki markup to EPUB format</title>
      <description>Electronic books are becoming more popular with the advent of mobile devices such as Android driven telephones and the iPad. Most of these support the EPUB format either natively or through the use of third party software. Having for instance a user guide in EPUB format allows the user (depending on the reader software) to annotate the document and synchronise location and annotations between reader instances. For more about the EPUB format, see: http://en.wikipedia.org/wiki/EPUB and http://www.idpf.org/. Generating EPUB files by means of an ANT job can be done by building on the WikiText framework to create an suitable ANT Task. The initial implementation should support version 2.0.x of the format. Please assign this bug to me if this is something you would like to have in Mylyn Docs.</description>
      <attachments/>
    </issue>
    <issue>
      <id>332158</id>
      <title>[shared] Better error message when feature patch install fails in a read-only directory</title>
      <description>Currently, when trying to install a feature patch into a read-only install of Eclipse, the install fails, but with a cryptic error message. For example, try the following: 1. Unzip your favorite Eclipse distro of 3.6.1 (I used eclipse-SDK-3.6.1-macosx-cocoa-x86_64.tar.gz) 2. chmod -R 555 eclipse (or the appropriate variant on windows) 3. Start eclipse 4. open update manager 5. Add update site http://dist.codehaus.org/groovy/distributions/greclipse/snapshot/e3.6/ 6. Try to install. I get the error below. It doesn't say anywhere (or at least it's not saying it to me) that this is failing because of a read-only problem. Cannot complete the install because of a conflicting dependency. Software being installed: Groovy-Eclipse Feature 2.1.1.xx-20101124-2100-e36 (org.codehaus.groovy.eclipse.feature.feature.group 2.1.1.xx-20101124-2100-e36) Software currently installed: Shared profile 1.0.0.1284044844810 (SharedProfile_SDKProfile 1.0.0.1284044844810) Only one of the following can be installed at once: Java Development Tools Core 3.6.1.xx-20101124-2100-e36 (org.eclipse.jdt.core 3.6.1.xx-20101124-2100-e36) Java Development Tools Core 3.6.1.v_A68_R36x (org.eclipse.jdt.core 3.6.1.v_A68_R36x) Cannot satisfy dependency: From: Shared profile 1.0.0.1284044844810 (SharedProfile_SDKProfile 1.0.0.1284044844810) To: org.eclipse.jdt.core [3.6.1.v_A68_R36x] Cannot satisfy dependency: From: Shared profile 1.0.0.1284044844810 (SharedProfile_SDKProfile 1.0.0.1284044844810) To: org.eclipse.jdt.feature.group [3.6.1.r361_v20100714-0800-7z8XFUSFLFlmgLc5z-Bvrt8-HVkH] Cannot satisfy dependency: From: Groovy-Eclipse Feature 2.1.1.xx-20101124-2100-e36 (org.codehaus.groovy.eclipse.feature.feature.group 2.1.1.xx-20101124-2100-e36) To: org.codehaus.groovy.jdt.patch.feature.group [2.1.1.xx-20101124-2100-e36] Cannot satisfy dependency: From Patch: org.codehaus.groovy.jdt.patch.feature.group 2.1.1.xx-20101124-2100-e36 Eclipse Java Development Tools 3.6.1.r361_v20100714-0800-7z8XFUSFLFlmgLc5z-Bvrt8-HVkH (org.eclipse.jdt.feature.group 3.6.1.r361_v20100714-0800-7z8XFUSFLFlmgLc5z-Bvrt8-HVkH) To: org.eclipse.jdt.core [3.6.1.xx-20101124-2100-e36] I would like the resulting error message to say in big, friendly letters at the top something like: "We're sorry, but this installation cannot continue because your install directory is read-only. More details:" Ideally, of course, I would prefer a read-only install not being a problem for p2 and feature patches, but this is a nice first step.</description>
      <attachments/>
    </issue>
    <issue>
      <id>332222</id>
      <title>Unable to open java files in excluded Java Build Path</title>
      <description>Setup: 1) main source is located at c:\p4\main\JavaApplications\ 2) Extra source is located at c:\p4\main\JavaApplications\test\ Project properties has both folders set as source and "test/" is excluded source #1. This exclusion was added automatically when I added the second folder. When I try to open a class by type (ctrl-shift-T) which is located at "c:\p4\main\JavaApplications\test\devtool\chat\ChatTools.java" it cannot find the file. It thinks the file is located at "test.devtool.chat.ChatTools" instead of "devtool.chat.ChatTools". This is true for all files contained in source #2. I have tried exiting eclipse. I tried refreshing the workspace. I have tried removing folder #2 from sources, exiting the project properties window, then re-adding it and waiting for the refresh to finish. This does not fix the issue. I have not tried deleting the project and recreating it. -- Configuration Details -- Product: Eclipse 1.3.1.20100913-1228 (org.eclipse.epp.package.java.product) Installed Features: org.eclipse.jdt 3.6.1.r361_v20100714-0800-7z8XFUSFLFlmgLc5z-Bvrt8-HVkH</description>
      <attachments/>
    </issue>
    <issue>
      <id>332248</id>
      <title>Buffer changes for future SSL/TLS support</title>
      <description>Build Identifier: I20100608-0911 Hello, Net4j buffer/ibuffer requires some changes in order to work well with future Net4j/TLS support. As per Eike request I'll attempt to attach patch which implements required changes to this bugreport. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>332325</id>
      <title>Provide problem/reference counts in xml from Analysis and Use Scan tasks</title>
      <description>Build Identifier: API Usage and API Analysis Ant tasks produce a bunch of XML reports. There's no summary in XML format. This presents a problem for a build using these Ant tasks that needs to report the found numbers of warnings and errors in a concise form. There doesn't seem to be an easy way to get this information right now, especially from the API Use task output. What I would like to suggest, is each API Tooling task to produce at least a XML summary reporting the total errors/warnings numbers and any other important information, if any. I think, ideally, the report should be a well formed XML output transformed to HTML via XSLT, as opposed to how right now a separate Ant task transforms it to HTML. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>332403</id>
      <title>[Refactoring] Toggle End Name - CQ Approved [Contrib]</title>
      <description>Created attachment 185035 [details] Patch containing the requested changes Jeff, as part of our CS 427 work at the University of Illinois the following individuals (MulbMonstera) created a refactoring to toggle the end name of supported constructs: Won Jun Jang William Seemann Jegan Sridharma Francois Toguo Jim Tonyan Please refer to the following wiki page for more details: https://agora.cs.illinois.edu/display/cs427fa10/Toggle+end+name</description>
      <attachments/>
    </issue>
    <issue>
      <id>332492</id>
      <title>Refactoring [427]: Remove Obsolete Language Features - CQ approved</title>
      <description>Created attachment 185105 [details] Remove Obsolete Language Features - Refactoring Enhancement (Patch) This enhancement request contains the code for 3 additional "Remove Obsolete Language Feature" refactorings for the Photran editor. The included path file contains the code for the implemented features as well as automated tests for their behavior. The 3 refactorings are: 1) Removing Branches to END IF Statements 2) Removing Real and Double Precision DO Loop Counters 3) Removing PAUSE Statements More details about the refactorings and their implementation can be found on our development wiki here: https://agora.cs.illinois.edu/display/cs427fa10/AvocadoChestnut Affected files from original Photran Installation are: • org.eclipse.photran.core.vpg Package – Core refactoring code. - src/org/eclipse/phoran/internal/core/refactoring Directory RemoveBranchToEndIfRefactoring.java RemovePauseStmtRefactoring.java RemoveRealAndDoublePrecisionLoopCountersRefactoring.java Messages.java - src/org/eclipse/phoran/internal/core/refactoring/infrastructure Directory FortranResourceRefactoring.java • org.eclipse.photran.core.vpg.tests Package – Refactoring test suite and test cases. (test cases in directories now shown.) - src/org/eclipse/phoran/internal/tests/refactoring Directory RemoveBranchToEndIfTestSuite.java RemovePauseStmtTestSuite.java RemoveRealandDoublePrecisionLoopCountersTestSuite.java - refactoring-test-code Directory remove-branch-to-end-if Directory remove-pause-stmt Directory remove-real-and-double-precision-loop-counters Directory org.eclipse.photran.ui.vpg Package – Contains GUI messages and menu extensions for refactorings. - src/org.eclipse.photran.internal.ui.refactoring Directory plugin.xml RemoveRealAndDoublePrecisionLoopCounterInputPage.java Messages.java Message.properties</description>
      <attachments/>
    </issue>
    <issue>
      <id>332589</id>
      <title>specify concurrency model for EMF data model</title>
      <description>The review data model will be accessed concurrently from different thread, e.g. when an update to a Gerrit review is received while review results are being displayed. Since EMF does not have any built-in mechanism to handle concurrent access the framework will need to specify a model, e.g. through EMF transactions, locking or a similar mechanism.</description>
      <attachments/>
    </issue>
    <issue>
      <id>332601</id>
      <title>Request for API addition to support remote service call authorization</title>
      <description>Build Identifier: ECF 3.4 In order to support remote service call authorization additional API would be needed on remote services: - Interface with method to be able to check authorization of remote service call, something like: public interface IRemoteServiceCallPolicy { public void checkRemoteCall(IRemoteServiceRegistration registration, IRemoteCall remoteCall, ID fromID) throws SecurityException; } - Method to set IRemoteServiceCallPolicy on IRemoteServiceContainerAdapter - [ECF generic] Adapt RegistrySharedObject to perform checkRemoteCall just before the remote service method call Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>332662</id>
      <title>Adopt new feature that allows to share the license file</title>
      <description>3.7 M4. Adopt new feature that allows to share the license file.</description>
      <attachments/>
    </issue>
    <issue>
      <id>332672</id>
      <title>Provide API to query the differences between branches</title>
      <description>Build Identifier: Currently there is no API to get the differences between two branches. Please provide an API to get the differences between two branches. As a workaround one can today create a fake merger that does not merge and access the differences from there: class FakeMerger implements CDOMerger { public CDOChangeSet target; public CDOChangeSet source; @Override public CDOChangeSetData merge(CDOChangeSet target, CDOChangeSet source) { this.target = target; this.source = source; // return null, and therefore do NOT do an actual merge return null; } }; FakeMerger fakemerger = new FakeMerger(); CDOTransaction mergetransaction = transaction.getSession().openTransaction(testbranch); mergetransaction.merge(mainbranch.getHead(), fakemerger); mergetransaction.rollback(); Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>332722</id>
      <title>add committers to Mylyn top-level project</title>
      <description>In order to maintain meta-data, releng and test bundles that are relevant to all Mylyn sub-projects we would like to add committers to the top-level project and move the existing /cvsroot/tools/org.eclipse.mylyn CVS project to /cvsroot/mylyn/org.eclipse.mylyn .</description>
      <attachments/>
    </issue>
    <issue>
      <id>332772</id>
      <title>Support problem filters for API Use Scan Task</title>
      <description>Build Identifier: The primary function of this scan is to report referenced API. However it also reports internal and illegal API references. But it doesn't allow specifying filter(s) as does the API Analysis task. Which is a problem in our headless builds as developers might set such filters in their IDE and get different results from what they will see in the automated builds API Use scans. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>332926</id>
      <title>Editing SMILA pipelines in BPEL Designer</title>
      <description>Build Identifier: The BPEL Designer (http://www.eclipse.org/bpel/) is an eclipse project that lets the user edit WS-BPEL 2.0 processes. This task adds support for SMILA specific enhancements (pipelets, services, ...) to the BPEL Designer. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>332962</id>
      <title>[console] Query Delegate Text Viewer for OCL</title>
      <description>Provide a query delegate text viewer implementation (and factory) which adapts the source viewer of the OCL interpreter (interactive console) example for use within the EMF Ecore data set editor.</description>
      <attachments/>
    </issue>
    <issue>
      <id>332970</id>
      <title>Host official mirrors at GitHub</title>
      <description>We should find a way for eclipse.org projects to have their code mirrored at GitHub. While GitHub doesn't support mirroring out of the box [1], it's still possible to do by pushing the repository on git.eclipse.org to a clone on GitHub via a cron job. I envision projects entering metadata in portal.eclipse.org that is required for the cronjob to properly mirror things at GitHub. [1] - http://support.github.com/discussions/repos/684-how-to-create-repository-in-mirror-mode</description>
      <attachments/>
    </issue>
    <issue>
      <id>332993</id>
      <title>Hardware breakpoint cannot be set from debug GUI</title>
      <description>Build Identifier: M20100211-1343 We can create a software breakpoint now, but hardware breakpoint is unsupported even though the back end of MIBreakpoint and CDIBreakpoint does support them. My suggestion is that we add a new IToggleBreakpointsTargetFactory that mimics ToggleCBreakpointsTargetFactory and ToggleBreakpointAdapter, but creates a hardware breakpoint instead of the regular ones (using CDIDebugModel.createLineBreakpoint, but using ICBreakpointType.HARDWARE instead). If you think this is a good suggestion, we can create a patch and contribute to Eclipse. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>333022</id>
      <title>[serializer] Serializer should be able to re-serialize resources with link errors</title>
      <description>If a resource has had a unresolved cross-ref when it was loaded, the serializer should be able to re-serialize that cross-ref using the node model information.</description>
      <attachments/>
    </issue>
    <issue>
      <id>333082</id>
      <title>[environment] DefaultOppositeEndFinder should cache instances per Registry</title>
      <description>Build Identifier: CVS Head as of 2010-12-22 Currently, there is one default instance for EPackage.Registry.INSTANCE. For other registries, new instances would have to be created each time. There should be a WeakHashMap-based cache that remembers DefaultOppositeEndFinder instances by the Registry for which they were created. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>333113</id>
      <title>Rebuild last target: option to use target from whole project</title>
      <description>Build Identifier: In #69922 a key binding for rebuilding the last make target was introduced. There is a preference option to either look for the last make target in the currently selected folder or in the project's root folder. When working with various build configurations (e.g. Debug and Release) it would be helpful to use the build location of the active build configuration to look for the last make target. Consider the following project structure: myproj -&gt;src src1.cpp -&gt;Debug Makefile -&gt;Release Makefile Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>333187</id>
      <title>[Dawn] Provide integration for Ecore Tools</title>
      <description>The Ecore Tools provide a nice set of tools to create ecore models. Currently they are focused on file system persistence. To allow provide a better integration with CDO tools should be CDOified using Dawn.</description>
      <attachments/>
    </issue>
    <issue>
      <id>333189</id>
      <title>Provide bundle install hook</title>
      <description>While changing Virgo to implement its region support in terms of framework hooks rather than composite bundles, the need for a bundle install hook has become apparent. There are two specific requirements. FAIL INSTALL REQUIREMENT When the framework property org.osgi.framework.bsnversion is set to "multiple" and multiple bundles are installed with a given bundle symbolic name and bundle version, a new location must be provided in order to create a new Bundle instance. If the same location is used, then the existing Bundle instance is returned, regardless of any filtering being performed by the bundle find hook. This has some downsides for scenarios in which the framework hooks are attempting to provide isolation between "regions" of a framework. A region in this context is simply a set of bundles. Consider an application running in a region R. Suppose a bundle B is installed with a given location in another region S. Suppose also that the bundle find hook filters out bundle B (in region S) from region R. Then the application cannot see bundle B when it lists all bundles. However, suppose the application installs bundle B using the same given location. The install succeeds and the existing Bundle the region S is returned. The application may then wrongly assume that B is available for use in region R. There are a couple of workarounds, but these require code in the application. The requirement on an install hook is to fail the install in cases like the one above. DETERMINE INSTALLING BUNDLE REQUIREMENT An install hook is necessary to determine the target region when a bundle is installed, particularly when this is outside the control of the region management code. For example, an application bundle running in the user region may use BundleContext.installBundle to create a bundle and it is important that the new bundle is installed in the same region as the application. The current techniques for determining which region to install a bundle into depend on region contents being static. The other alternatives race-prone, e.g. tagging a bundle as belonging to a particular region can race with the find hook. The install hook needs to be passed the bundle context of the "origin" bundle doing the install so the hook can determine into which region the bundle should be installed. SUGGESTED INTERFACE public interface BundleInstallHook { void event(Bundle origin, Bundle bundleBeingInstalled) throws BundleException; } package org.osgi.framework.hooks.bundle; import org.osgi.framework.Bundle; import org.osgi.framework.BundleContext; /** * OSGi Framework Bundle Context Hook Service. * * &lt;p&gt; * Bundles registering this service will be called during framework bundle install * operations. * * @ThreadSafe */ public interface InstallHook { /** * Install hook method. This method is called during the bundle install operation * (for example, {@link BundleContext#installBundle(String) installBundle}) before the * bundle is added to the framework's collection of bundles. * This method can fail the install operation. * * @param origin The bundle context of the bundle performing the install * operation. * @param bundleBeingInstalled the bundle being installed * @throws BundleException if the install is to be failed */ void install(BundleContext origin, Bundle bundleBeingInstalled) throws BundleException; } BUNDLE LIFECYCLE HOOK Although this enhancement is for a bundle install hook, it may be satisfied by a more general bundle lifecycle hook which could ultimately be standardised. OSGi Alliance members, please see OSGi bug 1839. Alternatively, a bundle install hook could be implemented first and then generalised and possibly standardised later. BUNDLE WATCHER The existing BundleWatcher hook does not satisfy the above requirements. The origin is not passed to the hook and the hook cannot fail the install.</description>
      <attachments/>
    </issue>
    <issue>
      <id>333428</id>
      <title>[content assist] Creating an anonymous inner class doesn't add a semicolon to enclosing method invocation</title>
      <description>Creating an anonymous inner class results in an system error. Example: Create a SWT Layout and add a button to it, e.g. via the following: Button button = new Button(parent, SWT.PUSH); now type button.addSelectionListener(new SelectionL and use Cntr+Space. JDT suggest to create the anonymous class for you. I you select the creation you end up with: --------- button.addSelectionListener(new SelectionListener() @Override public void widgetSelected(SelectionEvent e) { // TODO Auto-generated method stub } @Override public void widgetDefaultSelected(SelectionEvent e) { // TODO Auto-generated method stub }) ----- This results in a syntax error as the semicolumn is missing at the end of the statement.</description>
      <attachments/>
    </issue>
    <issue>
      <id>333553</id>
      <title>The user has not to deal with two files to create a facet</title>
      <description>Hello, It's too boring for the user to deal with two files to create a facet. We have to merge the query and facet metamodel. Regards, Gregoire Dupe</description>
      <attachments/>
    </issue>
    <issue>
      <id>333789</id>
      <title>Update to ASM 3.3.1</title>
      <description>Once Orbit contains the latest version of ASM, we should look at updating to it.</description>
      <attachments/>
    </issue>
    <issue>
      <id>333920</id>
      <title>document how to set up the Virgo kernel with Janino to allow for greater logback capabilities</title>
      <description>Build Identifier: 2.1.0.RELEASE Following up on bug #333582. In order to use logback filters of any kind, one has to 1. Supply the Janino libraries to the kernel by modifying lib/org.eclipse.virgo.kernel.launch.properties 2. Modify Virgo's medic-core bundle, via a fragment bundle, to import the Janino packages It would be very nice to not have to go through these customization steps. Logback filters aren't really "exotic", so adding these capabilities to Virgo seems like a worthy task. Reproducible: Always Steps to Reproduce: See bug #333582 for steps to reproduce.</description>
      <attachments/>
    </issue>
    <issue>
      <id>333930</id>
      <title>[api] provide ability to get notified of changes to task data and submits</title>
      <description>...so one can listen to submits without creation/initiating them.</description>
      <attachments/>
    </issue>
    <issue>
      <id>334000</id>
      <title>Simple catalog manager</title>
      <description>Hello, AbstractEmfFacetCatalog comes with too many risks of bugs. We then need to replace the AbstractEmfFacetCatalog by a simple catalog manager which use EMF to store/represent its state and which only uses an extension point to declare the catalog entries (no builder). Regards, Gregoire Dupe</description>
      <attachments/>
    </issue>
    <issue>
      <id>334016</id>
      <title>Contribution: plugin for sharing preferences among users</title>
      <description>Created attachment 186541 [details] source code and screenshots Hi All, At the last EclipseCon 2010 we (Ericsson) and some Eclipse.org committers had discussion around code that we would like to contribute to Eclipse.org as the committers had interest in the source code. We have received approval from Ericsson Corporate and the Patent agencies that we can contribute the code to open source. As for the details on the code, we have developed a plug-in which allows users to share and set preferences via a shared file and/or URL via the Eclipse Preferences (see screen_shot_1.jpg). You can set your preferences to be of type init or force. The type init set the preferences but allows you to change them. As for the type force, they cannot be changed. If you do change them, we have a GUI under the preferences that shows you how you differ from the group (see screen_shot_2.jpg). You can also use the Eclipse export to export parts of the preference setting as well (see screen_shot_3.jpg). We have attached the plug-in, feature, and screen shots in the preferences.zip. Feel free to arrange a meeting with all CCd parties and more if need at your convenience. BR, Emilio &amp; Domenic</description>
      <attachments/>
    </issue>
    <issue>
      <id>334445</id>
      <title>date bins for next week should indicate the day of the week</title>
      <description>Date bins for next week should indicate the day of the week. e.g. Jan 18, 2011 (Tuesday)</description>
      <attachments/>
    </issue>
    <issue>
      <id>334566</id>
      <title>[multicore][Pin&amp;Clone] Add support for icon overlay in the debug view</title>
      <description>Debug view should show icon overlay for pinned debug context.</description>
      <attachments/>
    </issue>
    <issue>
      <id>334747</id>
      <title>Need a way to inject an additional service into a stock dsf-gdb session</title>
      <description>Build Identifier: Helios SR1 I am trying to add a plugin that adds a new service/model/view to a standard DSF-GDB debugger. However, there is no way for a plugin to do this. This prevents me (and other third parties) from enhancing DSF functionality - something that I could do with CDI based debuggers. Note that https://bugs.eclipse.org/bugs/show_bug.cgi?id=326951 does not help, as this enables a custom debugger some added flexibility. I am not trying to add a custom debugger - just extend the existing one! Reproducible: Always Steps to Reproduce: Quote from John Cortell in the cdt-dev list: "Each specific DSF debugger implementation dictates which DSF services it will use. None of the stock DSF debuggers (dsf-gdb, edc) allow someone to inject an arbitrary service into the mix. Off the top of my head, I don't know why we couldn't make the debuggers discover (through an extension point) additional services to involve. I think that would solve your problem. You may want to take a crack at adding that support and contributing it." Sorry - I am not up to fixing this in the CDT sources.</description>
      <attachments/>
    </issue>
    <issue>
      <id>334962</id>
      <title>filter subtasks of tasks not matched by queries</title>
      <description>I have a subtask of a task that is matched by a query, but it's a subtask that doesn't concern me at all. I would like to be able say that I do not want to be notified of changes to this subtask.</description>
      <attachments/>
    </issue>
    <issue>
      <id>334967</id>
      <title>[navigator] create common navigator for review content</title>
      <description>Create a common navigator to browse the contents of the active code review.</description>
      <attachments/>
    </issue>
    <issue>
      <id>335003</id>
      <title>[Discoverer] : Existing Discoverers Refactoring based on new framework</title>
      <description>Here is an entry for a planned task in MoDisco Indigo roadmap : existing discoverers impelmentations (Java, JSP, XML, ...) must be refactored on the base of new Discovery Framework. Old implementations must go deprecated.</description>
      <attachments/>
    </issue>
    <issue>
      <id>335027</id>
      <title>[multicore] Visualizer View feature</title>
      <description>Build Identifier: This bug tracks the proposed "Visualizer View" feature being discussed by the Multicore Debug Working Group. The proposal is described here: http://wiki.eclipse.org/CDT/MultiCoreDebugWorkingGroup/VisualizerView Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>335278</id>
      <title>enhance search result handler to handle additional attributes</title>
      <description>When using the @BugzillaClient@ it's possible to add columns to the search results by passing the desired columns in the columnlist parameter. Some of these are correctly mapped to BugzillaAttribute, however others are not. @SaxBugzillaQueryContentHandler@ should be modified to handle the following mappings: reporter_realname assigned_to_realname</description>
      <attachments/>
    </issue>
    <issue>
      <id>335280</id>
      <title>Add Ant task for generating Eclipse Help from a Confluence wiki similar to "mediawiki-to-eclipse-help"</title>
      <description>The "mediawiki-to-eclipse-help" Ant task is used to generate files for Eclipse Help directly from a MediaWiki instance. It supports multiple source pages, cross-page hyperlinks, template expansion and downloading of images that appear on the pages. A similar feature, converting Confluence wiki pages to Eclipse help could be useful for Confluence users. This should have the same basic features as "mediawiki-to-eclipse-help". My customer, Marintek is working on such a feature and would like to share it under the EPL license. As soon as it's ready I'll add a patch here.</description>
      <attachments/>
    </issue>
    <issue>
      <id>335653</id>
      <title>Optimize unit tests w.r.t. store setup/teardown</title>
      <description>Currently we construct a clean store for every unit test, and tear it down after every test. Especially when using a DB store, this makes execution of the entire test suite pretty slow. Personally, I find this a serious nuisance. Most of the setup/teardown work is unnecessary for most testcases, because they re-use the same test packages, which means the same tables. I think if we (me?) spend a bit of time on this, there should be ways of drastically reducing the setup/teardown overhead. A few ideas: - Having tests declare whether they need a clean store or not, e.g. boolean AbstractCDOTest.needsCleanStore(), or more finegrained control, like mustDropData(), mustDropPackages(). - Generating unique resource names in tests, instead of using hardcoded "/res1" in pretty much every test. This would isolate the test resource contents. Just brainstorming..</description>
      <attachments/>
    </issue>
    <issue>
      <id>335790</id>
      <title>[api] support user defined categories in Team Repositories view</title>
      <description>The repositories are grouped in the categories "Tasks", "Bugs", "Other" in Task Repositories View. I would locate my plugin's repositories in another category.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336116</id>
      <title>[client] Git client in Orion</title>
      <description>If we want to self host with Orion, we need to change the way of working with Git repos. The idea of working with Git repos like local file systems is wrong. Especially for a Git user, who knows how to use Git. Moreover doing Git Add, Commit and Push during 'Save' operation does not perform well and does not look good, especially if you look at the commits' history. Ideally, Git commands should be available in Orion toolbars, menus etc. Users should be able to perform commit and push and other Git operations in the navigator. Since we want something quickly, Boris suggested to add a Git command shell that supports the following set of commands: git config (or some other way to set user.name and user.email) git clone &lt;URL&gt; (open question: what about non-public repositories?) git status git checkout git tag (for tagging) git remote (for listing and adding remotes) git fetch git merge git pull git push (also: git push --tags) I think that the set may be smaller. For instance we don't need 'git config' to set user.name and email. We could do it via the user profile. 'git clone' does not have to be called explicitly too. We can just create a top-level folder and link it to a repo what would clone the repo automatically. If we agree to start from simple Git shell, I'll raise separate bugs for server API and UI. I think that APi for Git should be some kind of an extension to our existing file API. If you have other ideas, let's discuss it here.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336159</id>
      <title>user can see catalog branding in MPC wizard</title>
      <description>It should be possible for the markets to brand the MPC in different ways (eg. banner area, naming of the wizard, ...)</description>
      <attachments/>
    </issue>
    <issue>
      <id>336255</id>
      <title>Feature Request: Prepare ChangeLog for git</title>
      <description>Build Identifier: I'm currently using "moap changelog prepare" to create ChangeLog entries while using git but I'd like to stay in Eclipse for this. Moap creates entries for any file that is staged to be committed in the git repository and I think that's the right way to do it. The alternative would be to add every file has been changed (staged or not) but I don't think that would be the correct behaviour. Thanks. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>336414</id>
      <title>[DB] Make the used CDOIDObject subtype and storage pluggable</title>
      <description>The DBStore hardcodes long-valued CDOIDs everywhere. Make this configurable. This would also be needed for UUIDs.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336591</id>
      <title>Make the logging configuration dynamic so it's possible to change the config at runtime w/o restarting Virgo</title>
      <description>Build Identifier: According to the logback documentation at [1] and [2] it is possible to change the configuration at runtime. Maybe it would be nice to have a feature to be able to change the logging configuration at runtime w/o the need to restart Virgo. However I did some tests with Equinox and [1] in the past and found it quite unreliable. Most of the time it either didn't recognize any changes within the defined interval or it didn't recognize changes at all. Even worse once there was an error in the configuration it completely stopped logging without throwing an exception. Therefore I switched to [2] which worked perfectly fine for me. Another thought that came to my mind is the following: If I'm not mistaken there will be multiple atomic (user) regions available in the next Virgo release (please correct me if I'm wrong). I wonder if it would be possible to have different (dynamic) logging configurations for each of these regions. [1] http://logback.qos.ch/manual/configuration.html#autoScan [2] http://logback.qos.ch/manual/configuration.html#joranDirectly Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>336707</id>
      <title>Modify GMF Notation metamodel to not depend on Ecore</title>
      <description>We could modify the GMF Notation metamodel to not depend on Ecore. We could do this and keep the compatibility with previous diagram files versions by copying the EAnnotation EMF implementation and keeping the eAnnotations feature name.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336734</id>
      <title>[content type] Charset of html files should be derived from content</title>
      <description>Most html files declare their encoding in a meta header like this: &lt;meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/&gt; This encoding often differs from the source file encoding set on project or workspace level. Typical examples are about.html or package.html files in Eclipse projects with charset=ISO-8859-1", when the Java code in the projects is encoded in UTF-8. Currently, the encoding of all *.html files seem to be inherited from container. It would be great if it could be derived from the content.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336749</id>
      <title>TransportGitSsh.setConnectionFactory</title>
      <description>We would like to reuse the Jsch session we already have, but keep it encapsulated and thus not pass it to JGit. Thus it would be nice if TransportGitSsh had a setConnectionFactory method and newConnection would use that factory to create a connection if a factory is available. The connection factory should return a class extending TransportGitSsh.Connection. Thus this class would have to be made public.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336806</id>
      <title>Enhance CDO Offline example</title>
      <description>The purpose for this request is to enhance the existing offline example. Currently the examples is written in one file containing different inner classes. This setup should be more separated as a base for an user interface which is connected to this example.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336818</id>
      <title>[BlackBoard] revise API/impl to behave the same independent of the impl/config</title>
      <description>the current API and implementations of the Blackboard have some code smell IMO and i think we shoould revise it. this issue servers to track the discussion and points regarding this. the behavior of getRecord() depends not only on the impl but also the config of the PersitingBlackboard. i have updated the Javadocs regarding this and will check this in at some point in time but really think we should really see that the general behavior is the same. there is also some naming (e.g. create -&gt; createRecord) that i would change and also create and load should return the record.</description>
      <attachments/>
    </issue>
    <issue>
      <id>336876</id>
      <title>[multicore] Grouping of Execution Elements for DSF debugger feature</title>
      <description>Build Identifier: Here is the minimal set of feature I am proposing: - Create two actions Group and Ungroup similar to the reverse debugging actions. - The action will be enabled if the DSF debugger supports it. To be defined service that specify if a DSF debugger supports user groping or not. As part of bug 240208 such interface is being proposed (IExecutionContextTranslator TBD). - When the user selects multiple threads or groups it can create new group that will be the parent of the selected threads or groups. - No group support on the back end yet. - Groups can also be grouped in a new group. - The newly created group will be directly under the process node. - The process cannot be grouped. - All newly created threads will be added to the process node. - Group can be empty. - Calling ungroup on a single group will remove the group – all its children will become children of the process. - Make sure expansion happens if thread belongs to a group (it should - the patch for 240208 tests for that). Next steps: - Groups can be a on the back end as well ( somehow defined by policy). - Some kind of persistency so next launch will keep the groups. We need to define an identity of execution contexts between debug sessions. - Execution control on a group will send the commands to its children or not (depend on some kind of debugger policy). - If groups exists on the back end, there can be different policies ( issue the step/run/halt can go to children of the group or the groups if it exists on the backend. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>336916</id>
      <title>Integrate JPA Editor in the PDE Build</title>
      <description>The JPA Editor is now moved in CVS from the Incubator module to the org.eclipse.jpa module. Then next steps is to integrate it in the PDE Build. So far, Stefan added a new map file in the releng.dali project. This is the jpaeditor.map. Inside he declared the feature, the plugin and the test plugin. How do we proceed as a next step?</description>
      <attachments/>
    </issue>
    <issue>
      <id>337016</id>
      <title>[operations] Simplify operation API to cater for self case</title>
      <description>Created attachment 188826 [details] simplified API This bug is created to continue the discussion http://dev.eclipse.org/mhonarc/lists/p2-dev/msg03812.html that talks about simplifying the operations API for the 90% case of installing / uninstalling and updating the self profile. Attached is an attempt at a simplification for the install operation. Questions: - What should the update do? - Do we really need soemthing like getInstalledRoots(), can't ppl just query? This one annoys me because this seems like a never ending source of expension for things like all the IUs that are blue, all the features, all the bundles. In this case I'm tempted to expose IQuery and point the user at the helpers in QueryHelper.</description>
      <attachments/>
    </issue>
    <issue>
      <id>337022</id>
      <title>[repository] Repository update policy</title>
      <description>Tycho uses p2 to calculate project build target platform. Currently, each time I (re)run the build, p2 contacts all remote metadata and artifact repositories to see if new repository metadata became available. This takes time and becomes particularly annoying when the same project needs to be rebuilt again and again when troubleshooting test failures, for example. Since remote repository contents is unlikely to change, at least not frequently, it would be beneficial if p2 provided API to configure repository update policy, similar to what is available in Maven, i.e. "never", "daily", "always".</description>
      <attachments/>
    </issue>
    <issue>
      <id>337037</id>
      <title>CS: Distributed ManyToOne Enterprise Application Example using EclipseLink JPA as the shared persistence layer</title>
      <description></description>
      <attachments/>
    </issue>
    <issue>
      <id>337068</id>
      <title>Please set up maven.eclipse.org</title>
      <description>Build Identifier: 1. To help implement Bug 283745, please create the DNS entry for "maven.eclipse.org". 2. Get in contact with Pascal Rapicault (see comment #186 of Bug 283745) for a license of Nexus Pro. 3. Install Nexus Pro and create admin users for Dave Carver (Comment #187) and Alex Blewitt (comment #188) so they can create repositories, add users and upload artifacts. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>337152</id>
      <title>[Mongo] Create a MongoDBStore</title>
      <description>Must have ========= * Base functionality * Flexibility is not a priority * Long IDs are fine * No need for connection pooling. * Auditing * Commit Infos Nice to have ============ * Automatic crash repair * Query Handler * Branching (Lower priority than auditing, can be deferred)</description>
      <attachments/>
    </issue>
    <issue>
      <id>337245</id>
      <title>Update to Bugzilla 4.0</title>
      <description>Bugzilla 3.2.x has reached End Of Life (EOL) and is now unsupported. I'm sure the other release will eventually follow. We should update to the newly released 4.0 when we have time. http://www.bugzilla.org/releases/4.0/release-notes.html#v40_feat Looks like it has some new features that could benefit our community when filing bugs. We'd also have to check if Mylyn would work against 4.0 and all that good stuff.</description>
      <attachments/>
    </issue>
    <issue>
      <id>337323</id>
      <title>Multi-tenant with shared schema support</title>
      <description>Provide a way to allow multiple application tenants to share the same schema using tenant identifying column(s).</description>
      <attachments/>
    </issue>
    <issue>
      <id>337408</id>
      <title>Add an action to sort columns by name</title>
      <description>It could be useful provide a "Sort by Name" action to manage the columns order.</description>
      <attachments/>
    </issue>
    <issue>
      <id>337446</id>
      <title>Text search should handle out-of-sync resources</title>
      <description>Created attachment 189189 [details] fix 1 Text search pops up a modal error dialog for out-of-sync resources. Changes in bug 303517 will mean the workspace responds more proactively to such resources. This attached patch lets Text Search handle out-of-sync resources gracefully. (Note other changes such as: deleted on filesystem, gender change is still reported as before.) Existing Text Search tests pass.</description>
      <attachments/>
    </issue>
    <issue>
      <id>337588</id>
      <title>[EditorMgmt] Editor should have "Close Tabs To The Right"</title>
      <description>Build Identifier: 3.0.0.201102151705 In addition to "Close" / "Close Others" / "Close All", there should be a "Close Tabs To The Right". It should behave like Chrome. Why? It is a pretty good timesaver in Chrome. Often you dont want to close all your tabs, you just want to close a few. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>337867</id>
      <title>[client] Add an extension point for file commands</title>
      <description>We need some extra commands for GIT support (add, commit, pull, push etc) and since on Bug 336188 John is working on moving file service to Orion plugin we were planning to do the same with GIT service. Since GIT support would be optional (not every Orion will be required to support GIT) it's natural that we could create an Orion plugin to extend the commands for navigation toolbar and navigation table. eclipse.Command will be quite easy to describe in a plugin: we would need tree function 1. info(): returning a JSON containing information for each command (name, image, id, tooltip) 2. sheduleCallback(commandId, item): this would be called on eclipse.Command.callback 3. visibleWhen(commandId, item): this would be called on eclipse.Command.visibleWhen</description>
      <attachments/>
    </issue>
    <issue>
      <id>337870</id>
      <title>Provide durable locking</title>
      <description>Build Identifier: CDO 4.0.0 Client side 1. CDO shall provide a way to maintain locked (read / write) objects even if the CDOView is closed. These locks are considered as "long lasting locks" or "permanent locks". 2. CDO shall provide a way to resume a CDOView and retrieve the previous "long lasting locks" in order to release them implicitely through a commit or rollback or explicitely through unlockObjects. Client or server side 3. CDO shall provide a way to release "long lasting locks" from an "administration" operation. An API is needed (from client or server side?) to implement such a service in an administration tool. 4. CDO shall provide a way to identify long lasting locks vs. standard locks easily to help the implementation of the administration tool. What about a boolean attribute on Lock meaning long lasting? Use cases highlighting these needs Use case 1 An end-user locks some objects before disconnecting from the repository to work offline. He wants to avoid other end-users to modify the objects in the meanwhile (the ones he locks). When he will come back either he will commit its changes and release the long lasting locks or he will simply release its locks. Use case 2 An end-user Foo locks some objects and goes offline and never reconnects. Hence, the administration user, from an administration tool (running as client or on server side?), has to release the pending long lasting locks held by the end-user Foo. Reproducible: Always Steps to Reproduce: See details.</description>
      <attachments/>
    </issue>
    <issue>
      <id>337930</id>
      <title>[feature] Validation and content assist for Named Queries in Java source</title>
      <description>Dali should provide validation and content assist for NamedQueries. Validation and content assist should first focus on the Java source. This bug will track work focused on this area, while future bugs will address validation in XML source, and then content assist and validation in the JPA Details view.</description>
      <attachments/>
    </issue>
    <issue>
      <id>337977</id>
      <title>[quick fix] Add quick fixes for null annotations</title>
      <description>As work on my prototype re bug 186342 makes progress, quickfixes become more and more important. The prototype already contains an initial implementation of four distinct quickfixes, as described in http://wiki.eclipse.org/JDT_Core/Null_Analysis#Cleaning_up At this point I have some questions regarding the implementation: 1) I noticed that some cross-compilation-unit quickfixes only work if the affected unit is open in an editor. Debugging the case where the unit is not open I see the text change created correctly and applied to the document but it has no visible effect. I took inspiration from classes like UnresolvedElementsSubProcessor where ASTResolving.findCompilationUnitForBinding(..) is used to find the targetCU. Am I missing anything relating to buffers/working copies etc. to ensure the operation has an effect? The relevant part of my code can be found at: svn://dev.eclipse.org/svnroot/tools/org.eclipse.objectteams/trunk/plugins/org.eclipse.objectteams.jdt.nullity/src/org/eclipse/objectteams/internal/jdt/nullity/quickfix/RewriteOperations.java Look for method findCUForMethod(..) and its applications, especially the first one. 2) When providing these fixes as MultiFixes I would like to do some more checks only when creating the change. At that point I may detect that the fix should not be applied (because an explicit conflicting annotation already exists). Performing this check earlier would be (too?) expensive. But when I don't create a change in the rewrite I see the following exception: org.eclipse.core.runtime.CoreException: The fix 'Declare method parameter as @Nullable' generated a null change. at org.eclipse.jdt.internal.corext.fix.CompilationUnitRewriteOperationsFix.createChange(CompilationUnitRewriteOperationsFix.java:105) Is there any recommended trick for late checks to veto performing a change? I'd be happy to take comments regarding these proposed quickfixes and perhaps ideas for more fixes yet to come. Playing with these quickfixes on real code makes me wish that eventually a wizard would exist similar to the infer generics wizard. But for now I'm content with individual quickfixes, given they can be used as MultiFixes. In my experiments when I applied @NonNullByDefault to the package org.eclipse.jdt.internal.compiler.lookup the quickfixes let me reduce the numbers of errors/warnings from 346/1045 to 89/809. Up-to this point applying the quickfixes was mostly a no-brainer. In order to continue the cleanup from here on knowledge about design intent is needed, but still quickfixes can help a lot.</description>
      <attachments/>
    </issue>
    <issue>
      <id>337999</id>
      <title>Undo mark as read command</title>
      <description>If you accidently mark a query or date bin as read, you have no easy way to find out what had changed. If you mark the incoming bin as read, it empties and then there's no way of finding out what was there, short of examining every task in your task list. There should be an "undo mark as read" command.</description>
      <attachments/>
    </issue>
    <issue>
      <id>338006</id>
      <title>IJavaProject#getPackageFragmentRoots() should return roots in order</title>
      <description>HEAD IJavaProject#getPackageFragmentRoots() and #getChildren() should return the roots in the order they are defined by the classpath. IJavaProject#getAllPackageFragmentRoots() already returns them in the expected order, and it's confusing that #getPackageFragmentRoots() and #getChildren() are not sorted even though a natural order exists. In practice, the elements are often sorted as expected. That's probably why we never got bugs for this. In the Package Explorer, the wrong ordering shows up when you check out org.eclipse.jdt.ui from CVS and then quickly expand the Java project node and watch source folders trickle in. We use JavaElementComparator to sort the elements, and if you set a breakpoint in #getClassPathIndex(..), you can see the unexpected ordering. I could probably fix the UI problem by using getAllPackageFragmentRoots(), but I think that would have performance impacts (#getChildren() seems to cached), and I guess we have other places where we expect the right order.</description>
      <attachments/>
    </issue>
    <issue>
      <id>338182</id>
      <title>It should be possible to attach source during OSGI debugging</title>
      <description>Currently an infamous Source Not Found editor appears, which also says: The JAR of this class file belongs to container 'Plug-in Dependencies' which does not allow modification to source attachnments on its entries. Stopping debug session, attaching sources and restoring the work may take a really long time.</description>
      <attachments/>
    </issue>
    <issue>
      <id>338264</id>
      <title>[release] plan Mylyn 3.6 release</title>
      <description>http://www.eclipse.org/projects/project-plan.php?projectid=tools.mylyn</description>
      <attachments/>
    </issue>
    <issue>
      <id>338396</id>
      <title>Notify clients about changes in the dangling state of objects</title>
      <description>Consider an object X, and an object Y that could have a non-containment ref to X, but does not have it yet. Both objects are persisted. Detach X locally, but don't commit this change yet. In a different session, create a new non-containment reference from Y to X, and commit this. Call refresh in the first session. Result: Y in session one is updated to reference X, but in that session X is a detached object. In short: dangling reference. Testcase in a minute.</description>
      <attachments/>
    </issue>
    <issue>
      <id>338409</id>
      <title>use b3 as a mirroring application</title>
      <description>Hi, i am using B3 to aggregate p2 updates sites and it is working very great, so thank you for this great tool. I was wondering if this is possible to use b3 like a mirroring application. given a number of p2 repository, i would like to have the contents automatically mirrored. in fact, i am using p2.mirror Ant task, and would like to have similar using b3. it it possible now ? can it be reasonable to implement this ? Cheers,</description>
      <attachments/>
    </issue>
    <issue>
      <id>338478</id>
      <title>[api] provide UI connector interface</title>
      <description>Provide extension points for UI connector definitions, this in order to allow custom wizards so the user can select the focus of a change set. i.e. a change set based compare wizards.</description>
      <attachments/>
    </issue>
    <issue>
      <id>338525</id>
      <title>RegionFilter generalisation</title>
      <description>Tom Watson wrote in https://bugs.eclipse.org/bugs/show_bug.cgi?id=338113#c1: &gt; Take this all with a grain of salt, but I have some suggestions for &gt; RegionFilter. &gt; &gt; In my opinion the filter of resources should be a generic as possible. Right &gt; now RegionFilter splits shared resources into three categories. &gt; &gt; - allowed bundles &gt; - java packages &gt; - osgi services &gt; &gt; It may be better to use the namespace approach used by OSGi for the generic &gt; requirements/capabilities. &gt; &gt; For example, there are three built-in namespaces in osgi &gt; &gt; osgi.wiring.package - to represent java package capabilities/requirements &gt; &gt; osgi.wiring.bundle - to represent bundle capability/requirement for resolving &gt; Require-Bundle &gt; &gt; osgi.wiring.host - to represent host capability/requirement for resolving &gt; Fragment-Host &gt; &gt; OSGi leaves all other namespaces that are not prepended by osgi.* to be generic &gt; capabilities/requirements as specified by the Provide-Capability and &gt; Require-Capability headers. &gt; &gt; What you could do is define your own namespace constants for sharing services &gt; and allowing bundles across regions. Something like this: &gt; &gt; virgo.allow.bundle - namespace for allowing bundles into a region &gt; virgo.allow.service - namespace for allowing services into a region &gt; &gt; Then you could replace the the six methods on RegionFilter with this: &gt; &gt; public void setPolicy(String namespace, Filter policy); &gt; public Filter getPolicy(String namespace); &gt; &gt; Where the Map uses the namespace as the key (e.g. osgi.wiring.package etc.) and &gt; the value is the Filter for matching the shared resource. &gt; &gt; The virgo.allow.service namespace would be used by the service hooks to call &gt; Filter.match(ServiceReference) method, much like I imagine you do today. &gt; &gt; Filter filter = regionFilter.getPolicy("virgo.allow.service"); &gt; boolean allow = &gt; filter == null ? false : filter.match(serviceReference); &gt; &gt; &gt; In the resolver hook you would call something like this: &gt; &gt; Filter filter = regionFilter.getPolicy(BundleCapability.getNamespace()); &gt; boolean allow = &gt; filter == null ? false : filter.matches(BundleCapability.getAttributes()); &gt; &gt; The tricky part is the virgo.allow.bundle namespace for bundle hooks. Here you &gt; would have to create a Map to hold the BSN and version &gt; &gt; Filter filter = regionFilter.getPolicy("virgo.allow.bundle"); &gt; Map&lt;String, Object&gt; bundleAttrs = new HashMap(); &gt; bundleAttrs.put("bundle-symbolic-name", bundle.getSymbolicName()); &gt; bundleAttrs.put("bundle-version", bundle.getVersion()); &gt; boolean allow = &gt; filter == null ? false : filter.matches(bundleAttrs); &gt; &gt; Perhaps that would pose a performance issue and you could decide to keep the &gt; allowBundle and isBundleAllowed methods on RegionFilter.</description>
      <attachments/>
    </issue>
    <issue>
      <id>338544</id>
      <title>Use Equinox PlatformFilter to prevent RAP installed into the IDE</title>
      <description>We should consider using Eclipse PlatformFilter headers [1] to prevent problems with RAP installed into the IDE (bug 276000). The current solution of adding a fake dependency to "A.PDE.Target.Platform", as suggested in bug 276000, has the disadvantage to prevent adding dependencies to our feature, which in turn blocks bug 338528. I suggest that we define a new windowing system, e.g. osgi.ws=rap. The affected RAP bundles whould declare a platform filter in their bundle manifest and thus they would never be activated on the desktop anymore. The RAP target platform would have to define this new osgi.ws property. We already did some experiments and found that this approach works well. Compared to p2-based solutions (such as bug 306709, comment 10+), this it would eliminate our problems entirely and reliably. I think that the concept of platform filters is a good fit because RAP can be thought of as a windowing system of its own. [1] http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.platform.doc.isv/reference/misc/bundle_manifest.html</description>
      <attachments/>
    </issue>
    <issue>
      <id>338553</id>
      <title>LLVM toolchain support</title>
      <description>Build Identifier: 20100617-1415 This enhancement provides LLVM toolchain support for Eclipse CDT. Compiles C/C++ program code with LLVM front-end compilers using LLVM as a backend. Takes advantage of LLVM e.g. faster compile time. Makes C/C++ developers more eager to take advantage of Eclipse CDT. LLVM tools included in the plugin: assembler, archiver, linker, front-ends Clang, llvm-gcc, llvm static linker and JIT. CDT Internal builder and GNU make builder work in co-operation with LLVM toolchain. Plugin has an user interface for LLVM specific configuration (e.g. adding include and library paths and library files). Project website: https://code.google.com/p/llvm4eclipsecdt/ Mailing list: http://groups.google.com/group/llvm4eclipsecdt Instructions how to develop and use the plug-in: https://code.google.com/p/llvm4eclipsecdt/w/list Note: Currently builds C and C++ projects on Linux and C projects on Windows. Building C++ projects on Windows is on the way. Support for Mac OS X is included but no testing has been done. LLVM static linker and JIT doesn't show up on new project wizard yet. Known issues are fairly well documented here: https://code.google.com/p/llvm4eclipsecdt/issues/list Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>338726</id>
      <title>manage MPC participation in Indigo</title>
      <description>The MPC contribution for Indigo needs to be updated following the Indigo milestone schedule. http://wiki.eclipse.org/Indigo</description>
      <attachments/>
    </issue>
    <issue>
      <id>338997</id>
      <title>Enable the Connectivity runtime framework to run on OSGi-less platform</title>
      <description>The Connectivity runtime framework currently requires OSGi framework services for its operation. This enhancement calls for enabling support to run on OSGi-less platform, if needed, such as in a J2EE application without OSGi.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339036</id>
      <title>Create an Indigo wallpaper</title>
      <description>Build Identifier: I would love to see an Indigo wallpaper to grace my desktop at EclipseCon. I am still having the Helios one :-) This issue is a sort of duplicate of last year's Bug 312811 Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>339061</id>
      <title>Remove PDE restriction regarding jars located outside of workspace</title>
      <description>Created attachment 190523 [details] Fix proposition Currently PDE explicitely ignores external jars from JDT model. This is a little bit inflexible, as people expect more freedom in bundle composition during development time.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339364</id>
      <title>Toggle Function Definition Refactoring</title>
      <description>The Toggle Function Definition Refactoring moves a function definition from the class definition out of the class definition and into the implementation file.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339445</id>
      <title>expose download information gathered from connector discover</title>
      <description>Cloned from: 337227: [api] add a download counter URL to the connector discovery https://bugs.eclipse.org/bugs/show_bug.cgi?id=337227 For the MantisBT connector I would be interested in the download statistics related to the connector discovery. If needed, I can provide my own entry point for recording installations of the connector.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339448</id>
      <title>query dialog should resize when sections are expanded</title>
      <description>When a section is expanded on the query page and the size of the dialog is not sufficient to show all controls without a scroll bar the dialog should be resized so that entire page is visible without a scroll bar.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339470</id>
      <title>move flags to subsection</title>
      <description>Some repositories define many flags which can make the attributes section very long. It's also not easy to determine which flags are actually set. To improve I suggest that flags are moved to a sub-section of Attributes named "Flags" that is collapsed by default. The section client are should show all configured flags similar to how the product / component is shown in the title of th eAttributes section.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339596</id>
      <title>Extension:  XPath Mapping with Predicates</title>
      <description>This extension will allow the following XML document: &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;customer&gt; &lt;name type="FIRST"&gt;Jane&lt;/name&gt; &lt;name type="LAST"&gt;Doe&lt;/name&gt; &lt;address type="BILLING"/&gt; &lt;address type="SHIPPING"/&gt; &lt;/customer&gt; To be mapped to the following class: package conditional; import javax.xml.bind.annotation.XmlAccessType; import javax.xml.bind.annotation.XmlAccessorType; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlType; import org.eclipse.persistence.oxm.annotations.XmlPath; @XmlRootElement @XmlType(propOrder={"firstName", "lastName", "billingAddress", "shippingAddress"}) @XmlAccessorType(XmlAccessType.FIELD) public class Customer { @XmlPath("name[@type=FIRST]/text()") private String firstName; @XmlPath("name[@type=LAST]/text()") private String lastName; @XmlPath("address[@type=BILLING]") private Address billingAddress; @XmlPath("address[@type=SHIPPING]") private Address shippingAddress; } This is through adding support for predicates (the part between the square brackets) to MOXy's XPath based mapping.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339763</id>
      <title>Import --launcher.XXMaxPermSize argument to default vm arguments list</title>
      <description>In the past we increased PermGen size for the default Eclipse SDK configuration to 256Mb (see "--launcher.XXMaxPermSize 256m" in the config.ini). Those increased PermGen settings are not propagated into Run/Debug configurations unless manually specified in the VM arguments list. As an example of a practical consequence, running Platform UI JUnit tests on Windows 64 bit stack results in "Out of PermGen memory" error about half the time.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339795</id>
      <title>[checker] Checker that finds class members that are not initialized in constructor</title>
      <description>Code examples. The simplest case: struct C { C() {} int v; // &lt;-- Variable "v" is not initialized in constructor. It may cause to random behavior in functions that will read it. } More complex cases: struct C { C() : v1 (0) { v2 = 0; } int v1; // OK: Variable may be initialized in initialization list int v2; // OK: Variable may be initialized in constructor body int v3; // Warning: v3 is not initialized! std::string s; // OK: Variables of complex types (classes &amp; structs) may be no initialized } Of course more complicated cases are possible (e.g. initialization of variable by pointer or reference in another member function that is called from constructor) but it seems complex example above covers the most common used cases. Note: The similar checker exists in cppcheck tool (http://sourceforge.net/projects/cppcheck/).</description>
      <attachments/>
    </issue>
    <issue>
      <id>339883</id>
      <title>Need Buckminster 3.7 Builders</title>
      <description>Our Hudson currently have two Buckminster builders: Headless Buckminster 3.6 This is the "stable" install. Buckminster 3.6 Integration This one will automatically update itself to the latest features prior to building. The Eclipse platform has now reached 3.7M6 and some new nice features like "shared licenses" has been implemented. Buckminster now has support for the new 3.7 features and we therefore need two new Buckminster builders so that other projects can use it. The new builders should be more or less copies of the old ones, appointing directories where 3.6 has been swapped for 3.7, with the names: Buckminster 3.7 Buckminster 3.7 integration I see no point in having the term 'Headless' in the name since it's misleading.</description>
      <attachments/>
    </issue>
    <issue>
      <id>339915</id>
      <title>Create a Eclipse Parent POM</title>
      <description>For projects that use Maven (Tycho in particular) at Eclipse, it would be beneficial to have a standard parent POM. The POM would provide a base configuration that would be useful for projects that build on the eclipse.org infrastructure. As an example, this is what Apache has: http://svn.apache.org/repos/asf/maven/pom/tags/maven-parent-9/pom.xml We would need to discuss what type of plug-ins should be included by default, amongst other things. We should also figure out how to update the parent POM without being too disruptive. Do we take the apache approach and simply increment a version number while keeping the old POMs around? It would be great to hear what people think who are more experienced in Maven.</description>
      <attachments/>
    </issue>
    <issue>
      <id>340036</id>
      <title>Provide a maven integration plugin</title>
      <description>To work well with maven, Acceleo should provide a maven integration plugin which will trigger the use of the Acceleo compiler. I am not a maven expert so technical solution may change, but goal is to integrate smoothly with maven.</description>
      <attachments/>
    </issue>
    <issue>
      <id>340108</id>
      <title>Provide an SSL transport implementation for Net4J</title>
      <description>Build Identifier: 0 See summary. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>340167</id>
      <title>Add JUnit 4.8.2 to Orbit</title>
      <description>CQ for JDT project: https://dev.eclipse.org/ipzilla/show_bug.cgi?id=4898 JDT bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=336740 JUnit downloads (take 4.8.2, not the 4.9 beta): https://github.com/KentBeck/junit/downloads</description>
      <attachments/>
    </issue>
    <issue>
      <id>340501</id>
      <title>Apply patch needs to accept standard git format</title>
      <description>Hi, As a core developper of drupal, the big cms I can proudly say we moved from CVS to git. And we are so happy eclipse gives us the awsome EGIT tool to hack our way through core like we always did. BUT (now comes the scary part) Apparantly the drupal infrastructure/git guys decided to support only the GIT format for their patches. This means that I can't apply new made patches (with the a and b style in it) to my eclipse projects (== disaster). As we have a big community with lots of contributors using eclipse this is kinda crucial. And you must admit you prefer happy user above sad ones. Don't ya? ;) So could someone of the team *please please please please* (did I say please?) put some effort in supporting the standard git format for applying patches. Hopefully we will still be friends in the future ;) Bram Goffings a.k.a. aspilicious WE ALL LOVE YOU</description>
      <attachments/>
    </issue>
    <issue>
      <id>340507</id>
      <title>File encoding configuration.</title>
      <description>Build Identifier: When the encoding configuration is set in the maven-compiler-plugin, the eclipse project properties for encoding should reflect this setting. This is not the case, sources level and target are used but not the encoding. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>340546</id>
      <title>It should be possible to use fragments classes during development time</title>
      <description>Fragments exports are generally ignored during plugin development, unless the hosting plugin has the eclipse extensible api entry in the header. This does not apply to OSGi plugins. During runtime they will be merged anyway with the host plugins. I'd like to see a preference in the PluginDevelopmentPage property page, where you could define if a particular plugin/bundle should or should not include the contents of the fragment during development time.</description>
      <attachments/>
    </issue>
    <issue>
      <id>340563</id>
      <title>[Help][Search] Update Lucene 2.9.1 to the latest version</title>
      <description>In Eclipse 3.7 M3 Apache Lucene has been updated to 2.9.1 (see bug 248986) which was the latest version at this point in time. With this update indexing is now much faster. Meanwhile the latest version is 2.9.4 which brings 54 bug fixes and 7 optimizations compared to 2.9.1 (see http://lucene.apache.org/java/2_9_4/changes/Changes.html): - Release 2.9.4 [2010-12-03]: 24 bug fixes, 2 optimizations - Release 2.9.3 [2010-06-18]: 19 bug fixes, 3 optimizations - Release 2.9.2 [2010-02-26]: 11 bug fixes, 2 optimizations To benefit from the latest greatest Lucene version please update Apache Lucene from 2.9.1 to 2.9.4 before Eclipse 3.7 will be released. Please note, the latest version in Orbit is 2.9.1.</description>
      <attachments/>
    </issue>
    <issue>
      <id>340681</id>
      <title>Facet column implementation</title>
      <description>Hi, It would be an interesting feature for the EMF Facet table to be able to display FacetReference and FacetAttribute on some elements. We could chose which facets we want to apply on the table, then one column would be added to the table for each FacetReference or FacetAttribute Regards, Nicolas Guyomar</description>
      <attachments/>
    </issue>
    <issue>
      <id>340697</id>
      <title>[multi-process] Auto attach to processes forked by the process being debugged</title>
      <description>Some programs, e.g. Chromium web browser, span a large number of processes that typically have to be debugged together. It would be convenient to have an option to automatically attach debugger to all processes spawned by the process being debugged.</description>
      <attachments/>
    </issue>
    <issue>
      <id>340747</id>
      <title>[1.7][compiler] compiler option to warn when diamond can be used, but type args are used instead.</title>
      <description>I think once the diamond case is fully supported via bug 339478, it'll be good to have a an option to enable the user to be warned when he redundantly specifies type arguments when the diamond construct could've been used instead. eg. ArrayList&lt;String&gt; a = new ArrayList&lt;String&gt;(); ^^^^^^^^^^^^^^^^^^^ will warn "Redundant declaration of type arguments &lt;String&gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>340876</id>
      <title>[preferences][content assist] Request for more flexible configuration of content assist lists</title>
      <description>The current configuration options for JDT content assist lists are bit limited. Currently there are two kinds of lists: (i) The 'default' content assist list that shows a combined set of proposals of several completion engines (as configured in Java &gt;&gt; Editor &gt;&gt; Content Assist &gt;&gt; Advanced) and (ii) content assist lists that show the proposals of just one category. I would like to ask JDT team to allow for a more flexible configuration of content assist. The behavior of the 'default' list is great since it allows a user to decide individually which proposal engines he wants to see on the first page. But the subsequent lists allow just one category. Would it be possible to allow users to define any arbitrary number of content assist lists with any combination of proposal engines? This feature would enhance usability in Eclipse in the case of having many code completion engines installed. For instance, Eclipse Code Recommenders currently adds five more completion engines to Eclipse which results in a rather large number of lists to cycle through until you get to the last one. I'll attach a few figures as starting point for as starting points for discussion. Thanks, Marcel</description>
      <attachments/>
    </issue>
    <issue>
      <id>340945</id>
      <title>Extension Request of JavaContentAssistInvocationContext</title>
      <description>Current JavaContentAssistInvocationContext provides access to the expected type of a completion request, the prefix the developer has already typed, as well as the enclosing IJavaElement code completion was triggered in. The Eclipse Code Recommenders project aims to provide more fine-grained proposals based on what has been done with the object before code completion was triggered on. For instance, given that a constructor has been invoked on a, say, SWT Button Code Recommenders can infer that only a few proposals make sense in the current situation and thus may filter the number of proposals made by JDT to just those actually relevant in the given completion context. For this computation, we currently have to re-run the CompletionParser and recompute the JDT proposals to determine the information on which variable completion was triggered on etc. Since this process is rather costly we would like to ask the JDT team whether the current completion context could be extended to provide read access to little more information than available yet. Information that would be beneficial in JavaContentAssistInvocationContext: 1. Variable code completion was triggered on (IType and Name would be great) 2. Access to all default completion proposals offered by JDT (we use that to create our own subset of proposals + decorations) 3. Information of all available locals, and fields in the given context (required for chain completion). Thus would also include the type and name of the variables. 4. Access to the requested completion type Proposed extensions to JavaContentAssistInvocationContext could look as follows: getAccessibleFieldDeclarations(): List&lt;FieldDeclaration&gt; getAccessibleLocalDeclarations(): List&lt;LocalDeclaration&gt; getReceiverVariable() : VariableDeclaration getCompletionNode(): ASTNode (currently taken from Compiler AST) getCompletionNodeParent(): ASTNode (currently taken from Compiler AST) isReceiverImplicitThis(): boolean Code Recommenders currently has it's own completion context which does roughly this: IIntelligentCompletionContext.java: http://goo.gl/7rAs2 IntelligentCompletionContext.java: http://goo.gl/imOiK ASTCompletionNodeFinder.java: http://goo.gl/2boRm What do you think?</description>
      <attachments/>
    </issue>
    <issue>
      <id>340961</id>
      <title>Enable ReadAccessHandlers to replace revisions</title>
      <description>I had played around "ReadAccessHandler", which supposed to interrupt loading of particular revision. It is good starting point for implementing some security principles in CDO. Unfortunately, I have noticed that, if part of revisions is not permitted to load and they are mixed among the revisions which you are allow to load, on client side, I am getting exceptions, even if I attempt to work with permitted objects. For example, I have EList of CDOObject which are not loaded (list contains CDOIDs). One CDOIDs are allowed to read other are not. I know which one is allowed to access for me and I intend to remove one of them (Using EcoreUtil.delete or just removing from container). And I get exception, because that EMF code is touching forbidden elements in a list.</description>
      <attachments/>
    </issue>
    <issue>
      <id>340978</id>
      <title>[IDE] Add UI preference for new Preference: PREF_LIGHTWEIGHT_AUTO_REFRESH</title>
      <description>The attached patch adds a preference for the new lightweight auto-refresh functionality committed as part of bug 303517</description>
      <attachments/>
    </issue>
    <issue>
      <id>340986</id>
      <title>[review] add facility to remove (Hudson) build server from Builds list</title>
      <description>I can easily add a build server and the discovery works, but I now have a duplicate on localhost and my Bonjour via 2nd port. I would like to remove one of them, but no delete popup, key or whatever. PS Looks easy, so consider assigning to me to resolve ;-)</description>
      <attachments/>
    </issue>
    <issue>
      <id>341076</id>
      <title>simplify pushing of tags</title>
      <description>To push a certain tag I currently need to open the push dialog (with 'Push...' from the context menu of the repository) and manually specify 'refs/tags/myTag:refs/tags/myTag' as push ref specification. I would find it more convenient if I could simply choose 'Push...' in the context menu on a tag (in the Repositories View on the tags shown under &lt;repository&gt; -&gt; 'Tags'). Then a very simply push dialog could be shown, which just has 3 prefilled fields: 1. the push URL (prefilled with the push URL from the configured push specification, maybe drop-down list if several push URLs are configured) 2. the source ref (prefilled and fixed with the tag ref of the tag on which the push is done, e.g. 'refs/tags/myTag') 3. destination ref (prefilled with the tag ref of the tag on which the push is done, e.g. 'refs/tags/myTag') With this it would be pretty easy to push a tag: find the tag -&gt; 'Push...' -&gt; confirm the dialog with 'OK' :-) Maybe something similar could be even done for branches!?</description>
      <attachments/>
    </issue>
    <issue>
      <id>341081</id>
      <title>Make loaded revisions immutable</title>
      <description>When a revision is first made dirty in a TX, we copy the revision and have the new copy carry the new state. The revision that was originally loaded, isn't altered -- nor should it be, IMO. But we have no mechanism in place that actually ensures that revisions are used in this way. I propose that we add a method #setImmutable() that we call on revisions right after they are loaded, and add some checks to methods that alter the state of the revision, to throw an exception if any of those methods are called on a revision object that's been toggled to be immutable.</description>
      <attachments/>
    </issue>
    <issue>
      <id>341238</id>
      <title>We need to be able to specify which column have to be hidden/visible using the customization mechanism</title>
      <description>To avoid conflicts between the customization mechanism and the column visibility menu, we have to modify the column visibility menu to store its state as a local customization. As a consequence, in the uiCustom dialog the user will have to deal with a local customization. This local customization will be impossible to unload. When customizations modifying the columns visibility are loaded: If the user wants to change some column visibility using the visibility dialog, then this dialog has to ask the user if he wants to update the local customization state and provide an option not to ask the same question each time. This option will be changeable in the EMF Facet’s preference page. If so, the local customization has to be equal to the “sum” of the loaded customizations and loaded on the top of the customization stack. The loading/unloading of a local customization can be undone (Ctrl+Z).</description>
      <attachments/>
    </issue>
    <issue>
      <id>341357</id>
      <title>jetty-test-windows and jetty-test-mac</title>
      <description>Could I get a couple of build entries for our usage for testing on windows and mac slaves? I don't know that we'll have them active all the time but it would be very helpful if we can trigger a build on these either daily or on an as needed basis thanks!</description>
      <attachments/>
    </issue>
    <issue>
      <id>341410</id>
      <title>[find/replace] Make search and replace work more like other editors</title>
      <description>In Emacs, when you do a search and replace, the replacement text matches the case of the text being replaced. Supporting this in Eclipse would be immensely useful. Right now, I often drop down to Emacs when I need to do something like this.</description>
      <attachments/>
    </issue>
    <issue>
      <id>341510</id>
      <title>Support optional facet references in the supports extension point</title>
      <description>Related to bug 251722, I will attach here a server type which designates SUPPORT for some facet types. It is not in a list of required default facets, or anything like that, but rather a server type simply designating what facets they "support". It's undertandable that in a list of default facets, a missing facet is an error. Or in a situation of required facets, a missing facet is an error. But in this case, the server type is just designating that it recognizes the existence of a facet type, and that the facet type is supported on the server. Under no circumstances should this throw any error to the error log. To use the test plugin, just unzip it and put it in your workspace and run the runtime-workbench. You don't even need to try to create the server type. The errors should be logged immediately on startup. Again, if my server adapter supports some custom m2eclipse (maven) functionality, but it is not REQUIRED at all and my adapter works 100% just as well in an environment without m2e, then these errors will confuse users.</description>
      <attachments/>
    </issue>
    <issue>
      <id>341544</id>
      <title>Update eclipse project charter</title>
      <description>The Eclipse project charter hasn't been updated in ten years. Several elements of the charter are out of date, including the list of sub-projects and components. With the introduction of Orion it seems like a good time to revise this. http://www.eclipse.org/eclipse/eclipse-charter.php</description>
      <attachments/>
    </issue>
    <issue>
      <id>341631</id>
      <title>[discussion] make interest filtering customizable</title>
      <description>configured mylyn, explicitly unchecked prefrences -&gt; tasks -&gt; context -&gt; [ ] remove file from context when editor is closed. nevertheless, after a while closed files disappear suddenly from the context (so far both .java and text files). this is basically the same issue as 226464 which i reported in april 2008, was marked as a duplicate of 232664 and has been closed as "RESOLVED FIXED" in october 2008 -- but still is with us ... -- Configuration Details -- Product: Eclipse 1.3.2.20110218-0812 (org.eclipse.epp.package.jee.product) Installed Features: org.eclipse.mylyn_feature 3.4.3.v20110131-0100-e3x-7Z7f7AFBBoPbVQ7iNFebXJDypa</description>
      <attachments/>
    </issue>
    <issue>
      <id>341684</id>
      <title>provide a dialog for selecting Git change sets</title>
      <description>Created attachment 192399 [details] source code for the Git connector UI plugin This is a new contribution for Mylyn version Git UI connector. I'm writing this as a bog for now since I do not have committer rights (yet). Legal Message: I, Sebastien Dubois, declare that I developed attached code from scratch, without referencing any 3rd party materials except material licensed under the EPL. {I am authorized by my employer to make this contribution under the EPL.}</description>
      <attachments/>
    </issue>
    <issue>
      <id>341731</id>
      <title>Show values returned from function calls after a step-return</title>
      <description>It would be nice to display values returned from function calls in the Variables view. Visual Studio displays values returned from function calls in its Autos view. When stepping over foo(bar()); two lines appear in the Autos view: bar returned &lt;value1&gt; foo returned &lt;value2&gt; The same thing happens when stepping out of a function.</description>
      <attachments/>
    </issue>
    <issue>
      <id>341744</id>
      <title>Support p2.statsURI</title>
      <description>Created from: TYCHO-530: Support p2.statsURI https://issues.sonatype.org/browse/TYCHO-530 Original Description: As an eclipse plugin developer, I am interested in finding out how many times my plugin is downloaded. When generating an update site, I would appreciate being able to define: * a p2.statsURI entry; * a collection of plugins for which stats should be tracked. While these can be tracked e.g. by the HTTP server access logs, many open source hosting services, notably SourceForge.net , do not make these logs available. Rather, it is up to the hosted project to track web page hits using analytics services like Google Analytics. But obviously these do not work for p2 clients. Therefore this is the only solution for such projects. Eclipse references: http://wiki.eclipse.org/Equinox_p2_download_stats . There are also some tycho references at https://bugs.eclipse.org/bugs/show_bug.cgi?id=310132 . Original Comments: == jan.sievers == [1290512357000] Hugues Malphettes did some download stats work in his tycho fork https://github.com/hmalphettes/sonatype-tycho/commit/4a9ab45aca13dc8fed22915903089d684f09565d which we may consider.</description>
      <attachments/>
    </issue>
    <issue>
      <id>341808</id>
      <title>[api][rulers][preferences] Add preference that allows to disable Overview ruler color wash out</title>
      <description>Build Identifier: 20110301-1815 As a color-blind person, I found it difficult telling the difference between the different indicators in the Overview Ruler with the default eclipse settings. I've changed the color of the Errors annotation type to Red (#FF0000). I was surprised to find out that the color definition changes the outline of the indicator box in the Overview Ruler rather than its fill-color. The fill-color ended up being a lighter hue of the selected color. Since the outline of the box is very thin, it's quite difficult for me to distinguish its color (black, red, brown could all look the same in the outline, whereas I could easily distinguish those had they been in the fill color). I would like to request that the color definition will change the fill color of the indicator to have a better distinction between the indicators. I cannot recommend changing the default indicator colors since there are different degrees of color blindness disability, but by allowing the requested change, making personal adjustments will be far easier. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>341829</id>
      <title>custom transitions should not require a workflow description file</title>
      <description>As of Mylyn 3.5, the Bugzilla connector supports custom workflows, which is great! However, it is somehow error prone to come up with the right workflow file. In an ideal world, a Bugzilla instance should be self-describing. Maybe it would be possible to do what the custom workflow transition file is doing automatically? Maybe is should parse and cache relevant bits from the Bugzilla instance? E.g. from config such as: https://bugzilla.redhat.com/config.cgi?ctype=rdf What do you think? Thanks!</description>
      <attachments/>
    </issue>
    <issue>
      <id>342147</id>
      <title>[Hibernate] Handle custom EDataType value conversion in HibernateStore when possible</title>
      <description>Build Identifier: 20110218-0911 This bugzilla comes from the following forum thread : http://www.eclipse.org/forums/index.php?t=msg&amp;th=207178&amp;start=0&amp;S=fce27b89f18217a48017a8c687fbee11 When committing a transaction from a client to the server, the custom types' values in the model are converted to string objects in order to be transported to the server. Considering the following statement : "CDO does not assume that the generated epackages are present on the server, i.e. that the custom types are present on the server." The string values that arrives on the server server side cannot be converted back to custom type objects. The requested improvement is to perform this backward conversion when custom types are available on the server side. According to Martin (and Eike), an IStore implementation (HibernateStore) can perform it. Here is the reason why this is important (particularly when using hibernate) : Custom types storage is managed via an "org.hibernate.usertype.UserType" class. For instance, I have the custom type "com.vividsolutions.jts.geom.Geometry" which is wrapped in EMF by an EDataType named "Geometry". In order to store values of this type using hibernate, I add the follwing JPA annotation to the EDataType : @TypeDef(name="Geometry", typeClass="org.hibernatespatial.GeometryUserType") Where GeometryUserType is the UserType class that tells hibernate how to store Geometry objects. (For more information on Geometry and GeometryUserType, see http://www.hibernatespatial.org/) GeometryUserType (and other UserType implementations) works well in "pure Hibernate" but not in CDO Hibernate store because in "pure Hibernate" we manipulate Geometry objects directly, but in CDO, we only have String objects on the server side. So in CDO when GeometryUserType is used to store a geometry value, the String object is passed as parameter, resulting in a ClassCastException (cannot cast String to Geometry). That's why, when the "com.vividsolutions.jts.geom.Geometry" type is available on the server side, the Hibernate store should take care of converting back String values to custom type values (i.e. Geometry objects) so that GeometryUserType can be used safely. A workaround would be to provide UserType implementations that works on String values directly as Martin suggested in the forum thread. But this is not a good design since Hibernate UserType are meant to manipulate the custom type, not Strings. For instance, the GeometryUserType is provided by "hibernate spatial" project, and we should not have to maintain a "CDOGeometryUserType" working with String values. The hibernate spatial's GeometryUserType should work directly with CDO. As should all UserType implementations... Reproducible: Always Steps to Reproduce: 1. Follow Hibernate Store QuickStart tutorial, and make it work with the example projects (so that org.eclipse.emf.cdo.examples.hibernate.client.QuickStartTest works). 2. Modify the model to introduce a new EAttribute in the Address EClass which type is a newly created EDataType (let's say the java type is "MyJavaType"). 3. Add an EAnnotation to the EDataType : Source = teneo.jpa Detail entry : Key = appinfo Value = @TypeDef(name="myCustomTypeName", typeClass="fully.qualified.name.MyUserType") 4. Implement MyUserType (implements org.hibernate.UserType) 5. Modify the QuickStartTest to set a value to the new EAttribute. 6. Run the QuickStartTest : This will lead to the following exception : Hibernate: insert into "address" (resource_id, container_id, version, "name", "street", "city", "myCustomTypeName", idcol) values (?, ?, ?, ?, ?, ?, ?, ?) [ERROR] java.lang.String cannot be cast to MyJavaType java.lang.ClassCastException: java.lang.String cannot be cast to MyJavaType at fully.qualified.name.MyUserType.nullSafeSet(MyUserType.java:???) at org.hibernate.type.CustomType.nullSafeSet(CustomType.java:169) [...]</description>
      <attachments/>
    </issue>
    <issue>
      <id>342353</id>
      <title>Tycho-Surefire should use Toolchains</title>
      <description>Maven-Surefire uses Toolchains to select Java, but Tycho-Surefire always uses same java as was used to launch Maven. In fact it relates to following issue - https://issues.sonatype.org/browse/TYCHO-490</description>
      <attachments/>
    </issue>
    <issue>
      <id>342372</id>
      <title>support gitattributes</title>
      <description>JGit should support gitattributes[1]. At least it should be possible to specify the "diff" property. This would allow to mark certain files as "binary" and to prevent content merges on these files. When one knows that for certain file types (e.g. files with specific file endings) the content merge produces wrong content and for those files it is better to rely on manual conflict resolution marking those files as binary would solve the issue. Such a problem is described in [2]. [1] http://www.kernel.org/pub/software/scm/git/docs/gitattributes.html [2] http://dev.eclipse.org/mhonarc/lists/egit-dev/msg02058.html</description>
      <attachments/>
    </issue>
    <issue>
      <id>342451</id>
      <title>To be able to edit derived facet attributes and derived facet references in a table</title>
      <description>Hi, Since Bug 339880 has been fixed, we should now be able to edit derived facet attributes and derived facet references in the EMF Facet table. Regards, Nicolas</description>
      <attachments/>
    </issue>
    <issue>
      <id>342460</id>
      <title>Run SDK tests against Oracle Java 7 JRE</title>
      <description>We need to get a picture on how we're doing regarding Java 7 JREs. I'd like to run our SDK tests against the latest candidate.</description>
      <attachments/>
    </issue>
    <issue>
      <id>342759</id>
      <title>[Xtend] support standalone compilation of Xtend files</title>
      <description>There should be a easy and documented way to generate Java code out of Xtend files in a standalone scenario (i.e. via MWE2, Maven, or/and ANT).</description>
      <attachments/>
    </issue>
    <issue>
      <id>342771</id>
      <title>Support "image+label" hint for when actions are presented in a toolbar</title>
      <description>Currently sapphire supports adding actions to particular contexts, some of which may be in the toolbar area of a section or a form editor page. It would be nice if those toolbar items that represent actions could have additional rendering hints that could change the style of the toolbar item. Namely, image, image+label, or maybe just label-only, etc.</description>
      <attachments/>
    </issue>
    <issue>
      <id>342890</id>
      <title>Automatically filter OS-specific fragments on plugin-based product-build</title>
      <description>I try to build a RCP-application based on plugins/bundles. So I have a .product-file with listening the required plugins and fragments. There are also some OS-specific fragments like SWT-stuff. I get some errors from tycho, when I try to build the application. If I add the informations about os, ws and arch, all is ok. But the graphical editor from Eclipse-IDE removes this additional informations from the .product-file. Is there any possibility, that tycho can try to generate the information from the plugin/fragment-id (e.g. for swt.win32_x86 the os=win32, ws=win32, arch=x86)? Some more problem is, that tycho analyzes the .product-file very early on the build-process (in the tycho-own lifecycle). So I can not patch the .product-files with a normal maven-plugin on one of the regular maven-phases. How can we integrate our own patching-plugin (Mojo) in the tycho-based build-process?</description>
      <attachments/>
    </issue>
    <issue>
      <id>342893</id>
      <title>Support for release-process like Maven</title>
      <description>With the maven-release-plugin you can go through a very complex workflow for artifacts. With tycho I must do all steps by hand: - checkout the plugins - patching the manifests and poms (partially supported with the tycho-setversion-plugin) - patching the .product-files, feature.xml and so on with the new version-numbers - build &amp; deploy - SVN-commit - set the new SNAPSHOT-version (same steps like above) Especially the patching of manifests, pom's, feature.xml and product-files is very critical.</description>
      <attachments/>
    </issue>
    <issue>
      <id>342925</id>
      <title>[javadoc wizard] Pass project's encoding to -charset and -encoding when generating Javadoc</title>
      <description>Build Identifier: I20110407-2200 Eclipse version:I20110407-2200 OS: Ubuntu Linux 10.10 Java Version: JRE 1.6.0 IBM Linux build pxi3260sr9fp1-20110208_03 (SR9 FP1) Locale: ja_JP.utf8 Reproducible: Always Steps to Reproduce: 1.Import the attached project or create a project with either the class or the method name containing DBCS characters. 2.Click on the project, Project-&gt;Generate Javadocs. 3.Go to Window-&gt;Preferences-&gt;General-&gt;Webbrowser and select Use internal web browser radio button and check "Default system web browser". 4. Now click on the class name containing dbcs character in Java editor. 5. Click Navigate-&gt;Open Attached Javadoc. 6. The text will be shown all garbled. This could be due to the fact that the Javadoc does not have a meta tag that specifies the document is encoded in UTF-8. The project had encoding set to UTF-8. This bug however has a workaround. If you set your browser to External web browser and choose Firefox, the text will be displayed correctly.</description>
      <attachments/>
    </issue>
    <issue>
      <id>343152</id>
      <title>Make OSGi test runtime usable as "Running Platform" target platform</title>
      <description>And then plugins project in the test workspace (-data parameter) do not compile. This is very annoying for projects that generate plugin code in their test. To reproduce: Create a Test Case that generates in the workspace a dummy bundle with a dependency to org.eclipse.core.runtime for instance; and assert it builds well. The issue is due to the fact that the default target platform when running test is set to ${eclipse_home}, which is empty with maven-osgi-test-plugin launcher. Instead, the maven-osgi-test-plugin could create a target platform (Windows&gt;Preference&gt;PDE&gt;Target Platform) that is made of the bundles of the running instance. See also: http://dev.eclipse.org/mhonarc/lists/tycho-user/msg00059.html http://software.2206966.n2.nabble.com/Eclipse-UI-Tests-with-maven-osgi-test-plugin-td6036492.html</description>
      <attachments/>
    </issue>
    <issue>
      <id>343218</id>
      <title>[modeling] create figure highlighter for diagrams</title>
      <description>We should integrate into GEF based editors to provide highlighting of figures to visualize the DoI and if it's a landmark.</description>
      <attachments/>
    </issue>
    <issue>
      <id>343492</id>
      <title>Run SDK tests against IBM Java 7 JRE</title>
      <description>Kim, when times are less busy I'd like to see the results for the IBM JRE.</description>
      <attachments/>
    </issue>
    <issue>
      <id>343602</id>
      <title>[identity] add support for retrieving Gravatar information</title>
      <description></description>
      <attachments/>
    </issue>
    <issue>
      <id>343840</id>
      <title>[Deprecated] org.eclipse.gmt.modisco.infra.discoverymanager</title>
      <description>A new release of Discovery Framework is released with Indigo. oegm.infra.discoverymanager.Discoverer interface and associated are deprecated. Discoverers implementations have been written based on new framework. Existing implementations havec been deprecated. Old framework and old discoverers implementations have to be removed. Components, where possible, have to be removed.</description>
      <attachments/>
    </issue>
    <issue>
      <id>343869</id>
      <title>Add WindowBuilder Core and Swing to the Java package</title>
      <description>We would like to add the WindowBuilder Core and Swing to the java-package. What do I have to do to get this done for 3.7M7?</description>
      <attachments/>
    </issue>
    <issue>
      <id>343972</id>
      <title>Support image in editor page header</title>
      <description>In the editor that I'm porting to sapphire we were setting the header image in the scrolledForm on the FormEditorPage. I'd like to have this abillity in Sapphire.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344012</id>
      <title>[client][progress service] reporting progress on multiple tasks</title>
      <description>I was cloning the orion git repo and it was taking so long I thought that it had failed without reporting an error. (Bug 344011). John suggested that I try a smaller repo, which I did from the same page. So the progress messages from the original clone and the new clone were each slamming the status area. (This actually helped me to know that the original clone was still happening, which is good). But then when the smaller clone finished and posted its link to the cloned directory, it was immediately overwritten by the status update from the git client. I knew we would need a story for reporting status on multiple tasks, but didn't think I'd run into it so soon.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344027</id>
      <title>Reduce stateful interactions in the diagram editor palette</title>
      <description>Sapphire diagram editor get the palette and its interaction from GEF/Graphiti, but after using the diagram editors for a while, I am not convinced that the palette creates good usability. I find that I am often in the wrong palette state from what I need to do and traversing the screen from the location on the canvas where i am working to the palette gets old in a hurry. I'd like to evaluate alternative diagram interactions that do not involve the palette. For instance... The default state can be selection/marquee. I see no sensible reason for those to be two separate states. Starting selection on canvas can activate marquee. To add a node, you right-click on canvas and pick the node type from the context menu. The node immediately appears at the location of the right-click. Connections require a bit more thought... Maybe context menu on the starting node to start the connection... I'd like to see some discussion happen here before choosing particular course of action...</description>
      <attachments/>
    </issue>
    <issue>
      <id>344031</id>
      <title>[EditorMgmt] Editors should be able to treat large files specially (e.g. deny opening huge files)</title>
      <description>+++ This bug was initially created as a clone of Bug #117746 +++ Loading large files in an editor needs a lot of memory (up to 5 times the file size, see Bugzilla 75086), so the Workbench can run into an OutOfMemory error or freeze for some time while an editor is busy loading a file. Since users do not see in the Resource navigator how large a file is, it can easily happen that one tries to open a very large file by accident. We have auto-generated log files which range from 1 to 400 MB in size. The smaller ones we want to open in Eclipse Workbench, the larger ones we open in an external editor. Trying to opening a 400MB file in the Workbench by accident leads to an OutOfMemoryError and destabilizes the workbench or even makes it unusable for some time. It should be possible to define a maximum file size (in the Preferences, in plugin.xml or by computing available heap size) up to which an editor editor can open a file directly. If the user tries to open a file that exceeds the given size, the user should be shown a dialog which allows to * Open the file in spite of the warning * Open the file in an alternative (external) editor instead * Cancel the edit request Perhaps the best solution would be to extend the Editor API such that an editor is given the file path to be opened BEFORE it is actually opened. Thereby, each editor implementor could have policies for allowing or denying the open request. Policies for denying could be based on file size, virtual vs. real file system [See Bugzilla 106176], file content...) In case an edit request is denied, the Platform could show a dialog like "Editor FooBar has denied opening 'yourFile.xxx' with the following message: (Custom Message e.g. File is 50MB large) Do you want to * Open the file in (Dropdown of registered editors for xxx files) instead * Open the file in spite of the warning * Cancel "</description>
      <attachments/>
    </issue>
    <issue>
      <id>344071</id>
      <title>[client] Implement Find/Replace</title>
      <description>Orion 0.2M6 I really miss the Find/Replace feature from Eclipse desktop. Having this would make the self-hosting experience much nicer.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344125</id>
      <title>The API should provide a method selectRows(List&lt;EObject&gt; elementsToSelect)</title>
      <description>The Nattable widget should provide a method selectRows. This method will allow to select a full line, corresponding to an EObject. It will be useful in order to use "Link with Editor" between the model browser and the Editor.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344148</id>
      <title>[server][progress service] support querying for running progress tasks</title>
      <description>It would be useful to query what progress tasks are running for a user. I'm also thinking it would be useful for the client to assign a "name" to a task (see bug 344047) and possibly some user data string so that it could record what page triggered a task (see 344055 though I'm less sure whether we will really want to remember tasks per page or just show all user tasks).</description>
      <attachments/>
    </issue>
    <issue>
      <id>344198</id>
      <title>make com.sun.xml.bind dependency optional</title>
      <description>This is a follow up of bug 325176. Unfortunately, the proposed solution as described in that bug, does not work for non-Oracle JVMs (or jaxb implementations). It would be nice if there was a way to accomodate both. A solution which works on Java 5 and does not lock into one specific implementation. Thanks!</description>
      <attachments/>
    </issue>
    <issue>
      <id>344233</id>
      <title>[DB] Get Max VARCHAR size from DBAdapter</title>
      <description>In Oracle db VARCHAR has a max character count of 4000 which leads to errors when auto creating tables. The proper code locations already states: // TODO: implement DBAdapter.getDBLength // mappingStrategy.getStore().getDBAdapter().getDBLength(type); // which should then return the correct default field length for the db type return type == DBType.VARCHAR ? 32672 : IDBField.DEFAULT; I changed it to 4000 to work with Oracle.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344312</id>
      <title>Downloads page should feature content on how to combine packages</title>
      <description>A common question in the forums/newsgroups is, "I have/want &lt;some-Eclipse-package&gt; but also want to use &lt;some-other-Eclipse-package&gt;. Can I have them both in one installation? How?" Currently, the downloads page has a somewhat subtle link titled "Updating Eclipse" that links to the online help docs. To assist new users there should a prominent link that leads to instructions for installing features into one of the packages. I'd suggest text like "Want to combine more than one of theses packages? Click Here." One possible destination for that link is the "Installing New Software" section of the online help (http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.platform.doc.user/tasks/tasks-124.htm) I respect that the downloads page is a tender subject, and that it has undergone significant evolution over the years (with much lively debate), so my suggestion would be to use the space right below the "Compare Packages" and "Older Versions" links. I think that using the right gutter, it would be lost in the noise.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344394</id>
      <title>Clean Code Method Sorter</title>
      <description>This bug is thought for progress tracking of the "Clean Code Method Sorter for Eclipse" described in more detail here: http://code-recommenders.blogspot.com/2011/04/clean-code-method-sorter-for-eclipse.html Add yourself to cc to keep updated or use this bug to discuss features you would like to see.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344422</id>
      <title>Java Tracing</title>
      <description>I am a full time Java developer and I work with Java code using Eclipse almost every day in my job. Most of the time the existing Java debug features are suitable for helping me to track down problems. However, there is one use case where I think the existing tools are insufficient. When I am working with multi threaded code I find that breakpoints become less useful as the order of execution of threads is important and so having individual theads stopped by a breakpoint can change the behaviour which I am trying to investigate. In this case I tend to rely on letting the code execute uninterrupted and writing out trace logs which show what code was executed and in what order. However, the process of adding this tracing to my code is time consuming and an obvious candidate for automation. To this end I have created the InTrace tool (https://github.com/mchr3k/org.intrace/wiki) which uses a Java Agent to add instrumentation to selected classes so that trace output can be generated. The really nice aspect of doing this through a Java agent is that I can add instrumentation to any application class even if I don't have the source code. InTrace is currently a standalone tool. I think it would be much more useful if this functionality was added to the Eclipse Java Debug project. I am imagining something like the following: - EITHER -- A new launch option to enable loading the InTrace agent when a Java program is launched. -- A new post launch action which uses the Attach API (http://download.oracle.com/javase/6/docs/jdk/api/attach/spec/com/sun/tools/attach/VirtualMachine.html) to load the InTrace agent into an active program. - A new View similar to the existing Console but showing the collected Trace output. I would love to hear any feedback about this idea or about my InTrace tool. I expect that doing the Eclipse integration well would take a reasonable amount of time so I don't want to start it until I get a sense of whether it would be accepted. I am not keen to produce a standalone plugin as I think this useful feature should be available to as many people as possible as part of the Eclipse Java Debug project.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344469</id>
      <title>Use a newer version of Jsch</title>
      <description>Jsch 0.1.44 has been out for awhile. I noticed the platform ships 0.1.41, it would be nice to ship a newer version to take advantage of fixes. The first step would be to create a CQ that piggybacks on the Orbit CQ. https://dev.eclipse.org/ipzilla/show_bug.cgi?id=4729</description>
      <attachments/>
    </issue>
    <issue>
      <id>344504</id>
      <title>Contributing a Helgrind plugin for Linux Tools Project</title>
      <description>Build Identifier: I've developed a initial version of a Helgrind plugin for Eclipse. Basically it works pretty much like the existing Valgrind plugins. I've tested it under Valgrind 3.6.0 and Eclipse 3.6.2. There are more work to be done, but I think it's good to go for a initial go. I'm attaching the tarball of the source code in this bug. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>344543</id>
      <title>Extension for the Delete Server Dialog</title>
      <description>The Delete Server Dialog is the one that pops up when users call the Delete action on a server in the Servers view. It requests the user to confirm the deletion of the server instance. The dialog also has some built-in logic for additional actions to be executed together with the deletion: * Delete unused server configuration(s) * Delete running server(s) * Stop server(s) before deleting For the server adapter of our vendor's app server, we need to add more options that, if selected, call additional actions on deletions. It would be nice if such options can be added using an appropriate extension point. It's perfectly OK that these options are displayed like checkboxes. There is no need for more complex options. Additional requirement is to have dependency between the different options like we already have between "Delete running server(s)" and "Stop server(s) before deleting": the second option is only available if the first one is selected. Default value for each options should be also set using the extension point.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344805</id>
      <title>[DB] Add new type mapping: Boolean from VARCHAR</title>
      <description>Some DBMS do not have a boolean type. You will then have somethin other to convert it from/to. Currently, there is support for INT to Boolean in CDO. We have to add support for VARCHAR to Boolean, as well.</description>
      <attachments/>
    </issue>
    <issue>
      <id>344888</id>
      <title>[sync] Improve user experience in synchronize wizard</title>
      <description>Created attachment 194873 [details] First page of described wizard workflow with predefined configurations First of all the current implementation of synchronize wizard isn't fully functional comparing to sync-dialog available from project's 'Team' menu. It doesn't allow to select source branch and enable/disable showing local changes. Both UI should offer same functionality for the user. Secondly launching synchronization via sync-wizard requires lots of mouse clicks. IMHO we should reduce amount of required click by providing easily available synchronize configurations like: * synchronize workspace * compare with remote tracking branch Apart from that we should also give possibility to launch custom synchronization where user would have full control of source and destination branch and workspace changes IMHO synchronize wizard should contain two pages. On first user can choose between two described above predefined configurations. When one of those configuration would be selected he should be able to immediate finish wizard and launch synchronization. When none of this configuration fits his needs he should select 'custom' option and go to the next wizard page where he can fill proper configuration</description>
      <attachments/>
    </issue>
    <issue>
      <id>344890</id>
      <title>[remote] Cannot start a new process on a remote target with extended-remote</title>
      <description>When using 'target extended-remote' and gdbserver --multi, GDB allows us to start a new process on the target. Currently, we only support attaching to a running process, but we could allow the user to create a new process. Note that this is supported for older GDBs as well. I've tried it with GDB 7.0 successfully. The problem is that to start a process on a remote target we need to specify the location of the binary on the host, and also the location on the target. That means prompting the user twice for a path. The location of the binary on the target must be given to gdb using -gdb-set remote exec-file &lt;path&gt; One possibility would be to use the automatic non-attach remote launch, which already has some UI to specify the remote path. This would allow us to start a new process on a target that has a gdbserver --multi already running on it, instead of having to start gdbserver (no --multi) ourselves. For the case of multi-process, we could start multiple new processes on the remote target, but we would need to prompt the user each time, on top of how we currently prompt her for the path of the binary on the host.</description>
      <attachments/>
    </issue>
    <issue>
      <id>345002</id>
      <title>Allow restoring a removed (but uncommitted) file</title>
      <description>Build Identifier: When one deletes a file in Eclipse, EGit does the same as "git rm file". The problem is, there currently is no UI for undoing that operation (getting the file back). On the command line, this is "git reset HEAD file &amp;&amp; git checkout file". One can reset the whole repository to get the file back, but that also undoes all the other changes in the repository. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>345049</id>
      <title>Optimize CDORevisionCache implementations</title>
      <description>Non-auditing: CDOID --&gt; CDORevision Auditing: CDOID --&gt; RevisionList Branching: CDOIDAndVersion --&gt; RevisionList getObjectType() can be a simple cache lookup for non-branching (because the cache key is just the CDOID).</description>
      <attachments/>
    </issue>
    <issue>
      <id>345056</id>
      <title>disable the submit button if we know that we get an error</title>
      <description>There are some cases where we know that an submit must fail. 1) anonymous user can not submit bugs 2) when ../show_bug.cgi?ctype=xml&amp;id= did not have the exporter attribute in &lt;bugzilla&gt; then all emails did not have @domain We should show a message with an hyperlink for the action. patch is coming soon!</description>
      <attachments/>
    </issue>
    <issue>
      <id>345213</id>
      <title>[content assist][preferences] Add enablement to Java completion proposal category extension point</title>
      <description>We have a java completion proposal computer, but it should only be used for projects of a specific type. However, there is no way to eliminate our computer for projects that don't match this criteria. If there were an enablement (optional) element on the extension point, we'd be able to prevent this completion proposal category from showing up on project where it makes no sense. example: &lt;extension point="org.eclipse.jdt.ui.javaCompletionProposalComputer" id="jaxbCompletionProposals" name="%jaxbCompletionProposals"&gt; &lt;proposalCategory icon="icons/full/etool16/jaxb_facet.gif"/&gt; &lt;enablement&gt; &lt;with variable="project"&gt; &lt;test property="org.eclipse.wst.common.project.facet.core.projectFacet" value="jpt.jaxb" forcePluginActivation="true"/&gt; &lt;/with&gt; &lt;/enablement&gt; &lt;/extension&gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>345234</id>
      <title>Provide a convenient way to ship source bundles</title>
      <description>On a feature, this plugin would read the feature.xml, append .source to feature ID and to included plugins ID, and generate the artifact from it. This would avoid to maintain both my.feature/feature.xml and my.feature.source/feature.xml.</description>
      <attachments/>
    </issue>
    <issue>
      <id>345384</id>
      <title>[TCF][File system] Provide property pages for remote file system nodes</title>
      <description>For each visualized remote file system node in either the target explorer tree or the file system tree in the peer details editor, provide Windows Explorer like property pages to visualize the file system node properties. The property pages should contain at least: - Name and Location - Size in human readable form and raw bytes Example: "Size: 4,00 KB (4.096 bytes)" - File attributes like "read only" and "hidden" Difficulty: The remote file system attributes style has to be used. Means if the file is on a remote Unix like file system, the user get the typical "read/write/exec" style attributes for "user/group/others" - File creation, modified and access times in long localized style Example: "Created: ‎Dienstag, ‎19. ‎Oktober ‎2010, ‏‎19:31:29"</description>
      <attachments/>
    </issue>
    <issue>
      <id>345431</id>
      <title>Make it possible to preregister epackages</title>
      <description>There are use cases in which the epackages are known upfront before the application starts. In some CDO stores registration of an epackage is also quite a heavy activity as the database schema needs to be updated. So for these stores it makes sense to preregister epackages before users actually start using the system. This bugzilla is a feature request to define an internal api which can be used by a store to preregister epackages or another way (through properties) to define the epackages which can be preregistered when the application starts.</description>
      <attachments/>
    </issue>
    <issue>
      <id>345755</id>
      <title>[EDP] Eliminate the pre-1.0 versioning requirement for incubating projects</title>
      <description>When a mature product is donated to Eclipse, we have a bit of problem with the incubation phase. The code is mature, the development is active, but the team may not have learned how to work fully in the open yet. At the same time, the company backing the project may feel significant financial pressure to get their existing user base onto their new Eclipse.org code base. Those users may be reluctant to move to 0.x software as software versioned this way is commonly considered to be of beta quality. The above problem leads to accelerated incubation phase and graduation review, before the project has arguably mastered the process of working in the open. This is not in spirit of what the incubation phase and the mature labels have been intended for. Recent examples of this: Riena, WindowBuilder, Jubula I think we should re-consider the 0.x versioning requirement. It can either be eliminated completely or we can add a provision where a project can petition their PMC and EMO to waive the 0.x versioning requirement given a set of justifications.</description>
      <attachments/>
    </issue>
    <issue>
      <id>345826</id>
      <title>show Gravatar images in task editor</title>
      <description>Provide support for showing an image for the task assignee in the top-right corner of the task editor. Images should be managed through the Mylyn Commons identity API which retrieves them from services such as Gravatar.</description>
      <attachments/>
    </issue>
    <issue>
      <id>345847</id>
      <title>[api] create UI for private comments</title>
      <description>we need a way to show that an comment is private. Now I do the background work and show the comments in BOLD and ITALIC Font until we did an UI review and come up with an better way to present this to the user.</description>
      <attachments/>
    </issue>
    <issue>
      <id>346172</id>
      <title>Support zoom, print and save as image actions in the diagram editor</title>
      <description>Context info can be found at https://bugs.eclipse.org/bugs/show_bug.cgi?id=344053 Now that we control the diagram context menu, we should add Print, Zoom, and Save As Image actions to it to make it complete.</description>
      <attachments/>
    </issue>
    <issue>
      <id>346320</id>
      <title>[tracepoints] Add support for fast tracepoints</title>
      <description>GDB supports the concepts of fast tracepoints. A fast tracepoint is a tracepoint that does not use a trap to collect the information. Instead, an instruction of the program is replaced by a jump to a the collect commands. The value of fast tracepoints is that they are very efficient and non-intrusive. The drawbacks of fast tracepoints are: 1- the program needs to be compiled with a special gdb library that supports fast tracepoints. This library takes care of modifying the program to insert the fast tracepoint jump operation 2- fast tracepoints can only be inserted at location where the opcode is at least 5 bytes to allow for a bug enough jump. DSF-GDB should make use of fast tracepoints when possible.</description>
      <attachments/>
    </issue>
    <issue>
      <id>346768</id>
      <title>[Table] Support markup for rich text in table items</title>
      <description>Created attachment 196254 [details] Patch for 1.4 RC1 org.eclipse.rap.rwt RAP/RWT is a wonderful web 2.0 toolkit especially because it complements scout's single sourcing concept with multiple ui facades. However RWT is positioned between to paradigms, "SWT" and "Web2.0". This results in conflicts regarding closed/limited world of SWT compared with styled and markup enriched web 2.0 world. Regarding the ScoutRwt ui layer we currently face major limitation in the SWT/RWT Table. We lack of mutli-line table headers, multi-line table cells and html support for simple cell text styling / decoration. As I understand that the SWT api may not be extended or changed I suggest using extension adapters to add RWT-specific and Web2.0 supporting functionality to widgets. In Swing rendering a table cell or a table header with html styled text is done by simply enclosing the cell text with the html tag: &lt;html&gt;Hello World&lt;/html&gt; This marker is interpreted by the ui factory to render the text not as plain text but as styled text. The attached patch adds the basic "rich" table functionality known from other web2.0 frameworks and swing to RWT. It consists of the following parts on "org.eclipse.rap.rwt": 1) adding ITableColumnExtensionAdapter to TableColumn with property verticalAlignment. horizontal alignment already exists, this verticalAlignment completes the css support. 2) adding ITableExtensionAdapter to Table with property itemHeight. This supports for easy setting the text height of all table rows to a value different than one font size (for example 60) 3) adding HtmlTextUtil for basic handling of marked-text-to-html, html-to-plain and isHtmlMarker functionality. And it consists of the following parts on "org.eclipse.rap.rwt.q07": 4) adding handling for verticalAligmnment to TableColumnLCA and TableLCAUtil 5) adding switch to ItemLCAUtil.writeText to pass-through html-styled text without encoding 6) adding switch to TableItemLCA.writeTexts to pass-through html-styled text without encoding 7) adapting TableColumn.js and TableItem.js 8) (rebuilding client.js)</description>
      <attachments/>
    </issue>
    <issue>
      <id>346926</id>
      <title>Add support for associateSitesURL &lt;site/&gt; attribute</title>
      <description>Copying details of this ticket from here: https://issues.sonatype.org/browse/TYCHO-296 It would be nice if tycho supported associateSitesURL. This seems to be the only or at least the easiest way to make P2 consider additional repositories during installations. http://help.eclipse.org/ganymede/topic/org.eclipse.platform.doc.isv/reference/misc/update_sitemap.html Note that associateSite are added as repository references to repository metadata during p2 metadata generation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>346989</id>
      <title>*.xjb files should be recognized as XML</title>
      <description>.xjb is the recommended file extension for JAXB Bindings customizations, Eclipse should recognize these as XML files out of the box. -- Configuration Details -- Product: SpringSource Tool Suite 2.6.1.201105041000-RELEASE (com.springsource.sts.ide) Installed Features: org.eclipse.wst.xml_ui.feature 3.2.3.v201102160550-7H7AFUWDxumQJOi9ghcTb5YgkwEZ</description>
      <attachments/>
    </issue>
    <issue>
      <id>347053</id>
      <title>Project explorer should show System Libraries (eglars) for a project</title>
      <description>An entry should be shown in the project explorer for the System eglars that are associated with the compiler for a given project. This list should show the eglars, and should be expandable down to the part level.</description>
      <attachments/>
    </issue>
    <issue>
      <id>347058</id>
      <title>[client] "open favorites" popup</title>
      <description></description>
      <attachments/>
    </issue>
    <issue>
      <id>347101</id>
      <title>Add extension point to Autotools to permit adding options to the "configure" invocation</title>
      <description>Build Identifier: M20110210-1200 As it stands, if any options are needed by default, for example, for a particular toolchain, they must be added by the user, using the project settings dialog, after an autotools project is created. This is inconvenient and error prone. As an example of this, as the creators of the IBM Advance Toolchain, we'd like for the following options to be added to the configure command by default: CC=&lt;path_to_our_gcc_compiler&gt; CXX=&lt;path_to_our_g++_compiler&gt; If these switches are not added, the generated Makefile will contain references to gcc and g++ and if the user doesn't have our tools ahead of /usr/bin on his $PATH, he will get the wrong tools. To solve this problem, an extension point could be provided that allows other plug-ins to add arbitrary switches to the configure invocation. Reproducible: Always Steps to Reproduce: N/A</description>
      <attachments/>
    </issue>
    <issue>
      <id>347110</id>
      <title>Support ClassFileTransformer's in WebAppClassLoader</title>
      <description>This allows byte code modification.</description>
      <attachments/>
    </issue>
    <issue>
      <id>347416</id>
      <title>Support custom output-filename in tycho-p2-repository-plugin</title>
      <description>I want like to build a targetplatform with Tycho containing all jar and its depdendencies. Therefore I am using the tycho-p2-repository-plugin: &lt;plugin&gt; &lt;groupId&gt;org.sonatype.tycho&lt;/groupId&gt; &lt;artifactId&gt;tycho-p2-repository-plugin&lt;/artifactId&gt; &lt;version&gt;${tycho-version}&lt;/version&gt; &lt;configuration&gt; &lt;includeAllDependencies&gt;true&lt;/includeAllDependencies&gt; &lt;createArtifactRepository&gt;true&lt;/createArtifactRepository&gt; &lt;compress&gt;true&lt;/compress&gt; &lt;/configuration&gt; &lt;/plugin&gt; The result is a zipfile with a p2 repository, that is named like the project/artifact itself for example org.example.build.updatesite.zip. I would like the name to include the timestamp and version of the build and therefore need a configuration-option like &lt;outputfilename&gt;.</description>
      <attachments/>
    </issue>
    <issue>
      <id>347431</id>
      <title>Add alternative way of injecting Font-Directory without having to modify files in the plugin folder</title>
      <description>Build Identifier: 2.6.2 Currently adding fonts from a custom directory is a nuisance since you have to modify the config-xml in the fonts plugin or put those fonts into the jre/lib/fonts directory. A simple SystemProperty which would accept a commaseparated list of custom font directories would be a big plus. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>347436</id>
      <title>Add support for links in table cells</title>
      <description>Created attachment 196744 [details] example screen This ticket is based on ticket https://bugs.eclipse.org/bugs/show_bug.cgi?id=346768 Based on supporting inline html inside table cells, the last thing missing is hyperlink support. The attached patch enables this using the ITableExtensionAdapter. Adds a HtmlHyperlinkListener and a corresponding event. An example on how this will look like is also attached. Note the multiline table header, the multiline table rows as well as the link support. The attached screenshot was created using: tableExtensionAdadpter.setItemTextHeight(40); tableExtensionAdadpter.addHtmlHyperlinkListener(...); and the cell text is of the form: &lt;html&gt;... &lt;a href="...&gt;a link&lt;/a&gt; ...&lt;/html&gt; Tested on Chrome, Firefox and IE8, IE9. I marked the ticket as blocker as did Andy in bugzilla 346768 since this is related to the "RWT between SWT and Web2.0" discussions (This ticket adds web2.0 functionality to rwt without the need of changing SWT api or functionality).</description>
      <attachments/>
    </issue>
    <issue>
      <id>347599</id>
      <title>[refactoring] Provide a way to implement refactorings that depend on resources that have to be explicitly released</title>
      <description>Created attachment 196865 [details] Refactoring#dispose() method C++ refactorings must hold a lock on C++ index. Currently it is pretty hard to determine when the lock should be released. Under normal circumstances the lock has to be released at the end of createChange method, but in case of errors it may have to be released in checkFinalConditions or checkInitialConditions. The situation is further complicated by possibility that check*Conditions and createChange methods may be called multiple times. This life cycle uncertainty makes reliable release of C++ index in CDT refactorings virtually impossible. The proposed solution is to add org.eclipse.ltk.core.refactoring.Refactoring#dispose() method and call that method before the refactoring object goes out of scope. C++ rafactorings would override the dispose method and release the index lock there. The attached patch adds dispose method to Refactoring class and calls to this method to PerformRefactoringHistoryOperation and RefactoringHistoryWizard. There are more places where dispose calls should be added, but none of these places would cause problems even with a missing dispose call since they don't deal with refactorings that override the dispose method. The patch is intended for Eclipse 3.8.</description>
      <attachments/>
    </issue>
    <issue>
      <id>347695</id>
      <title>[target] [API] Extension point to contribute UI to add and edit locations in target definitions</title>
      <description>Extension that allowes extendors to provide their own entries in the Target Platform page. Users should be able to provide their own UI ( wizard) to create that Entry, and also to edit the contents of this entry.</description>
      <attachments/>
    </issue>
    <issue>
      <id>347835</id>
      <title>Add "Replace With -&gt; Theirs" in conflicting state of merge and cherry-pick</title>
      <description>In the conflicting repository state, the Replace With menu of a file should have an item for replacing with the MERGE_HEAD. The effect would be the same as "git checkout --theirs file". Any good ideas for the name?</description>
      <attachments/>
    </issue>
    <issue>
      <id>348124</id>
      <title>Provide a way to update all the nested features</title>
      <description>Build Identifier: Eclipse 3.6.2 Our product has a main feature which include all the other features. Our customer usually create another containing feature which includes the main feature of our product and other enterprise features/plugins. When we ship an update to the product main features, the customer picks it up, wrap it in the enterprise feature and deploy it to the end users. The problem is that during the update, the user has to choose to update both our product main feature and enterprise feature. Since our product feature is included in the custom enterprise feature, when the user chooses to update enterprise feature, it should automatically update our product main feature. Reproducible: Always Steps to Reproduce: 1. Build a feature com.abc.test1 3.6.0 and install it to SDK 2. Build another feature com.abc.test2 3.6.0 which includes com.abc.test1 3. Install feature com.abc.test2 3.6.0 4. Update both feature to 3.6.1 and build them 5. Install com.abc.test2 3.6.1 without checking com.abc.test1 6. It fails when checking the dependency Since com.abc.test1 is included in the feature com.abc.test2, it should be updated when com.abc.test2 is choosen to be updated. The same issue exist when installing the new feature.</description>
      <attachments/>
    </issue>
    <issue>
      <id>348179</id>
      <title>[quick assist] Provide a "Convert 'if-else' to 'switch'" quick assist</title>
      <description>Currently we have a "Convert 'switch' to 'if-else'" quick assist. Would be useful to have the reverse quick assist as well. Especially if someone wants to use the new strings in switch feature and convert their existing if-else statements to switch. Though we will have to decide how to handle the NPE that can be thrown by the switch statement.</description>
      <attachments/>
    </issue>
    <issue>
      <id>348302</id>
      <title>Set XULRunner security policies to allow pasting</title>
      <description>Right now I am unable to paste text directly ( using Ctrl-V ) in the HtmlComposer. Rather, I need to use the Right-Click -&gt; Paste functionality. This is problematic for two reasons: # the user is confused since Ctrl-V fails silently; # the dialog pops up inside the browser widget, and for small widget sizes there is not enough room to enter text in it. Please consider adding enhanced paste support, so that pasting directly works.</description>
      <attachments/>
    </issue>
    <issue>
      <id>348610</id>
      <title>Extend EGit to allow use of git-flow</title>
      <description>Build Identifier: It would be nice if EGit added a "Enable Git Flow" extension on GIT Projects so that it would be easier to use git-flow extensions. More info: http://nvie.com/posts/a-successful-git-branching-model/ - Explanation of the workflow http://nvie.com/posts/a-git-flow-screencast/ - Screencast showing it in action http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/ - Usage of the workflow in blog post form https://github.com/nvie/gitflow - Repo of the git flow extension, also contains wiki pages about it. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>348732</id>
      <title>Have only one EDT feature, or a hierarchy</title>
      <description>The three features are now named: EGL Development Tools (EDT) SDK Feature, EGL Development Tools (EDT) Source Code Feature, and EGL Development Tools (EDT) Feature. Right now all three need to be (un)installed together. In the future I want them to be grouped, a parent and two children, so no one can be stuck with only part of EDT.</description>
      <attachments/>
    </issue>
    <issue>
      <id>348857</id>
      <title>[content assist] Allow to configure auto insertion trigger characters</title>
      <description>Build Identifier: 20100218-1602 Hi, I've set my content assist to suggest code completion as I type (By setting activation triggers to ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz._). The biggest problem with this is suggestions are often auto inserted. e.g. typing String som will suggest somString. This in itself is fine, but the suggestion is automatically inserted upon pressing ; which is usually wrong for parameter name suggestions. Are there any plugins which behaviour more like Xcode or Visual Studio? Alternatively is it possible for me to write a plugin to Reproducible: Always Steps to Reproduce: 1. Set Java Content Assist Activation Trigger to ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz 2. type String anything 3. type ;</description>
      <attachments/>
    </issue>
    <issue>
      <id>348899</id>
      <title>[scm] provide core connector for Subclipse</title>
      <description>This task will keep track of the progress related to the implementation of the core connector for projects associated to the subclipse team provider. This will need a cq as subclipse is not an eclipse project.</description>
      <attachments/>
    </issue>
    <issue>
      <id>348985</id>
      <title>Need standalone EGL IDE for Windows and Linux</title>
      <description>Build Identifier: Like CE, we need a standalone EGL IDE build that will include everything a developer will need to create EGL (Java/JavaScript) apps with EDT. Eventually, this IDE should be listed on the Eclipse Download page - wwww.eclipse.org/download We should plan to support 32 and 64 bit for both Windows and Linux. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>348993</id>
      <title>[console] Allow to stop a thread from console (e.g. main thread that is caught in an endless loop)</title>
      <description>Created attachment 197756 [details] Implementation Allow to interrupt a thread from the OSGi console by sending it a RuntimeException via Thread#stop(Throwable). E.g. in bug 339021, I was caught in an endless loop in the main thread, and it would have been quite helpful, if I could just have used the OSGi console to throw an exception, thus reviving the display loop. [1] The attached patch implements this as an extension to the "threads" command: &gt; threads stop main I'm not sure if exception.setStackTrace(t.getStackTrace()); is allowed in the org.eclipse.osgi bundle, since Thread#getStackTrace() is @since 1.5. If not, you can just remove that line and the lines before and after that deal with the 'cause' variable. [1] Actually, I managed to escape from there, but it was a pain. I used http://www.adaptj.com/main/stacktrace , opened a Remote BeanShell Console, and then ran the command &gt; thread("main").stop(new IllegalStateException("injected"));</description>
      <attachments/>
    </issue>
    <issue>
      <id>349023</id>
      <title>provide support for Gerrit 2.2</title>
      <description>Build Identifier: 20110301-1815 The code in getPatchSetDetail(final PatchSet.Id id, IProgressMonitor monitor) assumes that if an exception is thrown from getChangeDetailService().patchSetDetail(id, this); that this must mean that the Gerrit version is &lt; 2.1.7. It then goes on to try the fallback of getChangeDetailService().patchSetDetail(id, this); For me, the second call throws an exception, because I'm trying to make the connector work with Gerrit 2.2.1. I'm clearly getting an "Error parsing request", but I just get exactly what I would expect from this code (given I'm using the compiled jars from 2.2.1): java.lang.NoSuchMethodError: org.eclipse.mylyn.internal.gerrit.core.client.compat.ChangeDetailService.patchSetDetail(Lcom/google/gerrit/reviewdb/PatchSet$Id;Lcom/google/gwt/user/client/rpc/AsyncCallback;)V I Because there is no further catch, this exception is propogated, and so I've lost the original exception that happened on: patchSetDetail(id, null, null, this). I'm not sure what the solution is. Maybe catch NoSuchMethodError and throw the original exception (e) instead. Reproducible: Always Steps to Reproduce: Details of code examination given. Otherwise: run against Gerrit 2.2.1, using the compiled prettify, common and reviewdb jars from 2.2.1</description>
      <attachments/>
    </issue>
    <issue>
      <id>349148</id>
      <title>[10.7] Let Eclipse use the new full-screen support in Lion</title>
      <description>It would be great if Eclipse could count with this new feature in Mac OS X 10.7.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349326</id>
      <title>[1.7] new warning for missing try-with-resources</title>
      <description>Inspired by the bug pattern from bug 349121 I propose to add a warning to cases where try-with-resources should perhaps be used but is not. I suggest the following pattern: - assignment or initialization of local variable - assigned value is a subtype of Closeable IMHO this could speed up adoption of this very useful new feature, pin-pointing potentially dangerous code. That warning would trigger some false positives, so a) it should be suppressable b) some more heuristics could be useful to exclude unlikely candidates. E.g., a typically false positive would be a method that returns the Closeable to its client but stores intermediate results in a local variable. This method would *not* be responsible for closing. The heuristic could be as simple as "if the method returns a Closeable" and ideally "if the assigned value can flow into a method return" (not sure if the compiler can be made to detect that). A corner case where the warning would be useful but is not captured by the initial pattern: getInputStream().read(bytes); This can be described as: a method call returning Closeable is used as the receiver for another method call. Ideally, this analysis would be directed by some ownership model :) but as Java doesn't support the concept of ownership this would have to be approximated by other analyses, but I'm confident that these can be made precise enough to be really helpful. Sorry if this has been discussed before, but I couldn't find a bug yet.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349336</id>
      <title>[1.7][quick fix] Suggest to use &lt;&gt; where applicable</title>
      <description>3.7. We should add a quick assist that suggests to use &lt;&gt; where applicable. This could also be offered as a Clean Up.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349351</id>
      <title>[search] enhance Eclipse search capabilities to include desktop resources</title>
      <description>When working on tasks it's common to work with documents that aren't in the workspace. It would greatly enhance the platform experience if users could search for these documents using the standard Eclipse search functions (search menu, dialog, search view). Platform search should be enhanced to make it possible to search the desktop, finding files both within and outside of the workspace. Search should make use of search indexes provided by the OS, for example the Windows 7 search APIs. Search results should be displayed in the standard search view.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349447</id>
      <title>[1.7] Add Java 7 support for API Tools</title>
      <description>3.7. For 3.7.1 we need to add Java 7 support to API Tools - make sure our TypeBuilder is working correctly and that we correctly create ASTs + handle the new ASTNode kinds. We also need to create the EE fragment for system library reference checks (for the builder). This should be done by end of June, so that we have enough time for team wide testing and fixing in July.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349620</id>
      <title>improve UI for private comments</title>
      <description>Instead of using an italic font show a little lock icon to the right of the comment header to denote private comments. The lock icon should also support making a comment private in the future.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349624</id>
      <title>improve context from stack trace population heuristic</title>
      <description>The strategy for creating contexts from stack traces that was initially implemented iterates over the stack trace and generates an artificial selection event for each identified Java element. A basic filter that excludes known system name spaces such as java or junit.framework helps to reduce the number of irrelevant elements. Still, this strategy can lead to large contexts with elements that have little relevance to investigation the problem captured in the stack trace. This task is intended for discussing improvements.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349665</id>
      <title>[1.7][quick fix] Need 'Surround with try/multi-catch'</title>
      <description>[1.7][quick fix] Need 'Surround with multi-try/catch'.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349771</id>
      <title>support marking comments private</title>
      <description>Actual we can only change existing comments and not the new comment.</description>
      <attachments/>
    </issue>
    <issue>
      <id>349921</id>
      <title>[DB4O] Create a test config using MEMDB4OStore</title>
      <description>MEMDB4OStore was meant to replace DB4OStore in our test suite, with the purpose of having a blazing fast implementation that makes the execution of the test-suite way faster. Caspar found that some tests did fail in the file based and not in the membased, so switched the default test config to use the file based. It would be nice to have another configuration to use the mem based configuration, enabling quick test-driven development. File based config must be executed once the mem-based config passes, to make sure the implementation conforms to the test-suite.</description>
      <attachments/>
    </issue>
    <issue>
      <id>350000</id>
      <title>[content assist] Include non-prefix matches in auto-complete suggestions</title>
      <description>Build Identifier: 20110218-0911 As we bring new developers in to our group one enhancement request from devs coming from visual studio or intelliJ is the matching of identifiers based on substrings-- not just prefixes. I thought for sure this had to have been opened before, but I couldn't find this in bugzilla. If this is a duplicate, then please disregard. For example: I have a class: class A { private String connectionsStringInformation; private String getCnxString() { return Info[ctrl+space] In VS and IDEA connectionStringInformation shows up in the autocompletion list, whereas in Eclipse the list seems to only work based on prefixes. I looked around through the source a little and I (have no idea if I'm in the right place) but BinaryTypeEncoding has getFields and getMemberType where I see it doing a binary search on a lazily sorted list of field names -- which makes sense. Obviously you wouldn't want the cost of linearly scanning everything. However, perhaps they are "indexing" the prefixes and all of the camelCase boundaries so that a match on any of those would add that to the completion list. I see that the idea of "prefix" matching seems pretty pervasive through the autocomplete code (param names, etc.). Has this been something you have considered? It does seem like a potentially large effort, but if it's not as bad as it might seem, I would love to be able to contribute a plugin that could do this. Mylyn messes around with the autocomplete list today -- so obviously its possible... Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>350143</id>
      <title>Do not mess svn:externals order</title>
      <description>Build Identifier: 20110609-2236 We are using svn:externals to link other folders. We tried to sort our svn:externals in alphabetical order to help users to find what they are looking for. The problem is that subversive is not honoring the order of svn:externals definitions. I think the fix is very easy. Just replace HashMap by LinkedHashMap in SVNUtility.java (line 173): public static Map&lt;String, SVNEntryRevisionReference&gt; parseSVNExternalsProperty(String property, IRepositoryResource propertyHolder) { Map&lt;String, SVNEntryRevisionReference&gt; retVal = new HashMap&lt;String, SVNEntryRevisionReference&gt;(); Thanks Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>350146</id>
      <title>Make protocol timeout on the CDO server configurable</title>
      <description>Build Identifier: The SignalProtocol has a timeout of 10 seconds. This timeout is not configurable via the cdo-server.xml or otherwise. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>350206</id>
      <title>Add scanner config discovery for cmake projects using -CMAKE_EXPORT_COMPILE_COMMANDS=On flag</title>
      <description>The latest cmake from head supports -CMAKE_EXPORT_COMPILE_COMMANDS=On command line option that can be used to obtain compiler commands in structural form (json) without running the build. It would be nice to support scanner configuration discovery using the json files produced by cmake. Here is a pointer to cmake code where the feature is implemented: http://cmake.org/gitweb?p=cmake.git;a=blob;f=Source/cmGlobalUnixMakefileGenerator3.cxx#l202 En example of code that reads cmake json file is in: https://github.com/klimek/clang-indent/blob/topic-refactoring/include/clang/Tooling/Tooling.h#L133</description>
      <attachments/>
    </issue>
    <issue>
      <id>350331</id>
      <title>Migrating some BLAM functionality to server side commands</title>
      <description>In an ongoing effort to work toward code that is more server-side I am migrating some BLAM functionality to server commands. This includes a review of some BLAM's and their dependencies on client-side components. Most of the BLAMs were simply converted into Operations while a few required more extensive changes due to pre-existing dependencies that were deemed simple enough to be considered "low hanging fruit".</description>
      <attachments/>
    </issue>
    <issue>
      <id>350380</id>
      <title>[shared] Java package can't install because of dependency on m2e</title>
      <description>-- Configuration Details -- Product: Eclipse 1.4.0.20110609-1120 (org.eclipse.epp.package.java.product) Installed Features: org.eclipse.jdt 3.7.0.v20110520-0800-7z8gFchFMTdFYKuLqBLqRja9B15B Cannot complete the install because one or more required items could not be found. Software currently installed: Shared profile 1.0.0.1308119157680 (SharedProfile_epp.package.java 1.0.0.1308119157680) Missing requirement: Shared profile 1.0.0.1308119157680 (SharedProfile_epp.package.java 1.0.0.1308119157680) requires 'org.maven.ide.eclipse [1.0.0.20110607-2117]' but it could not be found</description>
      <attachments/>
    </issue>
    <issue>
      <id>350409</id>
      <title>[content assist] Extended Listener Support for Code Completion Interfaces</title>
      <description>Code Recommenders is working on various code completion engines. One of which is the subwords completion engine. Deepak asked me to bring this completion engine over to JDT (cf. bug #350000) which is IMHO a perfect place for it. However, Code Recommenders doesn't stop with creating few new engines. We would like to track how people use code completion, i.e., when code completion was triggered, in which code context, what has been proposed, what has been selected, what proposals a user looked at etc. This enables us to create more interesting completion engines and tools not only related to code completion. Think of it as an extension to the usage data collector but suited to build Code Recommenders vision of "IDE 2.0" (see http://goo.gl/DKOjW). With our own completion engines we are able to track these events and learn valuable completions. This, however, would require us to keep these engines as part of Code Recommenders which is somewhat counterproductive. It would be great if JDT team could consider (i) to extend the current listener support for completion engines to allow us to plug-in our own listeners that do the book keeping of what has been proposed/viewed/selected and (ii) to open the JavaCompletionProposal hierarchy a bit to provide access to little more context information relevant for our tools. This bug is somewhat related to bug 340945. Any thoughts on that?</description>
      <attachments/>
    </issue>
    <issue>
      <id>350414</id>
      <title>[patch] Store ignored m2e connectors outside project pom.xml</title>
      <description>Build Identifier: 20110615-0604 .. In consideration of various discussions on the m2e-users mailing list. In my view, is the attempt to store M2e settings within a platform and !IDE! independent element, such as pom.xml utterly wrong located. I’m using maven because it is an independent build tool, which does not distinguish what is used for developing or building maven projects. Even if further maven versions or other IDE’s or maven embedding tools ignore those excludes (at the moment), I don’t wanna be forced to edit all my pom’s or at least the parents (If you got any parents..) for developing with Eclipse. Consider a dev team or contributors to an open source project, which use different tools (IDE) to develope, you will end sharing information in pom.xml's which are not needed for the build and aren't even useful for every contributor. suggestions: 1 store the ignored connectors into an xml which is located next to the project pom. For those who want to share this config, simply check the file into scm. For those who don't want, just ignore the file in scm. For those without scm, well... 2 store the ignored connectors in the user's m2e workspace configuration. 3 make it an option so the user can decide if he want's his poms modified or not and if declined ignore to check for lifecycle mappings. 4 If no m2e connectors were found, just warn the user instead of an error If there were further suggetions, please add them in the comments. I'd highly support suggestion one, because it's the most transparent solution and is also easy to share with others. Reproducible: Always Steps to Reproduce: 1. import a maven project which includes plugins in the pom which are unsupported by m2e.</description>
      <attachments/>
    </issue>
    <issue>
      <id>350487</id>
      <title>JPA 2.1 Specification defined support for Stored Procedure Calls</title>
      <description>Requires implementation of new Stored Procedure Query interface and related interfaces including Named Stored Procedure Queries. This should mostly be supported in Native EclipseLink bug will require core updates to support multiple resultsets from a single stored procedure call.</description>
      <attachments/>
    </issue>
    <issue>
      <id>350660</id>
      <title>[spell checking] More words for the spelling dictionary</title>
      <description>Please add: editable</description>
      <attachments/>
    </issue>
    <issue>
      <id>350991</id>
      <title>[content assist][api] Allow to re-sort proposals</title>
      <description>We've built a "subwords" completion engine for JDT (see bug #350000 and http://goo.gl/1MzbO for details). The engine scores the overlap between the user-entered prefix token and the proposal text using "bigrams". In a nutshell, it counts the number of similar pairs between a prefix token and a proposal to determine its relevance. This engine works well if the user triggers code completion and picks a proposal w/o any further typing. However, if a user continues typing with an open completion popup window, the score of each subwords proposal changes because of the changing amount of similar pairs a completion shares with the prefix. JDT completion system does not support such relevance updates. When a user enters a new character it just checks whether the completion is still applicable, and if not removes it from the view. To make subwords completion work well with JDT the completion system must reorder proposals by their updated relevance, i.e., re-run the relevance sorter on the available proposals. I would like to request such a change to JDT completion system. Best, Marcel</description>
      <attachments/>
    </issue>
    <issue>
      <id>351078</id>
      <title>[DB] Support raw replication in HorizontalBranchingMappingStrategyWithRanges</title>
      <description>Build Identifier: 4.0 GA HorizontalBranchingMappingStrategyWithRanges does not implement: rawImportUnreviseNewRevisions rawImportReviseOldRevisions and thus raw replication is not working with this mapping strategy. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>351165</id>
      <title>[1.7] API to get the type arguments of the declaring type for constructor invocations</title>
      <description>BETA_JAVA7 For bug 351048, we'd like to render the type arguments of the declaring type for a constructor invocation in the Javadoc hover. Example: new ArrayList&lt;&gt;() codeSelect returns an IMethod with key: Ljava/util/ArrayList&lt;Ljava/lang/String;&gt;;.()V The necessary information is already available in the key, but BindingKey doesn't offer API to read the type arguments of the declaring type. Best would be an API like this: /** * Returns the binding key of the declaring type of the element * represented by this binding key. If the binding key does not represent * a member or if the member doesn't have a declaring type, returns * &lt;code&gt;null&lt;/code&gt;. * * @return the type binding key or &lt;code&gt;null&lt;/code&gt; * @since 3.7 */ public BindingKey getDeclaringType() { // FIXME: this is a hack int dot = this.key.indexOf('.'); if (dot == -1) return null; return new BindingKey(this.key.substring(0, dot)); } An alternative could be to improve IMethod#getDeclaringType(): Currently, this returns an unresolved type, but it could also return a resolved type whose key contains the type arguments.</description>
      <attachments/>
    </issue>
    <issue>
      <id>351194</id>
      <title>Provide JNLP (Java WebStart) support for Eclipse Features</title>
      <description>I would like to build a JNLP feature with Tycho. Main use case is to WebStart Eclipse RCP applications that don't use p2. I have successfully ported https://issues.sonatype.org/browse/TYCHO-508 to the current Tycho head, but there is a lot more to do. Here is what I have in mind: - A new Mojo for JLNP feature creation - Works similar to the Product Mojo - The Main Feature has either to create a Template for the master JNLP or some properties that Tycho might generate it on the fly. - All included features have to be build recursively and JNLP files have to be created. At the end, the target should look like target main.jnlp features feature1.jnlp feature2.jnlp ... plugins plugin1.jar plugin2.jar ... I would be happy to work on the implementation but I am a Maven Newbie and would need some help to getting started. Is anyone except me interested in having this integrated into Tycho?</description>
      <attachments/>
    </issue>
    <issue>
      <id>351279</id>
      <title>Runtime Widget Project, EGL &amp; Dojo</title>
      <description>Setup the runtime widget project, add wizard page to import these project when creating new EGL project. A few things to be considered are - Dojo widget projects and Dojo runtime in two different projects are bringing confusion. Needs to be simplified - How can runtime widget project be shared between RBD &amp; EDT</description>
      <attachments/>
    </issue>
    <issue>
      <id>351303</id>
      <title>Register an URL protocol with the operating system</title>
      <description>Build Identifier: As the "open with" functionality has been already implemented (https://bugs.eclipse.org/bugs/show_bug.cgi?id=301030), it would be great if eclipse would register a URL protocol so links to local files can be opened by eclipse. This is especially helpful for web development, where stacktraces are being displayed in the browser, and using a specific url protocol would open the file link in the app which registered the protocol: ie eclipse://open?file=/path/to/file.txt&amp;line=60 For a plugin i've created a workaround for OSX, which simply uses an Applescript that registeres the eclipse:// protocol with Mac OSX and uses applescript to open the file link in eclipse: https://github.com/pulse00/Symfony-2-Eclipse-Plugin/tree/master/org.eclipse.symfony.ui/launcher/osx/symfony2eclipse.app/Contents I think it would be a useful feature if eclipse could handle this natively. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>351320</id>
      <title>[Gogo] Merge the SSH and telnet configurations</title>
      <description>Here we will track discussions if merging the SSH and telnet shell configurations can be done.</description>
      <attachments/>
    </issue>
    <issue>
      <id>351432</id>
      <title>Add git merge --squash</title>
      <description>Sometimes while working on a local branch there is a need to squash all commits into another local branch, e.g. master.</description>
      <attachments/>
    </issue>
    <issue>
      <id>351487</id>
      <title>tycho-p2-director-plugin should consider p2 metaRequirements</title>
      <description>Build Identifier: 0.12.0 When trying to build a product that includes a plugin that relies on a custom touchpoint action (a plugin with a p2.inf with : instructions.configure=com.compuware.touchpoint.touchpoint(); for example); the build of the product will fail. The reason is because Tycho's tycho-director-plugin relies on a static p2 runtime : tycho-p2-runtime-0.12.0.zip This runtime does not use a p2 profile when running p2 director, and then can not execute the p2 metaRequirement (http://wiki.eclipse.org/Equinox/p2/Customizing_Metadata#Capability_Advice:) So the runtime used for launching p2 director (tycho-p2-runtime-0.12.0.zip unzipped in M2_REPO\org\eclipse\tycho\tycho-p2-runtime\0.12.0\eclipse) is not able to "evolve" ; that's why you can not install in a product a plugin relying on custom touchpoint actions Today, p2 director is launched by tycho-p2-director-plugin (DirectorMojo.java) in an embedded equinox launcher (DefaultEquinoxEmbedder) that loads the plugins located in M2_REPO\org\eclipse\tycho\tycho-p2-runtime\0.12.0\eclipse\plugins To solve this problem, the runtime used for launching p2 director should be run in a way that would allow it to evolve (with a p2 profile for example) A workaround would be to allow the user to specify its own runtime used for launching p2 director (that would contain all the necessary plugins and associated custom touchpoints) Reproducible: Always Steps to Reproduce: 1. try to build a product including a plugin that has a custom p2 touchpoint action to execute (take the attached zip example as a reference and mvn clean install the parent) 2. tycho's p2 director runtime will not be able to find the required touchpoint action 3. the product creation will fail because p2 director will not succeed</description>
      <attachments/>
    </issue>
    <issue>
      <id>351793</id>
      <title>Enhance LockMgr with write options</title>
      <description>A write option (or write reservation) is a lock that prevents other views from obtaining a write lock, but does not prevent others from obtaining read locks. How is it different from a read lock? A write option can only be held by *one* view. Why do we need this? So that apps can prevent writes without preventing read locking. Patch coming up.</description>
      <attachments/>
    </issue>
    <issue>
      <id>351903</id>
      <title>[IGenerator] Enable generating artifacts from multiple resources</title>
      <description>For code generation it is a common use case to create artifacts that would need elements from all models (e.g. deployment descriptors, index pages in documents etc.). Regeneration of these artifacts must be triggered whenever something changes, but only once per builder invocation. Currently the Xtext framework offers easy support to create 1:n artifacts through the JavaProjectBasedBuilderParticipant and the IGenerator interface. An additional means is required to create from a collection of elements, e.g. from a ResourceSet.</description>
      <attachments/>
    </issue>
    <issue>
      <id>351912</id>
      <title>Lock coordination with SynchronizableRepositories</title>
      <description>Currently locks are largely meaningless in a master-clone (M/C) replication config, because they are only obtained in the clone, which typically has only a single client. The locks therefore do not constrain the operations of other clients on the master repo. To make locks meaningful in an M/C config, locks should be obtained on both the master and the clone, whenever the clone is ONLINE. This should be analogous to a write-through transaction, in the sense that the client requests the locks on the clone repo it's working with, and this clone repo transaparently tries to obtain the locks on the master its synchronizing with. We could call this a "lock-through" strategy ;-) A lock request would succeed only if the lock is obtained on both the master and the clone. When the clone is OFFLINE, the clients lock requests should automatically be targeted at its local branch. Again, this is analogous to how commit behavior varies between OFFLINE and ONLINE modes.</description>
      <attachments/>
    </issue>
    <issue>
      <id>351945</id>
      <title>Migrate widget LCAs to write JSON responses</title>
      <description>With the introduction of the new protocol we need to migrate all widgets to use the new messages instead of JavaScript for communication. I think we can just say that the protocol is finished when all widgets has been migrated.</description>
      <attachments/>
    </issue>
    <issue>
      <id>351956</id>
      <title>[1.7][clean up][quick assist] Remove unnecessary type arguments (was: Suggest to use &lt;&gt; where applicable)</title>
      <description>Bug 349336 provides a quick fix. This can be provided as a cleanup and also possibly as a quick assist (see Bug 349336 comment 12)</description>
      <attachments/>
    </issue>
    <issue>
      <id>351963</id>
      <title>Support customized markers.</title>
      <description>The markers that the xtext builder creates cannot be customized. We would like to customize the marker description (for example "Xtext Check (Fast)") in the error view to something of our own choosing.</description>
      <attachments/>
    </issue>
    <issue>
      <id>352002</id>
      <title>Make logic at getMatchedEObject(EObject) replaceable</title>
      <description>Cross posting from newsgroup: we've been studying to implement some client use-cases reusing EMF Compare to determine differences between 2 models stored in a CDO Server. Among several other issues yet to study, I've face scalability issues with GenericDiffEngine.getMatchedEObject(EObject) and AbstractCheck.getMatchedEObject(EObject). org.eclipse.emf.compare.diff.engine.GenericDiffEngine.getMatchedEObject(EObject) org.eclipse.emf.compare.diff.engine.check.AbstractCheck.getMatchedEObject(EObject) org.eclipse.emf.compare.diff.engine.check.AbstractCheck.isUnmatched(EObject) Both method implementations (which are, by the way, duplicated) do use CrossReferencing to determine which EObjects have been matched during the Match stage. It seems to me that using CrossReferencing to do this may be convenient when objects are in memory, but definitely not when objects are stored remotely. And even when objects are in memory, using CrossRefercing seems like a bit of overhead. While doing some profiling, I found it was called dozens (if not hundred) of times per second. Hacking a bit the code I found its way faster (and probably would have a negigible effect over memory footprint) to have a "match cache". Something like: protected Map&lt;EObject, EObject&gt; matches; and then getMatched would look like this: protected final EObject getMatchedEObject(EObject from) { return matches.get(from); } Havent used it, but probably that would need some refinement to work in a Three Way Comparison scenario, I guess. This seem to work very well to me. I decided to extend and contribute my own GenericMatchEngine and AttributesCheck/ReferencesCheck implementation, overriding those getMatchedEObject methods, but as you already see, those are declared as final. Using JDT a bit reveals that this getMatchedEObject is used very much in each class (used in 11 methods at GenericDiffEngine), and it also seems to me very much important to leave it unextensible / replaceable. I would like to ask if it would be feasible to have some intermediate interface, something like "MatchManager" which takes care of this. The default implementation will use CrossReferencing, but users could contribute different MatchManager implementations. Don't care about the implementation specifics as long as this becomes pluggable / replaceable. Also, locate this concern in a single place, and you'll get rid of duplicate code</description>
      <attachments/>
    </issue>
    <issue>
      <id>352016</id>
      <title>[Sync View] Team synchronization filtering</title>
      <description>Build Identifier: 4.2 feature request In our product, the copyright information is captured in the source code via a "public static final" field. The problem occurs when trying to detect changes between branches of the product. Often times, every single class is shown as changed because of the copyrights being updated. This makes the compare pretty much useless to detect *real* changes. If the synchronization view would allow me to select a difference, then choose to ignore all occurrences of that particular change, then I could see what has really changed. I would want the filtering to be on the outline tree on the left, not necessarily the text compare viewer for the file. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>352119</id>
      <title>Curved connection style (splines)</title>
      <description>Graphiti should support an additional connection type: Curved connection style (splines)</description>
      <attachments/>
    </issue>
    <issue>
      <id>352120</id>
      <title>Diagrams in Views</title>
      <description>Graphiti should support diagrams in Eclipse views.</description>
      <attachments/>
    </issue>
    <issue>
      <id>352618</id>
      <title>[Restructuring] To be able to use non derived facet structural features and save them values.</title>
      <description>We need to be able to use non derived facet structural features and save them values.</description>
      <attachments/>
    </issue>
    <issue>
      <id>352708</id>
      <title>EntityManagerFactoryBuilder to create more than one EntityManagerFactory</title>
      <description>According to the JPA-specs (5.3 Obtaining an Entity Manager Factory) "More than one entity manager factory instance may be available simultaneously in the JVM.", but also that "There is only one entity manager factory per persistence unit". Unfortunately, Gemini JPA's EMFB design doesn't support multiple EMF creation. Typically that's sufficient for simple scenarios where there's only one datasource, or even a set of datasources that never change. In a multi-datasource environment, where during an application's lifetime new datasources come into play and need to be accessed, and where you have to decide on each call which database is the target of your operation, you're at a loss. However, the fact that there's only one EMF allowed per persistence unit remains. The main identifier for an punit is it's name. So I wish for a way to use your EMFB to create a new EMF for a new datasource (via the 'properties' parameter) and, to be in line with the specs, a new punit (which would/could/should be, in fact, a renamed "clone" of the punit at hand). The EMFs could still be cached and reused, identified by their punits or punit's names. I hope that this is possible and fits into your agenda!? See also: http://www.eclipse.org/forums/index.php/m/699026/ Kind regards, Florian</description>
      <attachments/>
    </issue>
    <issue>
      <id>353013</id>
      <title>Allow to disambiguate the config area of multiple installs by install dir hash</title>
      <description>+++ This bug was initially created as a clone of Bug #168445 +++ CQ:WIND00254020 In bug 168445, a mechanism was added which disambiguates the auto-generated configuration area for read-only Eclipse installs by appending a hashcode of the installation directory. Unfortunately, this mechanism - doesn't work for installs that are physically writable - always uses the default "@user.home/.eclipse/*" pattern for the user's local configuration area. Many Eclipse-based products today use the "osgi.configuration.area" setting in config.ini in order to specify a custom location for their configuration, and thus run into the issue of multiple installations of the same product trampling on each other's configuration area. This is a request to make it possible and disambiguate such custom configuration locations by install dir hash as well, like with the default auto-generated location.</description>
      <attachments/>
    </issue>
    <issue>
      <id>353056</id>
      <title>Add support for multiple Valgrind launch configs</title>
      <description>Build Identifier: I20110613-1736 As a bundler of linuxtools, and the Valgrind plug-in specifically, we would like to be able add multiple launch configs for the Valgrind plug-in so that we can make it easier for our customers to use specific Valgrind executables that we provide. For example, we may have two Valgrind executables in addition to /usr/bin/valgrind. In our case, we can have /opt/at4.0/bin/valgrind and /opt/at5.0/bin/valgrind, and perhaps others in the future. We would like to make it simple for users of our SDK to choose a profile config that already has the path to the valgrind executable pre-configured correctly. Reproducible: Always Steps to Reproduce: Notice that the current upstream remote Valgrind code doesn't provide a simple way to accomplish the above.</description>
      <attachments/>
    </issue>
    <issue>
      <id>353355</id>
      <title>discuss mapping of Red Hat Koji architecture to Builds api</title>
      <description>Build Identifier: I am building a Mylyn Builds connector for Red Hat's build system called Koji. I believe there are certain differences between Hudson and Koji keeping me away from starting the code. First, Koji is a simple build system that does not run tests, therefore, there are no build numbers or culprit. Second, each build request will be treated as a task where each task may trigger multiple child tasks (which corresponds to an actual build) for different build targets (like fedora15i386, fedora15x86_64, redhatEnterprise6i386, etc.) or dependencies (like one must first build the source rpm before the actual rpm can be built). If the user would like to restart the building process, he/she will push it as another task again. Therefore, we are interested in monitoring the tasks instead of a build. Finally, the artifacts are tied to a build instead of a task in Koji, and due to the fact that we are interested in monitoring the task, we will not be able to fill in the artifacts field of the Build class. Looking forward to read your comment and thanks in advance for your kind advice and assistance. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>353463</id>
      <title>[BuilderParticipant] Allow configuration of outlets</title>
      <description>Both the language designer as well as the final language users should be able to configure the different outlets. For the language designer I propose a IGeneratorExtension1 interface which returns a description of outlets. The framework should stick with the current default behavior if the IGenerator doesn't support this new interface. For the end user the location of the different outlets should be configurable in the workspaces's and project's preferences.</description>
      <attachments/>
    </issue>
    <issue>
      <id>353691</id>
      <title>Add lock notifications and lock caching</title>
      <description>When an object gets locked/unlocked by some client, other clients do not get notified about this. I propose to add a notification mechanism for this.</description>
      <attachments/>
    </issue>
    <issue>
      <id>353714</id>
      <title>content assist decorated</title>
      <description>Build Identifier: 0.7 We need to add decorated for each proposal.(like icon to diff each function field etc) Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>353771</id>
      <title>take advantage of new Java 7 features to improve jgit</title>
      <description>when running on Java 7 we could take advantage of new Java features to improve JGit/EGit: - java.nio.file.attribute.BasicFileAttributeView could be used to improve performance of retrieving file attributes needed for git index - java.nio.file.WatchService could be used to replace EGit's RepositoryChangeScanner by listening to filesystem events, this should improve performance and remove the latency caused by the scheduled job</description>
      <attachments/>
    </issue>
    <issue>
      <id>353775</id>
      <title>Static web project facets should be allowed with Java facet</title>
      <description>Build Identifier: Eclipse 3.6.2 There are projects that contain both java and web resources but are not JavaEE web modules, such as Android and Blackberry projects using PhoneGap. As such these projects can benefit from the web tools that are enabled in web projects. However currently the static web project facet conflicts with Java facet. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>354087</id>
      <title>[checker] Checker for unneeded external header guards</title>
      <description>Build Identifier: 8.0 I am currently working on a checker to detect unneeded external header guards. The checker is almost done. I intend to add a quick fix for this as well. External header guards (or 'external include guards) were initially suggested by John Lakos in 'Large Scale C++ Software Design'. They were meant to solve the issue of opening header files many times if they were included in a lot of other files. Compilers back then didn't optimise for this case. In more recent times, compilers detect include guards (or '#pragma once') and simply don't open the included file if it was already included. This makes the external include guards unnecessary. The only thing external include guards currently still do, is clutter up source code and make it harder to read. They also make errors possible (for example by using the wrong HEADERFILE_H in the #define). Example: includedheader.h: #ifndef INCLUDEDHEADER_H #define INCLUDEDHEADER_H int foo(); #endif header.h: #ifndef INCLUDEDHEADER_H #include "includedheader.h" #endif void bar(); Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>354145</id>
      <title>Provide a Tycho plugin for code generation</title>
      <description>GMF Tooling should provide a Tycho plugin to generate code during a Tycho build. Then same way as an Ant task is supported.</description>
      <attachments/>
    </issue>
    <issue>
      <id>354199</id>
      <title>Support content proposals in text field property editor</title>
      <description>Build Identifier: 3.7 Eclipse Indigo Providing content assists for the fields e.g. for Java typed fields we provide content assists that will pull out the Java classes and packages We can refer to the PDE Manifest editor Right now Sapphire doesn't allow us to bind CTRL+SPACE to provide content assist for fields Reproducible: Always Steps to Reproduce: 1. Add CTRL+SPACE to a Action 2. Invalid Key Sequence message is displayed 3.</description>
      <attachments/>
    </issue>
    <issue>
      <id>354230</id>
      <title>[releng] Ship OSGi source bundles</title>
      <description>Build ID: 0.8.0 (Indigo) I can't find any prebuilt source bundles for linuxtools. This is a problem for us, since our company has decided to ship source for any EPL code that we include in our product, in order to comply with the EPL requirement of making the exact version of source available that's used in a build. I'd prefer downloading prebuilt source rather than packaging these myself. I've heard that creating source bundles is easy with Tycho but haven't done it myself yet. Perhaps the parent POM from bug 339915 can help. It would be super helpful for us to get source bundles built in 0.8.1.</description>
      <attachments/>
    </issue>
    <issue>
      <id>354245</id>
      <title>Enhanced support for XCore</title>
      <description>As we add support for Xcore we need to infer a Jvm Types model from GenModel instances so it's convenient to have access to more of the utility methods the GenModel currently internally...</description>
      <attachments/>
    </issue>
    <issue>
      <id>354276</id>
      <title>Support initial values for properties</title>
      <description>Build Identifier: 3.7 Eclipse Indigo Serializing the Default Valued properties if the user doesn't provide or change the default value, but right now unless and until we do any action like click the property will not be serialized Reproducible: Always Steps to Reproduce: 1. Create a Model with @DefaultValue 2. Add this property to editor, the default values is shown in the property editor 3. Now save the model it will not save the field with default value</description>
      <attachments/>
    </issue>
    <issue>
      <id>354353</id>
      <title>[UI] "Select Element" actions</title>
      <description>In JDT is you press CTRL+SHIFT and one of the cursor keys, you are able to make textual selections based on the underlying AST. As the needed information is there in every Xtext language as well, we can provide this feature by default. The semantics seem to be: CTRL+SHIFT+LEFT - select left sibling as well CTRL+SHIFT+RIGHT - select right sibling as well CTRL+SHIFT+UP - select parent sibling CTRL+SHIFT+DOWN - restore previous selection</description>
      <attachments/>
    </issue>
    <issue>
      <id>354367</id>
      <title>Support symlinks</title>
      <description>on Java 7 we could implement jgit support for symlinks on OSes supporting them</description>
      <attachments/>
    </issue>
    <issue>
      <id>354426</id>
      <title>Support creation of generic EGL projects using concept of a project template</title>
      <description>Background: In CE, we only had 1 type of project (a "CE" project that had Java and JavaScript capabilities). In EDT, we will have multiple types of projects, including at least 2 out of the gate: 1) "CE"-like project, and 2) basic/general project (e.g. Java only). Theresa and I had a conversation about this today and came to the conclusion it makes a lot of sense to expose these different "project types" as templates, like the template support in the New EGL Record wizard. The list of templates will certainly grow as new generators are added, since various combinations of generators could result in various, specialized project types. Project templates would be chosen by the developer like part templates, but would augment (enhance) the base EGL project that is created by the wizard. Project templates could optionally provide a UI for configuring elements about it. For example, the "CE" (we will find a new name) project template would allow the user to select which widget libraries to import (just like we offer today). The settings for a basic project may be as simple as allowing the user to select the generator(s) to use and the projects to include in the new project's build path. At a minimum, we need to support the developer creating a CE-like project (like we have today in EDT) and a basic ("Java only", for example) project. Proposed wizard flow: page 1 - EGL Project - Project name - location (defaulted) - base package name (optional) page 2 - Templates - Templates o Basic &lt;-- contributed by EDT core o Web client &lt;-- contributed by "CE2" plugin, supports JavaScript/RUI only o Web client with services &lt;-- contributed by "CE2" plugin, supports JavaScript/RUI and Java page 3 (optional): configuration settings for the selected template page 4 - EGL Settings (Build Path) Additional details .... 1) The New EGL Project wizard should be part of EDT Core and the "Basic" project template should be contributed by EDT core as well. So, if the developer only has the EDT Core "IDE" installed (not "CE2" extensions), he/she would only see 1 project template (the "Basic" project template), assuming no other templates had been contributed. 1a) The first page of the New EGL Project wizard will ask for project name, location, and base package (see Bug 352765 - Allow user to input a "base package" in new project wizard). This base package will be used by templates to create a set of packages when the project is created and configure each package with the appropriate generator (if supported by the selected template). 2) The Basic project template will have at least 1 configurable setting: default generator for the project. I believe Alice had coded this panel at one point already. Need to determine if we should also allow the developer to select a compiler. 3) The "Web client with services" (Java+JavaScript) project template should be contributed by EDT "CE2" (not shipped in EDT core). It will create a project that is configured for both Java and JavaScript and will create the WebContent folders and populate (like we do today). It will ask the user to select a widget library (EGL RUI and/or Dojo). 4) Templates should be contributed (via extension points) similarly to how templates are implemented in the New EGL Record wizard. I am not sure whether the same extension point and interface can be used, since the current part template infrastructure assumes it's enhancing the contents of a new EGL part. The current template extension point also allows the developer to specify just a generic code template ID, which will then leverage the code templates configured under Preferences &gt; EGL &gt; Editor &gt; Templates -- this concept is not applicable for a new project. 5) Templates should be able to contribute UI panels to the New EGL Project wizard (like the New EGL Record wizard). For example, the "Web client with services" project template will contribute a panel that allows the user to select a widget library.</description>
      <attachments/>
    </issue>
    <issue>
      <id>354496</id>
      <title>migrate jdt.ui to git</title>
      <description>This bug is to track the the changes to migrate jdt.ui to git. As a first step, I'll run a test migration to allow the committers to try out this repo before the real migration.</description>
      <attachments/>
    </issue>
    <issue>
      <id>354655</id>
      <title>[RegionDigraph] add a way to set the default install region</title>
      <description>Created attachment 201419 [details] Patch with public interface to modifiy the thread local Currently the thread local is modified internally in the Region objects. That effectively means that no external installer can plug in and install in a region-aware manner without being modified to understand regions. The attached patch contains a proposal to illustrate the idea. In the Virgo integration with p2 I'd like to have public way to set the thread local, so that I can modify it before calling simple configurator's apply configuration and ensure my bundles will go where I want and not in the SC's region. I've tested the patch for these purposes and it works nice. wdyt?</description>
      <attachments/>
    </issue>
    <issue>
      <id>354797</id>
      <title>Contribution of a TreeMapper</title>
      <description>Created attachment 201549 [details] TreeMapper code I have been working on a widget that we plan to use in the BPEL designer soon. It is a TreeMapper that makes easier the definition of mapping between 2 structured objects. It renders objects as trees, and mappings as lines. It relies on classical TreeViewers for Trees, and the mapping stuff is made with Draw2d. However, people don't have to deal with the draw2d stuff, since there is an interface to implement that "resolves" mappings to semantic elements, a bit like a ContentProvider manipulates semantic items to hide SWT items. You can find attached 2 screenshots. The code is working well and available under EPL here [1]. As I've also worked for other projects than BPEL editor (JWT, GMF, Bonita Open Solution, PetalsStudio...), I think there are a lot of use cases for this widget. That's why I'd like to share it with the Eclipse community. Of course, it is still in an "Incubation" phase, but having it part of Nebula will probably increase interest in it, so that it could leave the Incubation phase as soon as several Eclipse project use it successfully.</description>
      <attachments/>
    </issue>
    <issue>
      <id>354799</id>
      <title>Add support for EMap</title>
      <description>Please add support for EMaps in the model to allow fast lookup of child elements by name. Example: options: @Map Option* Option: name=ID '=' Value; Value: ... In my code, I'd like to be able to get Value instances by using options.get(String).</description>
      <attachments/>
    </issue>
    <issue>
      <id>354898</id>
      <title>Provide an option to create class, in addition to browse</title>
      <description>Sapphire-gallery.xml -&gt; Java Type Names -&gt; Required class 2 Notice Sapphire provides a browse button, but it might be useful to provide an option to provide a create class button as well.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355045</id>
      <title>Allow NEW objects to be locked on commit</title>
      <description>Currently a NEW object can only be locked by committing it first, thus transitioning it to CLEAN state, and then locking it. It would be nice if NEW objects could be locked right away. Implementation seems fairly straightforward: NEW objects should have a real lockState object instead of the NOOPLockState than they have now. If any locks are configured, they need to be transmitted during commit and entered into the server-side lockManager.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355057</id>
      <title>[Compatibility] org.eclipse.core.runtime.isBundleInstalled property tester cannot be found</title>
      <description>Steps: 1. Open New Query wizard 2. Press Install More Connectors Nothing happens. Invoking the Discovery Wizard from the search box has no effect either. No error is logged. This is possibly related to bug 321263.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355068</id>
      <title>[modeling] discuss pre-requisites of modeling bridge</title>
      <description>In order to integrate the modeling bridge with the existing build we need to determine the dependencies of the bridge.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355146</id>
      <title>Need an equivalent fda7.jar to be on the java build path to execute java generated code</title>
      <description>in EDT, if I create a basic EGL Project, and uses java generator, there is no java runtime included for me. I have to check out the java.runtime project from eclipse cvs and set the java build path to depends on the runtime project. We need to configure this for the end user automatically, like in RBD, we have the equivalent of fda7.jar, which is set on user's project java build path automatically upon creation or generation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355192</id>
      <title>Migrate 'eclipse.platform.text' to Git</title>
      <description>All CVS projects which have the 'eclipse.platform.text' ACL must be in the Git repo.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355370</id>
      <title>Product-Export for MacOS does not set executable bit on native launcher (when building on Windows)</title>
      <description>I am trying to build an eclipse application with tycho on windows with target environments for windows, linux and mac. The build works just fine and creates a product for each platform, but the product for MacOS can not be started, because the executable bit of the native launcher is not set. This can be reproduced by cloning this tycho demo application: https://github.com/jsievers/tycho-demo and adding a environment for mac to the parent.pom: &lt;environment&gt; &lt;os&gt;macosx&lt;/os&gt; &lt;ws&gt;cocoa&lt;/ws&gt; &lt;arch&gt;x86_64&lt;/arch&gt; &lt;/environment&gt; Make sure you are using tycho 0.13.0-SNAPSHOT instead of 0.12.0, otherwise the build will fail.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355457</id>
      <title>Improve DTD doctype specification in XML binding</title>
      <description>To make Sapphire Xml Binding to support more details of DTD which includes the publicId, systemId and rootElementName. The approach right now uses the @XmlRootBinding and checks for the DTD inside the StandardRootElementController, which is ambigous and unknown to the user. The same issue has been discussed in the fourm post http://www.eclipse.org/forums/index.php/t/235837/</description>
      <attachments/>
    </issue>
    <issue>
      <id>355573</id>
      <title>EGL SQL Data Access Extension</title>
      <description>Created attachment 202034 [details] EGL SQL Access Specification version 0.1 This enhancement defines a specification for how SQL Data Access is added to the EGL Core as part of the EDT 0.7.0 release. See attachment for the actual specification draft 0.1. Subsequent updates to the specification will be added as updated documents with increased version numbers. The intent is for the document version number match the EDT release number when the implementation actually goes out on a versioned milestone. In other words the specification should only reflect what is actually implemented in a given milestone release. The first draft does not contain everything that is part of the EDT 0.7.0 release which is why it is not versioned at that number yet. The specification outlines the most basic core functionality now so that those basics can be worked on and refined. Notably missing/changed so far (and may not show up): - Lists are not allowed as action target operands - no INTO clause - taken over by allowing list of simple fields as targets - keywords like (forUpdate, forUpdateOf, etc) replaced by annotations</description>
      <attachments/>
    </issue>
    <issue>
      <id>355751</id>
      <title>General improvement of XML root binding API</title>
      <description>Need to fix the borken links in the samples, sdk and other identified packages as @XmlRootBinding will be dropped as a result of discussions and implementation of Bug-355457</description>
      <attachments/>
    </issue>
    <issue>
      <id>355766</id>
      <title>Add support equivalent to JAXB RI's @XmlLocation</title>
      <description>From the RI: The @XmlLocation can be specified on: - a field whose type is org.xml.sax.Locator, or - a method that takes a Locator as the sole parameter When a class that contains such a field/method is unmarshalled, such a field/method will receive an immutable Locator object that describes the location in the XML document where the object is unmarshalled from.</description>
      <attachments/>
    </issue>
    <issue>
      <id>355793</id>
      <title>[modeling] create poms to run build and tests</title>
      <description>Every plug-in and feature should have a pom.xml to integrate it with the build and automated tests.</description>
      <attachments/>
    </issue>
    <issue>
      <id>356395</id>
      <title>Add ability to use the Linux "perf" tool from within Eclipse</title>
      <description>Build Identifier: I20110613-1736 perf is a relatively new Linux command-line tool, which was developed by the Linux kernel community, and is still undergoing active development. It would be nice to be able to use perf from within Eclipse in a similar way that the OProfile plug-in provides access to the OProfile toolset. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>356424</id>
      <title>Add Dojo Mobile to EDT</title>
      <description>Determine how to add Dojo mobile to EDT * The project in cvs * The project in widget selection page * The project imported into workspace</description>
      <attachments/>
    </issue>
    <issue>
      <id>356511</id>
      <title>Make pojo programming model accessible from org.eclipse.ui extension points</title>
      <description>Build Identifier: With the extension point programing model being very popular in the IDE and RCP world and the pojo/dependency injection model in e4 being very modern, I wondered if these two concepts could be brought together. I did a quick prototype to check if this is possible for views. I added this to ViewRegistry#postConstruct: String className = element.getAttribute(IWorkbenchRegistryConstants.ATT_CLASS); if (className.startsWith("platform:")) { descriptor.setContributionURI(className); } else { descriptor.setContributionURI(CompatibilityPart.COMPATIBILITY_VIEW_URI); } Instead of only: descriptor.setContributionURI(CompatibilityPart.COMPATIBILITY_VIEW_URI); This makes the new e4 features like service tracking using @Inject accessible for programmers using the extension points. Of course, the class name starting with "platform:" is not a good distinctive criteria for deciding if the value should be treated as legacy or e4, something better would have to be found. But I wanted to validate my suggestion first and ask for your opinion about the general approach. A more general approach would also need to included editors, command handlers, etc. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>356579</id>
      <title>Target platform filtering</title>
      <description>With the improved target file support in Tycho 0.13.0 (bug 342808), it is possible to set the target platform to a fixed list of units (through features &amp; slicer mode). With this constructive approach, one can exercise full control over the space in which project dependencies are can be resolved. Still there is also the case, where I only want to restrict the versions of certain units in the target platform, and I don't care about how Tycho resolves project dependencies to other units. This is for example the case if I my projects has a lot of dependencies to Indigo, and just for a small part, e.g. Eclipse Platform, I want to add a newer version to the target platform and ensure that only that newer version can be used (cf. bug 356437). Technically, this is probably best implemented by allowing an option to remove content from the target platform. (Enforcing a particular version would then be implemented as "remove all other versions".) The syntax to do this could be a configuration parameter in target-platform-configuration, with options to remove units and to restrict the allowed version range.</description>
      <attachments/>
    </issue>
    <issue>
      <id>356580</id>
      <title>[M2x IDE Integration] Open an information dialog when code generation finished or aborted</title>
      <description>An information dialog should be opening after launching code generation using wizard in order to inform to end users the code generation status result (ok, error, aborded ect.)</description>
      <attachments/>
    </issue>
    <issue>
      <id>356621</id>
      <title>Allow customization of diagram palette compartments</title>
      <description>Currently it displays "Connections" and "Objects" as the section labels in the diagram palette. We should allow customization of those two labels through diagram page def: &lt;connection-palette-label&gt;My Connections&lt;/connection-palette-label&gt; &lt;node-palette-label&gt;My Nodes&lt;/node-palette-label&gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>356629</id>
      <title>PHP explorer does not sort folders or files alphabetically - sort order is erratic</title>
      <description>Build Identifier: Build id: I20110613-1736 (Eclipse version 3.7.0) The PHP Explorer - in contrast to the Project Explorer - does not sort the content of projects or project subfolders alphabetically. This happens at least after working some time with the project contents and after including more and more folders - also linked folders. There is no obvious way to remedy the erratic sorting order by the eclipse user - the only way is to use other project views. Just in case that there might be problems with other eclipse add ons: In addition to PDT I use Mylyn, SVN, WDT, export utilities to publish files on remote servers and the remote system explorer utilities among other add ons. This bug is quite old - it appeared several in the community forum since 2008. Maybe it is a regression bug ? Reproducible: Always Steps to Reproduce: 1.Generate several PHP projects 2. Fill it with contents of different kinds - new folders, copy in folders, linked folders 3. Fill the folders with contents 4. Link to SVN and use checkins if you want 5. Check the order of the folders in the PHP explorer view - looks more or less erratic 6. Compare to "Project Explorer" view - there you get consistently alphabetical sorting on all levels of the folder and content hierarchy.</description>
      <attachments/>
    </issue>
    <issue>
      <id>356796</id>
      <title>"GroupId is duplicate of parent groupId" warning generated</title>
      <description>Build Identifier: M20110210-1200 i have existing maven projects (&gt; 150) that reference as parent a single pom. the pom is used to provide common configuration (custom plugins, dependency redefinitions to exclude some dependencies, ...) therefore, all projects do reference the same parent pom: whether their own groupId might be the same as he parent's one or be different, it is specified. i was using previous integration of the m2e (when hosted at sonatype) and it was running fine (except for some inconsistencies in the way (transitive) dependencies were resolved). therefore i upgraded and found the current version very accurate. however, since i started "converting" projects into 'Maven project', i noticed the message "GroupId is duplicate of parent groupId" when opening the pom in the editor ... and all projects are now flagged as containing warnings. 1- i searched the web and did not find conclusive information about this issue and the reason such warning is generated (http://neo4j.org/forums/#nabble-td3217906) 2- i looked at the sources and (think) i found the code that generate the warning: org.eclipse.m2e.editor.xml.internal.MarkerLocationService in its static method checkParentMatchingGroupIdVersion (). is it possible to disable such warning in the project as it now renders very difficult to figure whether its code related or that "warning" ? Reproducible: Always Steps to Reproduce: 1. have a parent-pom artifact in your maven repository 2. create a maven project in eclipse, referencing the parent-pom artifact as parent and using the same group id as new artifact definition 3. confirm the creation the warning message appears.</description>
      <attachments/>
    </issue>
    <issue>
      <id>356832</id>
      <title>Allow use of external mergetool</title>
      <description>Build Identifier: 1.1.0.201109060639 The current mergetool uses the default Eclipse compare editor to merge files. It would be great if this could be made customizable and use an external tool like kdiff3 or Beyond Compare. The configuration is already present in .gitconfig so it could be shared with existing command line installation. Introduce in preferences Team&gt;Git&gt;Merge section a select box with the following choices - Use Eclipse compare editor - Use default git merge tool - Use custom git merge tool In case the last option is selected, an additional text box appears and allow user to input the 'id' of the merge tool (could be improved by reading all merge tools available in the configuration) Reproducible: Always Steps to Reproduce: 1. Trigger a merge between 2 branches with conflicts 2. Select a file with conflict and right click &gt; merge tool 3. The selected merge tool should</description>
      <attachments/>
    </issue>
    <issue>
      <id>356851</id>
      <title>[formatter] Default line size of Java code formatter should be increased to 120</title>
      <description>I suggest to change the default line size of the Java Editor to 120. I did a poll in my blog and the majority would like to see this change. http://www.vogella.de/blog/2011/09/06/eclipse-default-line-length-of-80-chars-outdate Comments on Google+ seemed to follow the same pattern: https://plus.google.com/104044918586174763681/posts/EydgeWHdvyX</description>
      <attachments/>
    </issue>
    <issue>
      <id>357270</id>
      <title>[disassembly] Show opcodes in the disassembly view</title>
      <description>With GDB 7.3, the command -data-disassemble can also return the list of opcodes matching the disassembly. It would be nice to have an option to show those opcodes in the disassembly view.</description>
      <attachments/>
    </issue>
    <issue>
      <id>357294</id>
      <title>[api] provide API for converting content to wiki markup</title>
      <description>API is needed to convert content to wiki markup. Content source format could be HTML, other markup languages, or some arbitrary format. DocumentBuilder provides a great API and abstraction for driving content generation in the target output format. By using this common API, 3rd parties would be able to support new source formats simply by implementing a parser driving the document builder API. The current use case it to target Textile markup, however targeting other markup languages could also be needed. Each target output format would need its own implementation of DocumentBuilder in much the same way as we have subclasses for all of the currently supported output formats (such as HTML, Dita, DocBook, XSL-FO).</description>
      <attachments/>
    </issue>
    <issue>
      <id>357386</id>
      <title>Move generic parts from Virgo Server Editor to Libra</title>
      <description>Created attachment 203164 [details] Move Review v0.1 I plan to move some generic parts from the Virgo Server Editor (Virgo Tooling) to Libra. These are the Bundle Overview, the Bundle Dependency Graph and the Server Console editor parts. Such move has been discussed during the proposal phase of the Libra project. I think now is the best moment to make this for Juno, and I have some time to invest in this task. Since this is a move of a "significant chunk of code" from one Eclipse project to another, we have to go through a Move Review as described by the Eclipse Development Process. Attached is an initial draft of the Move Review paperwork. You can find more details about the planned move inside the document. I expect the document to evolve based on the discussion in this bug. The final version of the document will be the paperwork for the actual Move Review. I add several persons to Cc of this bug: - Martin Lippert, Glyn Normington and Christopher Frost as committers in both Libra and Virgo project - Wayne Beaton as a mentor for the Eclipse Development Process If you think that anyone else would be interested to this move, then please add it to the Cc list. I will also post to the libra-dev and virgo-dev mailing lists. As first step, please read the attached document and comment any opinion in this bug.</description>
      <attachments/>
    </issue>
    <issue>
      <id>357442</id>
      <title>Extend cygwin toolchain detection algorithm</title>
      <description>Build Identifier: 7.0.2 In the current implementation the cygwin detection is done in this order: 1. Check each of the PATH environment variable values whether the path + "cygwin1.dll" exists. The CYGWIN bin folder must be added to the PATH variable. 2. Find the name "rootdir" under the registry key "SOFTWARE\Cygwin\setup" 3. Find the name "rootdir" under the registry key "SOFTWARE\Wow6432Node\Cygwin\setup" 4. Find the name "native" under the registry key "SOFTWARE\Cygnus Solutions\Cygwin\mounts v2\"+ "/" 5. Check existence of folder c:\cygwin If the root is found then it is checked whether the the databse file [cygwin_root]/etc/setup/installed.db is available and the following packages are installed: * gcc * binutils * make If this is the case then CDT will provide the CYGWIN related functionalities. ================================================================================== I would like to have two more checks for finding the cygwin root folder so that it looks like this: 1. Check for CYGWIN_HOME env. variable and then check for cygwin1.dll 2. Check for cygwin folder next to eclipse installation/executable 3.(1.) Check each of the PATH environment variable values whether the path + "cygwin1.dll" exists. The CYGWIN bin folder must be added to the PATH variable. 4.(2.) Find the name "rootdir" under the registry key "SOFTWARE\Cygwin\setup" 5.(3.) Find the name "rootdir" under the registry key "SOFTWARE\Wow6432Node\Cygwin\setup" 6.(4.) Find the name "native" under the registry key "SOFTWARE\Cygnus Solutions\Cygwin\mounts v2\"+ "/" 7.(5.) Check existence of folder c:\cygwin Reproducible: Always Steps to Reproduce: See details</description>
      <attachments/>
    </issue>
    <issue>
      <id>357503</id>
      <title>Support customizing product archive file names</title>
      <description>Hi, customizing the names of zip file that come out of a product build should be possible. The attached patch adds support for this feature by introducing String "zipFileName" and boolean "includeVersion" as configuration properties for the director bundle. Btw. this has also been requested on the mailinglist before.</description>
      <attachments/>
    </issue>
    <issue>
      <id>357613</id>
      <title>Optionally make WRITE_OPTIONs mandatory</title>
      <description>Bug 351793 introduced the WRITE_OPTION type of lock. It would be nice if a repository could be configured to require a lock requester to own a WRITE_OPTION before granting a WRITE lock. That way, this type of lock would become of informational value in addition to preventing writes by others. That is, if WRITE_OPTIONS are mandatory, and noone is holding a WRITE_OPTION, then that indicates that noone is planning to perform a write; or at least noone objects to others writing.</description>
      <attachments/>
    </issue>
    <issue>
      <id>357621</id>
      <title>Improve the label displayed for Customization and Facets</title>
      <description>In the dialog to load a customization, I think you should precise the metamodel for each customization. I think there is 2 ways to do that : - add a tag [UML/Ecore/...] before the name of the customization + sort by alphabetical order or - use a TreeViewer for the group the customization by Metamodel : - UML - customization1 - customization2 - Ecore - customization1,... I do the same comment for the Load Facet Dialog</description>
      <attachments/>
    </issue>
    <issue>
      <id>358077</id>
      <title>[UMLPropertiesView][Usability] The UML property view should be improved for usability concerns</title>
      <description>This is a global task for all UML property view improvements. The UML property view is now highly customizable : this task lists all the improvements the users would like to see in the default UML property view, and tracks the modifications brought to it.</description>
      <attachments/>
    </issue>
    <issue>
      <id>358152</id>
      <title>"Import Projects..." should appear in "Git Repositories" view's context menu for multiple projects</title>
      <description>Latest nightly "Import Projects..." should appear in "Git Repositories" view's context menu if multiple projects are selected in the view (inside the "Working directory"). Both from the context menu and via File &gt; Import, the initial selection should correspond to the projects selected in the view, if any.</description>
      <attachments/>
    </issue>
    <issue>
      <id>358200</id>
      <title>[Xtend] Semantic Syntax Coloring</title>
      <description>Especially having some visual indication whether some method call is an extension method or not, seems to be very interesting. Also the typical italics style for statics would be good.</description>
      <attachments/>
    </issue>
    <issue>
      <id>358215</id>
      <title>[Xtend] fold import section</title>
      <description>The imports sections should be foldable and folded by default.</description>
      <attachments/>
    </issue>
    <issue>
      <id>358295</id>
      <title>Need access to selection in the list property editor</title>
      <description>Build Identifier: I20110613-1736 The adopters now does not have handle to the Selected row/item of the List Property Editor. The API should allow the user to have an handle to the selected item, something like "SelectedItemAction" which will give the user the handle to the ModelElement(s) that has been currently selected by the user int the List Property backed table Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>358347</id>
      <title>[rulers] Show code blocks (was: matching brackets) in ruler</title>
      <description>3.8. We could show the closest matching brackets surrounding the current block in the Overview ruler. If possible this should be implemented in Platform Text, so that it can be used outside JDT as well.</description>
      <attachments/>
    </issue>
    <issue>
      <id>358376</id>
      <title>Provide ability to handle reopen-events (user clicks dock icon for running application)</title>
      <description>Build Identifier: On OS X, applications may not show windows while still running. Usually, there are two options to open a new application window: using the menu bar or clicking the dock icon. The first one is already supported by SWT 3.7, but not the second one (at least I did not found a possibility). Please add support for these reopen events. When clicking on the dock icon and the application shows at least one window, bring it to front. For the case where no application window is visible, we need API to be notified about the dock icon click, so we can show a new window. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>358384</id>
      <title>[quick assist][nls tooling] Add Quick Assists to synchronize Java properties file and corresponding message class</title>
      <description>Discussion between Grant and Dani " Grant Taylor: When I edit a messages.properties file, I would like to have a way to insert a variable in the corresponding Messages.java file (or vice-versa). Maybe a "Sync Messages.java with messages.properties" menu item on either file in the editor, so that new entries in one file are created in the other (maybe also an option to put entries Messages.java in the same order so that new entries can be put in the same location in both files). Another option would be to right click an entry in messages.properties and select "Create variable in Messages.java", and vice-versa in Messages.java - "Create property in messages.properties". Daniel Megert: The natural way of externalizing strings is to first use them in the code and when ready externalize them using the Externalize Strings wizard. Do you know that wizard? If so, what does not work for you with the described work flow? Grant Taylor: The external wizard is known by us. We regard this more as a broad-based tool. If we are making a small change, then we usually add the string to the properties file first, then change the Messages.java file, then make use of the variable in the code. The second step is always annoying... we have search for the same spot in the Messages.java file (if its organization is the same as the properties file) and then carefully copy the key from the properties file. If there were an option to do it straight from the properties editor, it would save time and be less error-prone. So it's kind of like a "light" version of the wizard, or a supplemental/alternative approach. Daniel Megert: I see. Would it help if you could invoke the Externalize Strings. wizard even if all strings are externalized and then be able to add new strings in the wizard? Another approach could be to offer Quick Assist that allow to add the corresponding entry in the *.java or *.properties file. Grant Taylor: I think the quick assist could be the desired approach here. The idea is really to add the ability to easily and quickly keep the .properties and .java files in synch, with entries appearing in the same position (or relative position). "</description>
      <attachments/>
    </issue>
    <issue>
      <id>358489</id>
      <title>[modeling] Support hiding of contained elements such as within packages</title>
      <description>Currently the modeling bridge does not support hiding elements that are inside another element (compartment?) See bug 357742. This isn't actually that common a usage case for many diagram types, but it will certainly come up, and we need to support it. (There are some complexities that make this task a little more involved than it might first appear.)</description>
      <attachments/>
    </issue>
    <issue>
      <id>358506</id>
      <title>Expand the CDO definition framework to support server configuration</title>
      <description>Build Identifier: 20110615-0604 This enhancement request is intended to allow the CDO definitions framework to be expanded to allow the specification of server-side configurations, particularly including failover, via an EMF model. A significant amount of work has been done on the framework, but it has not been updated to support newer configurations such as offline and failover. It is my intention to contribute a set of plugins to the CDO team to fill this gap. I am attaching 4 new defs ecore models for early feedback and plan to update them as I complete them. For IP purposes, I am developing these as a new contribution that is intended to be included with CDO under the same EPL licensing terms. The work is my own (along with presumed feedback from the CDO team) and is based on the partially completed framework defs that is already in CDO. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>358623</id>
      <title>Drag and drop support</title>
      <description>Build Identifier: Generally, editors allow you to select text and drag it around within the document. You can also generally drop text into an editor from elsewhere. These both work fine in TextMate and textareas in Firefox. This corresponds to https://bugzilla.mozilla.org/show_bug.cgi?id=687580 in Mozilla's bugzilla. Reproducible: Always Steps to Reproduce: 1. Paste some stuff inside scratchpad. 2. Select a bunch of text, and try to drag it. Scratchpad will try to chaneg the selection instead of supporting dragging. 3. Now try selecting a bunch of text on a web page and dropping it in scratchpad. The drop operation doesn't have any effect.</description>
      <attachments/>
    </issue>
    <issue>
      <id>358714</id>
      <title>[builder] Parallelize resource loading</title>
      <description>Resource loading is a significant part of the total build time of a project. For big projects it is beneficial to parallelize this process. I've attached a patch, it's made against the current head and it should pass all the existing tests for the builder. Resource loading happens twice in the builder. Once for building the global index and once for linking and validation. (Resource loading is parsing, building the node - &amp; emf model) While building the global index, resource loading completely dominates the execution. The parallel resource loader is configured to create one thread for each core, the speedup on a 4 core machine is ~3. To optimize the thread utilisation, big resources are processed first. In the linking and validation phase, resource loading is a much smaller part. Here one thread will be used for resource loading and one thread (the main thread) is used for linking and validation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>359024</id>
      <title>Build SWTBot with Tycho</title>
      <description>Now that SWTBot dropped support for old Eclipse release, the build is no more conditional and could be easily moved to Tycho. That would allow easier maintainance, integration to hudson.eclipse.org and more.</description>
      <attachments/>
    </issue>
    <issue>
      <id>359080</id>
      <title>Click to clone from external site</title>
      <description>It would be useful if we could provide a URL that could be embedded into another web site that will initiate cloning a particular repository in OrionHub. This is very similar to Boris' work to install a plugin from external site with a click. I suggest a URL that would open orionhub.org to the repositories page, with the clone dialog already opened and populated with the URL of the repository to be cloned. It wouldn't actually start the clone operation. In case it is a malicious link the user should be able to control whether the clone operation starts or not. Just throwing out a possible syntax: http://orionhub.org/git/git-clone.html?cloneurl=&lt;repoURL&gt; Since we've already done this once before, we should think about whether there is any common infrastructure to put in place to simplify such workflows. Bug 358769 is capturing a more general description of this problem.</description>
      <attachments/>
    </issue>
    <issue>
      <id>359273</id>
      <title>support git stash</title>
      <description>I have a bunch of experimental work that I want in a branch. I didn't think of it before I started hacking. On the command line I would stash my work, create a branch, checkout, pop. Orion doesn't support stash. There are alternate workflows to accomplish what I want (which we will document in bug 359271). But I think stash support is really helpful for users fairly new to git, because many git docs, books, etc. will tell you that stash is the way to get out of this situation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>359518</id>
      <title>[api] provide extension point to register alternative task list search implementation</title>
      <description>it would be great to provide an internal extension point for task list extensibility that would enable task list search to match against more than just the label.</description>
      <attachments/>
    </issue>
    <issue>
      <id>359824</id>
      <title>Cache the INode model</title>
      <description>Build Identifier: 20110615-0604 This patch provides an implementation of the infrastructure to cache the EMF and the INode models. Caching these models allows you to load a resource from the cache instead of parsing the source code again. In our product, this code results in loading a resource around 4 times faster (if both the EMF and INode model are required). See org.eclipse.xtext.modelcache.CacheTest for an illustrative unit test. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>359944</id>
      <title>[JUnit] Eclipse JUnit4 runner treats failed assumptions (org.junit.Assume.*) as passing tests instead of skipped tests.</title>
      <description>The Eclipse JUnit 4 runner correctly treats @Ignore'd tests as being skipped, marks them with a special decoration, and does not count them in the totals. Tests that fail with an AssumptionViolationException should have exactly the same behavior, but they do not have a special decoration, they show up in the totals, and they look like "passed" tests. The JUnit docs for the org.junit.Assume class states "The default JUnit runner treats tests with failing assumptions as ignored. Custom runners may behave differently" [1] . It makes sense for Eclipse's runner to follow suit. [1] http://www.junit.org/apidocs/org/junit/Assume.html -- Configuration Details -- Product: Eclipse SDK 3.7.1.v201109091335 (org.eclipse.sdk.ide) Installed Features: org.eclipse.jdt 3.7.1.r371_v20110810-0800-7z8gFcoFMLfTabvKsR5Qm9rBGEBK</description>
      <attachments/>
    </issue>
    <issue>
      <id>360021</id>
      <title>Changes to be made to the SQL access specification attached to 355573</title>
      <description>The following needs to be updated in the spec for SQLDataSource: function getWarnings() returns(SQLWarning); It should be: function getWarnings() returns(SQLWarning?);</description>
      <attachments/>
    </issue>
    <issue>
      <id>360052</id>
      <title>New API for monitoring UI delays</title>
      <description>Build Identifier: I20110613-1736 Sometimes Eclipse can become unresponsive. It would be useful to have a lightweight Eclipse API to facilitate monitoring events that lock up the Eclipse UI. To be lightweight I would propose that the API only store transient information. Gathering and logging data about Eclipse unresponsiveness would be the responsibility of a watchdog timer task. A couple of useful things that the API can provide are: 1) instrument the UI thread to record when the currently dispatched event was started 2) instrument the Blocked Jobs dialog to record what caused it to get popped up I've been working on a patch and will upload it when it is a little better shape. Reproducible: Always Steps to Reproduce: None, this is a feature request.</description>
      <attachments/>
    </issue>
    <issue>
      <id>360055</id>
      <title>prompt users to disable "Show subtasks not Matching Query"</title>
      <description>The option to hide non-matching subtasks is so useful that it might be a good idea to prompt users to turn it on (it shouldn't just be automatically turned on because users won't expect those tasks to suddenly be hidden).</description>
      <attachments/>
    </issue>
    <issue>
      <id>360280</id>
      <title>[breakpoints] Reposition breakpoints when planted on invalid line</title>
      <description>If user sets a breakpoint on a line where non an invalid source line, there should be a way for the debugger to reposition the breakpoint once it is installed on target. Workflow details: 1) User is able to create breakpoints at any location in the source. This should remain unchanged to avoid having the tool restrict the user from doing something non-obvious. 2) Once breakpoint is created the debugger integration sends a request to debug engine to plant a breakpoint at a given location. 3) Debug engine comes back with the line number where the breakpoint was actually planted, this may be different than the requested line. 4) The debugger integration, updates the breakpoint with the planted breakpoint location. 5) Breakpoint is moved in editor to the new location. In breakpoints view, the breakpoint label shows the original line followed by the actual planted line. The icon overlay is a small arrow instead of the checkmark (although this stuff is too small for most people to discern anyway). 6) When debug session is terminated. The breakpoint is moved back to the original location selected by user. Implementation details: Instead of tracking breakpoint location using the single IMarker.LINE_NUMBER property, the line number ends up being tracked by three properties: ATTR_REQUESTED_LINE, ATTR_PLANTED_LINE_LIST, and IMarker.LINE_NUMBER. The list of planted line locations allows for resolving conflicts between multiple debug targets. Multiple targets moving a breakpoint to different locations is a rare and not important in terms of workflow, but it's important technically as it could lead to dangerous feedback loops.</description>
      <attachments/>
    </issue>
    <issue>
      <id>360362</id>
      <title>Allow creation of custom form editor pages</title>
      <description>Build Identifier: Sapphire should allow for the creation of custom form editor pages (i.e. editor pages based on something other than master/details). This would allow consumers to create editors whose layout is similar to existing form editors in the Eclipse platform (e.g. PDE plugin manifest editor, pom editor, etc.). Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>360427</id>
      <title>Tycho JDT compiler does not support annotations</title>
      <description>Build Identifier: Although Maven compiler API does contain configuration for using APT during compilation, Tycho JDT implementation does not use any. Activating it is rather simple, as the compiler does support it. Reproducible: Always Steps to Reproduce: 1. Configure the compiler to use an annotation processor &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;2.3.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.6&lt;/source&gt; &lt;target&gt;1.6&lt;/target&gt; &lt;fork&gt;false&lt;/fork&gt; &lt;compilerId&gt;jdt&lt;/compilerId&gt; &lt;annotationProcessors&gt; &lt;annotationProcessor&gt;com.acme.apt.AnnotationProcessor&lt;/annotationProcessor&gt; &lt;/annotationProcessors&gt; &lt;/configuration&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt; &lt;artifactId&gt;tycho-compiler-jdt&lt;/artifactId&gt; &lt;version&gt;0.14.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!-- dependency containing the annotation processor specified in the annotationProcessor element --&gt; &lt;dependency&gt; &lt;groupId&gt;com.acme.apt&lt;/groupId&gt; &lt;artifactId&gt;com.acme.apt.super-processor&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; 2. Launch the compile phase on a project whose sources contains annotations that should be processed by your processor. 3. Annotation processing is not triggered.</description>
      <attachments/>
    </issue>
    <issue>
      <id>360443</id>
      <title>Signal could stop waiting for input, when socket is closed</title>
      <description>CDO signal after it sends data to server, starts waiting for confirmation data from BufferInputStream. It waits until data is provided or CDO protocol timeout appears. However, if connection was lost before signal invocation and CDO connector was deactivated, there are no need to wait whole protocol timeout and block thread. For example, we are using quite large protocol timeout (~3min) and thus, thread will be blocked for the 3 min., while more likely this thread is UI thread, application will be unresponsive quite long, regardless that connector with all child elements is already deactivated.</description>
      <attachments/>
    </issue>
    <issue>
      <id>360588</id>
      <title>[breakpoints] Allow user to edit all its properties prior to creating the breakpoint.</title>
      <description>Currently to edit properties such as skip count, condition, temporary, filter, etc. User has to first create a breakpoint (which is then installed on target), then edit the breakpoint in the properties dialog. The user should be able to perform both actions in one step.</description>
      <attachments/>
    </issue>
    <issue>
      <id>360775</id>
      <title>How to create a sticky thread?</title>
      <description>Hello, in the Eclipse Jubula Forum (http://www.eclipse.org/forums/index.php/f/208/)we would like to have a sticky thread giving some general information about Jubula, the forum and where documentation can be found since this is an recurring issue in most of the threads. As far as I know you have to be a moderator to create a sticky thread. Since we do not know a moderator it would be very nice if someone could help us with creating a sticky thread or tell us how to do this. Best regards Oliver</description>
      <attachments/>
    </issue>
    <issue>
      <id>360894</id>
      <title>[patch] Extensions tree viewer should also be filtered by leaf item's attributes</title>
      <description>Build Identifier: 20110615-0604 I often work with large lists of extensions: commands, handlers and menu contributions. The visual component for editing extensions requires me to search for tree items (and also the xml view). This is often costly in terms of time. When I click on a command, I would like to instantly filter for it's implementing handler entries, related menu contributions, activities, bindings and the command image. This could be achieved by enabling the filter text field to also filter for attribute values of the tree's items. The default behaviour only lets one filter for the label in the tree, which would still be available. I already implemented this feature and found it quite useful at work. The patch applied here provides: * Filtering for attribute values of tree items as well as labels with wildcards (default behaviour) * Multiple filter patterns allowed by delimiter item: / * Bugfix: matching item's children are being displayed * org.eclipse.ui.handlers: class name without package now displayed instead of only (handler) * Elements of type (test) are being displayed with their property attribute instead of only (test) * Filter Related: context menu function added for quick overview of related items. Attributes supported: label, id, class, commandId, value, pattern, locationURI, defaultHandler * Filter Related: keybinding applied from global command Find (default: Ctrl+F) * Filter Related: context menu item only shown when selected item has attributes to filter with * Filter Related: also supports multi selection in tree This approach to filtering for attributes also enables finding of related items from any direction. For instance searching from a menu contribution will also reveal the command, handlers and alike. This works also with other extension types because related items often share the same attribute values (id, value, label, class...). The Filter requires to accept multiple values by the delimeter item '/'. This works also fine with activities, as the pluginId there is separated by the id to listen to with '/'. All attribute values are chopped off after character '?' in order to find also find menus with the locationURI notation toolbar:org.eclipse.pde.ui.PluginsView?after=additions, because the value of after=... can be different. To extend PatternFilter from org.eclipse.ui.workbench I needed to fix Bug 186404. So the patch applied here also requires to apply the patch for 186404. Reproducible: Always Steps to Reproduce: 1. open any plugin.xml in the PDE editor 2. add 100 commands and implementing handlers to the tree 3. close and re-open the editor, go the extensions page 4. try to find a specific handler for a command</description>
      <attachments/>
    </issue>
    <issue>
      <id>360935</id>
      <title>Provide a Sonar instance for Eclipse projects</title>
      <description>Code quality analysis is easy to set up with Sonar. Moreover, Sonar is well integrated with Hudson and Maven/Tycho. It would be very useful for Eclipse projects to be able to use Sonar for code quality analysis, but this requires to host a Sonar instance at Eclipse.org. Some related links to push the idea of using Sonar: * http://www.sonarsource.org * http://meera-subbarao.blogspot.com/2009/11/hudson-sonar-perfect-match.html * http://wiki.hudson-ci.org/display/HUDSON/Sonar+plugin * http://mdwhatever.free.fr/index.php/2011/09/quality-analysis-on-eclipse-plugins-with-tycho-sonar-jacoco-and-swtbot/</description>
      <attachments/>
    </issue>
    <issue>
      <id>360939</id>
      <title>API Visibility in StatisticBasedSimilarityChecker</title>
      <description>Hi guys, I could copy/paste from the newsgroup, but I'll try to sumarize better. Late tests showed me it's common to specialize StatisticBasedSimilarityChecker, as similarity indices may fail depending on the shape and information in the model. In our case, EMF Compare returned many false positives, mainly due to wrong matches. Specialization of this class, always led me to the same issue: inability to call the similarity cache. That's one thing. The second issue about that is it seems critical to me being able to manage that cache, as it is the main performance point of the matching process. IMHO, the current cache suffers from several design problems: a) Different similarity informations are put in the same cache (TYPE_SIMILARITY, NAME_SIMILARITY, RELATION_SIMILARITY, VALUE_SIMILARITY). I suspect (don't have evidences) lookup/insert process becomes more expensive as this cache grows. Having separate caches for each kind would probably alleviate this. b) This cache grows indefinitely (doesn't scale). That led some of our tests to GC bottleneck situations, where the JVM spent more time GC'ing than doing actual EMF Compare logic. In such scenarios, the comparison did just not end. Increasing heap isn't an option for us (our app is 32 bit), but even when I did increase it, it didn't help (tests with 2GB heap). Some experiments showed me that using a LinkedHashMap: 1) Dramatically reduces memory needs 2) Doesn't affect performance (I suspect that, once matched, similarity information is not used anymore). I didn't try separating the different kinds in different caches, but I'll give it a chance! So my proposal is to change visibility of the cache, or even better, do some nice refactors so the implementation of this cache could be changed. Of course, I'll be happy to contribute patches. Thanks for your time :)</description>
      <attachments/>
    </issue>
    <issue>
      <id>360940</id>
      <title>[Import/Export] allow IMPORT to override package unit and nsURI</title>
      <description>When importing an exported repository, I would like to apply new namespace URIs and their corresponding package units (meta models). This will allow us to migrate models whose meta models are changed in a binary compatible way.</description>
      <attachments/>
    </issue>
    <issue>
      <id>361147</id>
      <title>support scrolling and focus in review comment part</title>
      <description>When opening the review comments widget in the compare editor, the resulting widget is cut off at the bottom, and is not selectable . Pressing 'F2' closes the widget. This was verified running the latest code from the e_3_7_m_3_6_x branch. Running Eclipse 3.7.1 on Gnome/GTK 2.22.1 , OpenSUSE 11.4 x86_64.</description>
      <attachments/>
    </issue>
    <issue>
      <id>361251</id>
      <title>Import Repositories from Gitblit</title>
      <description>Created attachment 205419 [details] Screenshot showing enumeration of repositories from Gitblit I've been missing the ability to (at least) browse the list of available projects at a remote Git server like I could do with SVN or CVS. The _upcoming_ Gitblit 0.7.0 release has a JSON RPC interface which, among other things, allows the user to authenticate and enumerate available repositories. On the Gitblit side, I used google-gson which is already a dependency of the GitHub Mylyn connector. The master branch of the Gitblit repository has a working rpc servlet/authentication filter, a static rpc client utility class, &amp; unit tests. There is also a Swing Manager application which exercises several, though not yet all, of the rpc functions (screenshot attached). So what? So it would be really useful to have an "Import from Gitblit" dialog for EGit where the user can browse the list of available repositories and then select one (or more?) to clone. (It would be super cool to be able to clone multiple repos at once with a ctrl-click/shift-click approach). To ensure that developers don't get annoyed, account credentials should be prompted for (to list access restricted repositories) and the credentials should also be cached locally somehow, somewhere along with the url of the Gitblit instance and probably a name/description. These credentials are the same ones used for cloning, pushing, etc. While (I think) I have the motivation to hack on Eclipse - I have no idea where to begin so I'm reaching out to the EGit masters. Of course if someone wants to take this on instead of me, that would be fine too - maybe even preferable. :)</description>
      <attachments/>
    </issue>
    <issue>
      <id>361356</id>
      <title>Allow to specify encoding for source attachments</title>
      <description>Eclipse uses encoding of current project to display source/javadoc of attached libraries despite the fact that the encoding used in the library may be different. Steps to reproduce: 1. Create project in UTF-8 encoding. 2. Attach library with source/javadoc written in another (Cp1251) encoding. 3. Try to view source or open Javadoc view of attached library from main project - you will see question signs instead of national symbols. As an enhancement I would like to propose possibility to set encoding for each used library manually (like for other project resources).</description>
      <attachments/>
    </issue>
    <issue>
      <id>361503</id>
      <title>Need a option to ignore line ending related diffs</title>
      <description>For the "Synchronize" view and the compare editor, there should be either an option to ignore "unimportant" diffs, like different line endings or tabs vs spaces or the views should honor the "autocrlf" Git configuration option. In example with "autocrlf = input", the repository is kept clean of Windows line endings. The local file, created with Windows line endings (the internal Eclipse files like .project in example), stays unchanged. The "Synchronize" view is nonetheless showing those files as "outgoing change".</description>
      <attachments/>
    </issue>
    <issue>
      <id>361612</id>
      <title>[Restructuring] New core for new version of the Facet metamodel</title>
      <description>The new version of the Facet metamodel (eFacet2) leads to modifications in the core Facet plug-ins: - org.eclipse.emf.facet.efacet.core - org.eclipse.emf.facet.query.java.core - org.eclipse.emf.facet.efacet.catalog This bug is to track these modifications.</description>
      <attachments/>
    </issue>
    <issue>
      <id>361722</id>
      <title>Unable to install root level features into product install</title>
      <description>In order to create update-able features outside of the original product, you must install root level features into an eclipse product. http://aniefer.blogspot.com/2009/07/composing-and-updating-custom-eclipse.html It would be nice if we could do this with tycho. So we would perform a product build as usual using the eclipse-repository package type, but be able to specifiy additional root level features that we would want to install into the product as a part of the build.</description>
      <attachments/>
    </issue>
    <issue>
      <id>361794</id>
      <title>[Restructuring] EMF Facet customization meta-model</title>
      <description>Hello, We need a new customization meta-model based on the last version of the facet meta-model (efacet2). This new meta-model must allow to create additional customization properties without having to modify the meta-model. Regards, Grégoire Dupé</description>
      <attachments/>
    </issue>
    <issue>
      <id>361823</id>
      <title>[Restructuring] eFacet2 meta-model</title>
      <description>There is a new version of the Facet metamodel which we call eFacet2, and which brings the following main changes: - Facet features (attributes, references and operations) directly contain their queries - Queries become a second-level concept (no more QuerySets), that are only used through Facet attributes, references and operations - Facets can now contain operations in addition to attributes and references - The source type of a query is automatically inferred from its containing Facet's extended metaclass - The return type of a query is automatically inferred from the query's parent Facet attribute, reference or operation This bug tracks modifications of this metamodel.</description>
      <attachments/>
    </issue>
    <issue>
      <id>361934</id>
      <title>Provide timeout for gdb commands</title>
      <description>Build Identifier: 20110615-0604 There are many cases that can make a gdb command hang (no response is received from target) which causes the IDE to wait forever for the command reply. Providing timeout for the commands will ensure better stability and useability for CDT. Check discussion http://dev.eclipse.org/mhonarc/lists/cdt-dev/msg23077.html Specifically http://dev.eclipse.org/mhonarc/lists/cdt-dev/msg23133.html &amp; http://dev.eclipse.org/mhonarc/lists/cdt-dev/msg23136.html Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>362039</id>
      <title>Enhancement Proposal : Default directory for "post mortem" debug</title>
      <description>Build Identifier: Build id: 20110916-0149 In "C/C++ Post Mortem Debug", there is a "Core file" field that is, to my opinion, useless, since core file usually takes a different name each time. Currently, when this field is empty, an "open file" dialog box is triggered, but it has a default path to $HOME, which might be quite far from the path where core files are generated (in my workflow, they are not generated here). I would recommend to be able to specify in the "Core file" path a directory path where core files are created (allowing entering workspace relative path), and display this list when we execute this launcher. Also, if the core file can be sorted by date (we usually want to inspect the latest core file), it would be great. Thanks. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>362067</id>
      <title>Use online editor to edit images</title>
      <description>Allow to edit images with online editors like Pixlr (http://pixlr.com/) or Picnik (http://www.picnik.com/). I took just a quick look at these sites but it was enough to see that some of them have API (http://pixlr.com/developer/api) that we could leverage in Orion. The "only" problem is uploading password secured images to the editor and saving them back in Orion.</description>
      <attachments/>
    </issue>
    <issue>
      <id>362420</id>
      <title>[QuickAccess] Make "Quick access" optional</title>
      <description>Build Identifier: Build id: I20111028-1100 AS IS: With e4 the "Quick access" was introduced on the main toolbar, replacing "Ctrl+3" quick access view on Eclipse 3.8. I can understand the intent, but it introduces a problem for all editors adding a lot of items on the main toolbar =&gt; toolbar area will render two rows instead of one, wasting space. TO BE: Please make this "Quick access" optional and hidden by default, to avoid breaking existing software. This would need a new preference option. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>362462</id>
      <title>[xtend] Highlight unused fields</title>
      <description>Declared fields and extensions should be flagged as unused if they are not referenced. Unused private fields should be flagged with a warning. I think protected or public fields that are not used locally deserve an info marker.</description>
      <attachments/>
    </issue>
    <issue>
      <id>362550</id>
      <title>tycho-director-plugin supports different profile names for different environments</title>
      <description>Director application only allows specifying one profile name for all environments.</description>
      <attachments/>
    </issue>
    <issue>
      <id>362559</id>
      <title>Ensure consistent compiler setting for dependent code</title>
      <description>We allow user to configure generators, but we don't have a design to ensure what they configured would finally work. Think about you have a RUIHandler using a Record, the Record is in a package which only has JavaGen configured. You won't detect this until you run the handler. Even worse, our RUI runtime error messages did not give meaningful information to help user correct this. It say something like object expected. Will also reports that: Created a new 'web 2.0 client with services' project, then created a service in the 'server' package, referenced BoxLib in my service. Save the file - got no EGL source/compile errors, but generated Java has errors. See screen shot.</description>
      <attachments/>
    </issue>
    <issue>
      <id>362966</id>
      <title>option to let BREE define the JDK we compile against</title>
      <description>We should have an option to let the "Bundle-RequiredExecutionEnvironment" MANIFEST header define the JDK to compile against. (compiler source and target level are already deduced from BREE). One idea is to have maven properties ${J2SE-1.5}, ${JavaSE-1.6} etc. define the respective JAVA_HOME of the JDK matching the required execution environment. These properties could be defined in settings.xml. May also consider using maven toolchains to define the JDKs. Originally reported as https://issues.sonatype.org/browse/TYCHO-547</description>
      <attachments/>
    </issue>
    <issue>
      <id>363019</id>
      <title>[Xtend] support static fields and methods</title>
      <description>Some existing frameworks (Play!) require declaration of static methods, also Java requires a static main to start a process. We should allow having that in Xtend.</description>
      <attachments/>
    </issue>
    <issue>
      <id>363331</id>
      <title>specify additional dependency resolution constrains in pom.xml</title>
      <description>Equinox developers appear in no rush to fix bug 348045, so, as a workaround, I suggest we add ability to introduce additional target platform in tycho. I think this will be useful feature regardless of bug 348045.</description>
      <attachments/>
    </issue>
    <issue>
      <id>363592</id>
      <title>Need DojoDialogLib function to prompt user for a string value</title>
      <description>Prompting a user for a string is a common need in GUI applications. DojoDialogLib should have a simple function for doing this. The alternative is forcing developers to code their own dialog with text field, which is not necessarily hard, but is definitely harder than a simple function call. I prototyped this and have attached the code. See DojoDialogLib.promptForValue</description>
      <attachments/>
    </issue>
    <issue>
      <id>363733</id>
      <title>Provide possibility to enhance RequiredPluginsClasspathContainer to deal with Equinox-AdapterHooks</title>
      <description>Equinox-Adapter hooks allow people to locate and load external jar-Libaries by registering a so called ClassLoadingHook. If such a hook is installed Equinox allows to plugin custom classloaders to e.g. integrate libraries installed on the target system and not allowed to be redistributed (in my case the JavaFX 2.0 libraries). The problem is that the same logic has to happen when PDE creates the Classpath so that the compiler finds the classes to compile against.</description>
      <attachments/>
    </issue>
    <issue>
      <id>363828</id>
      <title>Improved Table Column Management</title>
      <description>Build Identifier: M20110210-1200 Currently it is not possible to edit all column settings (visibility, ascending, descending, order, custom columns, filtering) in one place. The proposed patch enhances the Column Management Dialog by allowing - changing visiblity - ascending, descending sort order - change of column order by drag'n'drop or buttons - changing the column filter - adding custom columns - resetting any of the settings The table is enhanced by - showing an icon for custom columns (Swing) - showing number of filtered rows in footer (all) Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>363959</id>
      <title>Investigate how to avoid requiring API key for remote Dojo</title>
      <description>The Dojo and Google docs do not indicate that an API key is required to use the remotely hosted Dojo libraries. An API key is required, however, to use the 'fancy' Google loading APIs, which is not a requirement. We should investigate whether this is true, and if so, we should switch the Dojo remote project to not require an API key. Secondarily, we should consider making Dojo remote the default again (for new projets) since it results in much smaller deployed apps and we always believed it to be faster.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364093</id>
      <title>[Entity Gen] Many-to-many association cannot be generated correctly</title>
      <description>Build Identifier: I-3.4.0-20111117042436 1. Bring up the entity gen wizard, select a couple of tables and go to the Table Associations page 2. Click New Association button to bring up the Create New Association page 3. Select 'Many to many association' radio button and configure the association tables properly 4. Complete the rest steps and click Finish Check the generated entities and you'll see the join strategy for the customized ManyToMany association is JoinColumn instead of configured JoinTable and the properties set to the join table are lost. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>364134</id>
      <title>Introduce a target platform object with final metadata</title>
      <description>Historically, Tycho didn't distinguish between the "target platform" (=the set of artifacts that can be referenced by the build) and the actual process of matching the project dependencies (e.g. from the MANIFEST.MF) against the target platform ("project dependency resolution"). However, discussions about current activities and future projects show that this distinction is necessary: - Dependency resolution is done more than once in eclipse-test-plugin projects: first to determine the artifacts to be considered for the build class path, and second to determine the set of artifacts in the test runtime. These steps (both done by a p2 dependency resolver) can have different settings, e.g. for how optional runtime dependencies should be treated (see bug 351842), or for additional artifacts in the test runtime (see [1]). - eclipse-feature currently uses dependency resolution to determine the version of included bundles. However this may result in incorrect results (bug 352081). The solution to that problem is to not use dependency resolution, but rather look up the right version in the target platform directly. This is currently not possible, because there is no "target platform" data structure available to the mojo that does the version substitution. - A more flexible eclipse-repository (e.g. allowing multiple versions of the same bundle) also needs to work on the target platform directly instead of the resolved project dependencies. The same makes sense for the future eclipse-product. The main hurdle to a separation of target platform and dependency resolution is the current structure of the code, so the first step would be a refactoring of the current P2TargetPlatformResolver and related classes. [1] http://wiki.eclipse.org/Tycho/Packaging_Types#eclipse-test-plugin</description>
      <attachments/>
    </issue>
    <issue>
      <id>364155</id>
      <title>[api] add a method to retrieve projects in current active context</title>
      <description>Build Identifier: Review is here: http://review.mylyn.org/#change,111 Adds a method to retrieve all IProject, that are contained in the currently active context. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>364287</id>
      <title>[build path] Allow viewing and editing the specified index files for a library.</title>
      <description>With bug 356620, JDT/Core is providing the support to specify the index files when the class path library is specified. JDT/UI should show the index file used allow users to modify or update them.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364415</id>
      <title>Investigate being smarter about what Dojo files need to get deployed</title>
      <description>We are currently copying the entire Dojo library into the target Web project during deployment. I would estimate, based on the set of Dojo widgets shipped in EDT 0.7, that 75% of the files are unnecessary. We need to investigate how we can reduce the number of files we deploy and also minify/compress as well. For reference: http://dojotoolkit.org/reference-guide/build/</description>
      <attachments/>
    </issue>
    <issue>
      <id>364419</id>
      <title>Provide Standalone init</title>
      <description>I'm trying to open Infrastructure.xmi standalone. Hard. Looking at how UMLEditor works, it seems that UMLEditor.createModel() contains useful code that could be refactored for re-use as a standalone ResourceSet init; null ResourceSet for global registries.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364469</id>
      <title>Enable Ant/Ivy and Maven builds to download dependencies directly from Orbit</title>
      <description>Virgo and Gemini Web, for example, use Ant/Ivy as a build system and publish dependencies (3rd party libraries in bundle format and Eclipse bundles) in an external Ivy repository on Amazon S3. This line item is to make Orbit similarly accessible as a remote Ivy repository. Maven users would benefit from support too. The approach outlines in the Orbit FAQ ([1]) is far too labour intensive for a runtime project with many dependencies.The requirements are: 1. to be able to specify Orbit once in a project's build configuration 2. to be able to refer to each dependency using standard Ivy or Maven "coordinates" and download directly from Orbit. The approach taken in the external Ivy repository above is to publish all bundles to a single Ivy repository and to a single Maven repository. An Ant/Ivy build, for example, can then point to the single remote Ivy repository in once piece of configuration and then capture dependencies using normal Ivy coordinates. The absence of this support is the most significant factor in Virgo planning not to join the release train. [1] http://wiki.eclipse.org/index.php/Orbit_Faq#How_to_use_an_Orbit_bundle_in_your_Target_Platform</description>
      <attachments/>
    </issue>
    <issue>
      <id>364553</id>
      <title>install Jubula on Hudson slaves</title>
      <description>In order to run automated UI tests for EPP with Jubula we need a database that is accessible from Hudson slaves.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364569</id>
      <title>Provide an extension point prior to project import</title>
      <description>Build Identifier: M20110909-1335 The lazy loading mechanism of Eclipse Platform for plugins can cause the following problem: if you try to import in the workspace a project which had already been checked out from a Subversion repository into an external folder (with an external client), if the Subversive plugin has not yet started, the imported project won't be connected to SVN, although the Subversive option to automatically share project is enabled. The discussion is at bug #336689, which is marked as "fixed" but the fix is some kind of workaround that may work in some cases but not in others. If an extension point prior to project import existed, the Subversive plugin could use it to "intercept" that event and load itself in time for the automatic project sharing to work. Reproducible: Always Steps to Reproduce: Please see bug #336689 for the steps to repro. As a summary: checkout a project from SVN with an external Subversion client into an external folder, start Eclipse (with Subversive plugin but without Subversive-Mylyn integration) on a fresh new workspace, try to import the checked out project into the workspace =&gt; your project won't be connected to SVN.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364573</id>
      <title>Update the Virgo tooling to be compatible with the new folder structure</title>
      <description>With the support for initial provisioning Virgo's folder structure will be slightly changed. I'll test if that change is incompatible with the Virgo tooling and propose a patch if that's the case.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364641</id>
      <title>Apply build tag to all repositories</title>
      <description>Currently in the build, each repository will be automatically tagged if it had changes since the last build. The tag format is vYYYYMMDD-HHMM in UTC time. However this means each repository has a different tag. We should consider also adding a tag matching the build id to each repository, regardless of whether it changed, something like the IYYYYMMDD-HHMM tag that goes onto the map files. This would enable us to do things like: - Use a script to tag releases, but applying the release tag to the same commit as the I-build tag. - Checkout by tag across multiple repositories. For example this would enable loading the exact contents of a build into your workspace at once (across multiple repos). Maybe could use a hierarchical tag name here to avoid confusion... "build/IYYYYMMDD-HHMM".</description>
      <attachments/>
    </issue>
    <issue>
      <id>364676</id>
      <title>Switch maintenance builds to auto-tagging</title>
      <description>Yesterday, the PMC decided to also switch to the new auto-tagging build input workflow (see bug 363215 for more details) for the maintenance branches. This was communicated in the architecture call and there were no objection to do this. For the maintenance builds, we won't add a special integration branch but directly tag the maintenance branches.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364815</id>
      <title>[preferences] UI for new preferences regarding annotation based null analysis</title>
      <description>As bug 186342 is converging towards release, now would be a good time to make the new configuration options available in the UI. Please see the new preference constants in JavaCore inside attachment 207270 [details] Basically we'd need: [x] Enable annotation based null analysis FQN of the annotation type to be used for marking nullable types _____ FQN of the annotation type to be used for marking non-null types _____ FQN of the annotation type to be used for making non-null the default ____ [x] Globally make non-null the default Reporting: Violation of null specification [Error/Warning/Ignore] Violation of null specifications with potential null value [Error/Warning/Ignore] Insufficient information for analysing adherence to null specifications [Error/Warning/Ignore] Redundant null annotations [Error/Warning/Ignore] Obviously all these preferences depend on the first ("Enable ..."). Please consider the wording just as initial drafts. Let me know if anything is unclear.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364820</id>
      <title>User documentation of null annotations</title>
      <description>When bug 186342 is released we'll need to update the user documentation accordingly.</description>
      <attachments/>
    </issue>
    <issue>
      <id>364929</id>
      <title>[stats] support customizable download statistics</title>
      <description>P2 already has a simple download statistics[1] mechanism. But it's a way to do general downloading statistics, such as downloading number of specified binaries and downloading time. There is no way to stats additional information based on runtime information, such as the package type of eclipse, the host information that eclipse is running. [1] http://wiki.eclipse.org/Equinox_p2_download_stats</description>
      <attachments/>
    </issue>
    <issue>
      <id>364999</id>
      <title>User can select repository when clicking a task hyperlinks in the task editor</title>
      <description>Task hyperlinks in the task editor should work the same way as in the Java editor: when you hover over the link, there should be a popup simliar to the one for attachment links allowing you to select the repository.</description>
      <attachments/>
    </issue>
    <issue>
      <id>365004</id>
      <title>improve "runtime only" handling</title>
      <description>In playing around with bug 364928, it appears that specifying &lt;required namespace='A.PDE.Target.Platform' ... suffices to get he aggregator to not insist that the bundle be installable in IDE. It would be nice if this "magic namespace" could be passed in as a -D java property so that when someone needs to use something else to prevent installation into IDE, they can use what they want, and the aggregator still be accommodating. It'd be best to allow a list, in case we needed several, such as -Dnonide="A.PDE.Target.Platform,com.google.gwt.user".</description>
      <attachments/>
    </issue>
    <issue>
      <id>365208</id>
      <title>[compiler][batch] command line options for annotation based null analysis</title>
      <description>The new options introduced in bug 186342 are currently available only inside the IDE, not for the batch compiler. We should add new command line options to allow the same also from ecj. See bugs 364815 for the corresponding preferences in the UI which should serve as a template for the new command line options.</description>
      <attachments/>
    </issue>
    <issue>
      <id>365469</id>
      <title>H2 support for Gemini DBACCESS</title>
      <description>Build Identifier: 20110916-0149 Gemini DBACCESS currently only supports Derby. Add H2. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>365475</id>
      <title>HSQLDB support for Gemini DBaccess</title>
      <description>Build Identifier: 20110916-0149 Gemini DBaccess currently only supports Derby. Add HSQL Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>365866</id>
      <title>[content assist] Call Chain Completion</title>
      <description>Created attachment 208046 [details] Effect of cycles in a call chain graph Hi, this is the beginning of a series of questions/design decisions regarding a call chain completion engine for/based-on JDT (see http://code-recommenders.blogspot.com/2010/12/how-do-i-get-instance-of.html if you need more information on call chain completion). The intent of these questions is to discuss implementation decisions before the code gets written and to learn what you appreciate most. Call chain also has some characteristics which may be show-stoppers to become part of JDT. Thus, your feedback is very appreciated. This post is about limiting the search space as soon as a known type has been observed. See the example screenshot attached. When triggering code completion on "PlatformUI.&lt;^Space&gt;", we get 7 proposals with a length up to 5 (search has been limited to maxlength=5)). You see that there is a circle in the call-graph for IWorkbench: getWorkbench() -&gt; getActiveWorkbenchWindow() -&gt; getWorkbench() getWorkbench() -&gt; getWorkbenchWindows()[index] -&gt; getWorkbench() getWorkbench() -&gt; showPerspective() -&gt; getActiveWorkbenchWindow() -&gt; getWorkbench() ... There are other examples with result in an even worse dependency graphs with hundreds of chains. Question: How should the engine deal with these kinds of circles? Option 1: Stop as soon as the same type has been part of the chain? This would cut off many paths, potentially also interesting ones. (Need an example?) Option 2: Put in as many paths as possible to find until completion timeout occurs. This is not perfectly heuristic and leads to many results. People might get flooded with proposals. In this case, call-chain completion should work as a quick fix rather than a code completion (maybe it should do so in general). Option 3: Limit the number of proposal to the, say, 7 shortest proposals. People don't get flooded but probably don't get the proposals they want. As a side-note: We have in mind an approach that collects the information which proposals have been used actually used in similar situations. Given this info, we can cut down the number of proposals furthermore. Whats your opinion on that? Option 1, 2, or 3? Or something different?</description>
      <attachments/>
    </issue>
    <issue>
      <id>365919</id>
      <title>[Architecture - SVN - Build] Rewrite the Build</title>
      <description>The build must be rewritten to be consistent with the new layers on the SVN.</description>
      <attachments/>
    </issue>
    <issue>
      <id>366029</id>
      <title>[Model Explorer] It is impossible to see the additional resources</title>
      <description>It could be useful to see the additionnal resources in th model explorer, to drag and drop external elements into the diagram.</description>
      <attachments/>
    </issue>
    <issue>
      <id>366284</id>
      <title>Need ability to set arbitrary data on a widget</title>
      <description>I have had the need to set 'data' on a widget on many occasions. Typically when I am dynamically creating widgets and need to associate some data (like a record) with the widget because I have set some event handler function on the widget that needs to read the data. There is precedence for this: SWT Widget has both a setData(xxx) and a setData(name, xxx) (both functions I think are necessary). The function should accept "any" value. You can see a prime example of why this is needed in DojoDialogLib. Instead of being able to attach a callback function to the widget being dynamically created, the code must set an index (via setAttribute) and then store the callback function in an array. Having a setData() function would replace the need for this extra code and make the code easier to understand and maintain.</description>
      <attachments/>
    </issue>
    <issue>
      <id>366319</id>
      <title>[patch] Provide a way to build the documentation index</title>
      <description>The documentation index for a plug-in can be pre-built. This is generally done by executing an Ant task (BuildHelpIndex) using Eclipse's AntRunner application. More information can be found in the section "Pre-indexing documentation" in the Platform Plug-in Developer Guide http://help.eclipse.org/indigo/topic/org.eclipse.platform.doc.isv/guide/ua_help_setup_preindex.htm One way to achieve this with Tycho would be to provide BuildHelpIndexMojo that only takes care of this specific task. Another approach would be to have a generic EclipseApplicationMojo that could run any IApplication, including AntRunner. This is possibly more difficult but would be more reusable.</description>
      <attachments/>
    </issue>
    <issue>
      <id>366352</id>
      <title>HTML Component is always left aligned when drag &amp; drop component from Web page Editor</title>
      <description>Build Identifier: 20100917-0705 I have created a html file inside Dynamic project.I open this file in Web page Editor.When i drag &amp; drop component from palette,its always left aligned.If i drop my component in mid of editor,it does not placed over that position &amp; moved to left aligned.What is the cause of this.I am not able to create html page as per my layout positioning. Reproducible: Always Steps to Reproduce: 1.Create HTML file inside dynamic page.Open with Web page editor. 2.Drag &amp; drop html content from palette. 3.Component is always left aligned</description>
      <attachments/>
    </issue>
    <issue>
      <id>366367</id>
      <title>To be able to change the "CanBePresentedInTheTable" query</title>
      <description>It would be useful to be able to change the "CanBePresentedInTheTable" query during the execution. A canBePresentedInTheTable query presented query is used to now if a model element can be presented in the table. For instance, this query is to know if the table must accept a model element form a drag and drop. If model elements already presented in the table are not conform to the new canBePresentedInTheTable query, then the user will have to choose if he wants to remove them from the table.</description>
      <attachments/>
    </issue>
    <issue>
      <id>366421</id>
      <title>[commands] How slideouts, popups, "More" dialogs and commands should work with each other</title>
      <description>Couple questions: 1) Click "Clone Repository" and a slideout opens. Click "More" which opens a big dialog with more fields. Now, there is no way to go back to the slideout other than just close the big dialog and click "Clone Repository" again. Should we have something like "Less" button on the big dialog? 2) Click "Clone Repository" and a slideout opens. When the slideout is open, click "Init Repository". Now you have two dialogs, the slideout and a big one for Git Init operation. Shouldn't we close the slideout in this case? 3) I wonder if another click on "Clone Repository" could close the slideout? I'm not sure why, but the first think I do when I want to close the slideout is clicking on the command link itself...</description>
      <attachments/>
    </issue>
    <issue>
      <id>366426</id>
      <title>Support JPA access to NoSQL databases</title>
      <description>See, http://wiki.eclipse.org/EclipseLink/DesignDocs/362899 There are several "NoSQL" databases that are non-relational. These databases include: * Oracle NoSQL * MonogoDB * Hadoop * Google BigTable * Cassandra These databases offer alternative APIs to JDBC and either do not support querying, or support alternative query languages to SQL. You could also include legacy hierarchical and non-relational databases, object databases and XML databases in the "NoSQL" category. It is desirable for EclipseLink to support persistence and specifically JPA access to NoSQL databases. EclipseLink currently provides persistence support for relational databases through JDBC, and non-relational datasources through JCA. This support requires a JDBC or JCA resource adapter/driver for the database. Most NoSQL databases do not provide a standard driver, although some may, and some do provide JDBC drivers. There are also third parties that provide JDBC and JCA driver to a wide range of datasources, including some NoSQL databases. See: * Mongo JDBC Driver * DataDirect * Attunity JCA JDBC Users connecting EclipseLink to NoSQL databases have several options: * If they have a JDBC driver available they can connect using EclipseLink's relational support, creating their own DatabasePlatform in EclipseLink will provide enhanced functionality and ease of use. * If they have a JCA driver available they can connect using EclipseLink's EIS support, creating their own EISPlatform in EclipseLink will provide enhanced functionality and ease of use. * They can implement their own JCA (or JDBC) adapter for their database to enable usage of EclipseLink's EIS support. EclipseLink currently provides several JCA adapters to non-relational datasources. These include: * JMS * Oracle AQ * XML file adapter EclipseLink should provide a platform and adapter to popular NoSQL databases, similar to the platforms provided for popular relational databases. EclipseLink's EIS support currently has several limitations that must be resolved to support NoSQL databases. * No JPA annotation or XML support is currently available for EIS descriptors, mappings, and queries. * Although hooks exists, no current EIS adapters provide Expression (JPQL/Criteria) translation into non-SQL query languages or APIs. * The JPA API has not been tested with EIS descriptors and datasources.</description>
      <attachments/>
    </issue>
    <issue>
      <id>366480</id>
      <title>Wizard for creating EGL external types for Java classes</title>
      <description>Having a wizard to generate an external type from a Java class would be really useful when talking to Java developer about EGL, since it demonstrates how easy EGL can interact with what they know/have. If we built a wizard, what would it need to do? More specifically, if we allowed the developer to select a Java class and then we create an external type for it, would we need/want to also generate external types for classes referenced by this class? How deep would we need/want to go? ** Response from Matt ** The wizard could be very simple, providing a template like you get from most of the other wizards. But we could do more. Here's what I have in mind: On the first page you choose the project, package, and name of the part's file. If you press Finish at that point you get a simple template where you have to fill in the details. If you press Next you go to another page where you can specify a Java class (a la the JDT's Open Type). This is the last page. Press Finish here and we'll make the ET for you, populating it from the public fields, methods, and constructors of the class. There would be a checkbox for "Make ExternalTypes for all superclasses, interfaces, and superinterfaces." If that's checked we include those ETs in the file as well. Other ideas: Let the user pick which members they want in the ET. Have a choice to make ETs from the classes referenced by the selected class. ** Additional thoughts ** 1) Provide an extensible 'New EGL External Type' wizard (like the New EGL Record wizard that supports templates) 2) Have the wizard provide various templates, including a template to create an external type from an existing Java class (to do what Matt is describing above). 3) Another template could be provided to create a "stub" Java class and an associated EGL external type. This would allow a developer to write custom Java code that could interact with other Java classes.</description>
      <attachments/>
    </issue>
    <issue>
      <id>366740</id>
      <title>Shrinksafe Generated JavaScript During Deployment</title>
      <description>In the past, we have used Dojo Shrink Safe to compress our generated JavaScript code during deployment. We should implement something similar in EDT to remove white space, reduce the amount of text being sent over the wire, and obfuscate a users source code.</description>
      <attachments/>
    </issue>
    <issue>
      <id>367089</id>
      <title>Flag if the fieldName parameter in Atomic__FieldUpdater.newUpdater is incorrect</title>
      <description>Build Identifier: 20110916-0149 See the code in Steps to Reproduce. Errors should flag s_atomic1, s_atomic2, and s_atomic3. s_atomic1's fieldName doesn't point to any member variable in Enhancement. s_atomic2's fieldName points to a member variable but it is of the wrong type. s_atomic3's fieldName points to a member variable but it isn't volatile. Reproducible: Always Steps to Reproduce: 1. Enter the following code 2. Save and see that no errors are flagged private static final AtomicIntegerFieldUpdater&lt;Bug&gt; s_atomic1 = AtomicIntegerFieldUpdater.newUpdater(Bug.class, "noSuchField"); private static final AtomicIntegerFieldUpdater&lt;Bug&gt; s_atomic2 = AtomicIntegerFieldUpdater.newUpdater(Bug.class, "incorrectFieldType"); private static final AtomicIntegerFieldUpdater&lt;Bug&gt; s_atomic3 = AtomicIntegerFieldUpdater.newUpdater(Bug.class, "fieldNotVolatile"); private volatile long incorrectFieldType; private int fieldNotVolatile;</description>
      <attachments/>
    </issue>
    <issue>
      <id>367218</id>
      <title>[Infra] Be able to disable the external resource overlay</title>
      <description>It should be possible to control whether the external resource overlay (which looks like a blue arrow currently) should be displayed.</description>
      <attachments/>
    </issue>
    <issue>
      <id>367261</id>
      <title>Extend New Service and Library wizards for database access</title>
      <description>See Bug 363081 for more details. The following was extracted (and updated) from 363081, and can provide a basis for the design: I think this could be implemented as an extension to the New EGL Service (and Library) wizard, much like the New EGL Record wizard has a set of 'templates' you can choose from. The flow might look like this: 1) Developer launches the New EGL Service wizard 2) Developer supplies an EGL part name (MyNewService) and selects a package. 3) Developer chooses the 'Database access' template from the list of templates, and clicks Next. 4) Developer selects a database connection and then selects 1 or more database tables (this wizard panel would resemble the wizard panel that already exists in the New EGL Record Wizard) and clicks Next. 5) The source for the new service (and new Entity record) is displayed in the Preview page. The developer clicks Finish to create the new service file, which includes the service part and entity record(s). The source for the service would look *similar* to the service code generated by the RBD Data Access Application wizard today (except there would be 'repeated' functions if more than 1 table is selected). For example: if the developer had selected the ORDER and CUSTOMER tables, 1 service part would be created (and it would be named whatever it was named in the first page of the wizard), but it would contain functions like getAllOrders() and getAllCustomers() and deleteOrder() and deleteCustomer(). The service should support a StatusRec-like record (to provide status of a functional call back to the caller) and should also provide a function to fetch x number of rows starting at a specific index (in order to support paging through a long table).</description>
      <attachments/>
    </issue>
    <issue>
      <id>367483</id>
      <title>Support composite connections</title>
      <description>Build Identifier: Support for composite connections. Composite connections should be similar to ContainerShape. A composite connection defines a set of connection children which have the same source anchor container and target container. Connection children should be inactive and not individually selectable. When a composite connection is deleted all child connections are deleted. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>368015</id>
      <title>Support for source attachment encoding at classpath entry level</title>
      <description>Refer to bug #361356. We have to be able to specify encoding for classpath entries, which can be used for source attachments. The encoding will be stored on the classpath using an extra classpath attribute. For more details, look at bug 361356.</description>
      <attachments/>
    </issue>
    <issue>
      <id>368166</id>
      <title>Optimization of generated HTML file</title>
      <description>Created attachment 209209 [details] Mocked up new HTML file I think part of the 0.8 optimization work needs to involve cleaning up (i.e. optimizing) the HTML file generated for a RUI during deployment. The file is way too complicated. A good portion of it could be hidden away in a separate .js file (and I wonder whether some of it is even required). I took a crack at creating what I think a 'reasonable' generated HTML file might look like - see attached. Besides being much simpler, I think it demonstrates how a developer could easily embed a RUI component in an existing page (which is an open requirement). There is also the concept of a module (like Dojo has/had) that gets us away from including individual files, but instead including logical modules/packages, which may pull in .js, css, etc files. There is definitely some connection to dynamic loading here as well.</description>
      <attachments/>
    </issue>
    <issue>
      <id>368506</id>
      <title>Allow to change the default package for interfaces when creating new session EJBs</title>
      <description>An adopter is requesting a way to change the default package used for interfaces when creating new session EJBs. Currently, if the ejb class is com.test.Bean1, the local interface will be com.test.Bean1Local. We need a way to change the default package so the package for the interfaces is different from the package for the bean class. Is jst.ejb the right component for this change?</description>
      <attachments/>
    </issue>
    <issue>
      <id>368555</id>
      <title>Investigate modular loading in HTML generator</title>
      <description>Extend from bug 368166. We want to investigate a method to load the handler as a module into the html file. For example, the code in html egl.require(aHandler); Will load the dependent js, css, includeFile and property file in the aHandler. A design document is attached in bug 368166</description>
      <attachments/>
    </issue>
    <issue>
      <id>368844</id>
      <title>split out R4E from Mylyn Reviews git repository</title>
      <description>Move the R4E source code to a separate repository, by splitting from the current git repository and preserving the history using git filter-branch. The following bundles should be moved to the org.eclipse.mylyn.reviews.r4e repository: pre. ./framework/org.eclipse.mylyn.reviews.frame.core ./r4e/org.eclipse.mylyn.reviews.r4e.feature ./r4e/org.eclipse.mylyn.reviews.r4e.ui ./r4e/org.eclipse.mylyn.reviews.notifications ./r4e/org.eclipse.mylyn.reviews.r4e.mail.smtp ./r4e/org.eclipse.mylyn.reviews.VCalendar ./r4e/org.eclipse.mylyn.reviews.r4e.report ./r4e/org.eclipse.mylyn.reviews.r4e.core ./r4e/org.eclipse.mylyn.reviews.r4e.help ./r4e/org.eclipse.mylyn.reviews.r4e.core.tests ./r4e/org.eclipse.mylyn.reviews.r4e.reports-feature ./r4e/org.eclipse.mylyn.reviews.r4e.ldap ./r4e/org.eclipse.mylyn.reviews.r4e.transform The following bundles should remain in the org.eclipse.mylyn.reviews repository: pre. ./gerrit/org.eclipse.mylyn.gerrit.feature ./gerrit/org.eclipse.mylyn.gerrit.core.tests ./gerrit/org.eclipse.mylyn.gerrit.tests ./gerrit/org.eclipse.mylyn.gerrit.ui ./gerrit/org.eclipse.mylyn.gerrit.target ./gerrit/org.eclipse.mylyn.gerrit.ui.tests ./gerrit/org.eclipse.mylyn.gerrit.core ./framework/org.eclipse.mylyn.reviews.sdk.feature ./framework/org.eclipse.mylyn.reviews.ui ./framework/org.eclipse.mylyn.reviews.feature ./framework/org.eclipse.mylyn.reviews.core ./tbr/org.eclipse.mylyn.reviews.tasks.dsl ./tbr/org.eclipse.mylyn.reviews.tasks ./tbr/org.eclipse.mylyn.reviews.tasks.core ./tbr/org.eclipse.mylyn.reviews.tasks.ui ./tbr/org.eclipse.mylyn.versions.tasks.ui ./tbr/org.eclipse.mylyn.versions.tasks.mapper.generic ./tbr/org.eclipse.mylyn.versions.tasks.core</description>
      <attachments/>
    </issue>
    <issue>
      <id>369079</id>
      <title>[null] Allow multiple null annotations</title>
      <description>(I can imagine that this has been discuss before but I couldn't find the bug/comment.) Currently it seems as if one can only configure one qualified name for Nullable and for NonNull annotations. Given the many different existing annotations out there with the very same semantic meaning, it seems important to allow multiple annotations per case to support code which uses two or more different libraries which are each annotated with different annotations. It would be even better if the compiler would allow wildcards and do name-based matching. Having the "Nullable" and "NonNull" as default. That wouldn't force everybody to have the currently provided runtime jar on the classpath and solve most integration issues without any further ado on the user side.</description>
      <attachments/>
    </issue>
    <issue>
      <id>369296</id>
      <title>[nls tooling] Externalize Strings cannot use src/main/resources</title>
      <description>Build Identifier: Version: Indigo Service Release 1 Build id: 20110916-0149 I have a maven project which uses standard directory structures of src/main/java and src/main/resources. I want my messages.properties file to be generated in src/main/resources instead of the default src/main/java. When I press "Configure..." and try to change the source folder for the property file location to src/main/resources, I get the message "The specified package for the resource bundle is invalid". Yes, there are work-arounds which involve moving the messages.properties file back and forth between the src/main/java and src/main/resources directories, but I feel that this is something Eclipse should support out of the box. I'm using the m2e plugin to manage my project configuration. Reproducible: Always Steps to Reproduce: 1. Select a project which is managed by maven/m2e plugin. 2. Select Source-&gt;Externalize Strings... 3. Select a class with strings to externalize 4. press Externalize... 5. press Configure... 6. Change the source folder for the property file location to src/main/resources 7. Get the message "The specified package for the resource bundle is invalid".</description>
      <attachments/>
    </issue>
    <issue>
      <id>369364</id>
      <title>[DB4O] Performance reports should be logged via a Tracer, not via OM.LOG</title>
      <description>DB4OStoreAccessor contains several performance measurement reports such as OM.LOG.debug("Commit took -&gt; " + (end - start) + " milliseconds"); This leads to a lot of unwanted log output in production settings. Therefore these statements should be replaced by tracing, which can be enabled and disabled as needed.</description>
      <attachments/>
    </issue>
    <issue>
      <id>369763</id>
      <title>Eclipse IDE for Automotive Software Developers</title>
      <description>Created attachment 210093 [details] Feature (package) and bundle (branding plug-in) projects for Eclipse IDE for Automotive Software Developers On behalf of the Eclipse Automotive Industry Working Group (IWG)[1], we would like to provide a new Eclipse package dedicated to developers of embedded control software in the automotive industry. Since its beginnings, Eclipse has been making inroads at automotive suppliers and manufacturers. Aiming at handling the development of modern and increasingly complex automotive software more accurately and efficiently, Eclipse has been adopted as platform for creating sophisticated in-house development tools and integrating those with commercial design tools to highly dedicated tool chains. With companies like BMW, Bosch and Continental having joined the Eclipse Foundation as official members, this tendency has significantly gained in momentum over the past years. In 2011, the Eclipse Automotive IWG has been founded [2] so as to federate and streamline Eclipse-related activities across company boundaries and work upon establishing Eclipse as the number one tool and tool integration platform in the automotive industry. One key activity of the Eclipse Automotive IWG is to define and provide an Eclipse Automotive Tools Platform consisting of selected existing Eclipse components that are frequently used in the automotive industry. The intention of this platform is to provide a reference for both vendors and users of Eclipse-based automotive software design tools and to enable the latter to be consistently and reliably integrated in user-defined tool chains. The implementation of the Eclipse Automotive Tools Platform includes a corresponding Eclipse package made available for download at Eclipse.org [3]. The name of the package is going to be "Eclipse IDE for Automotive Software Developers" which concisely describes the targeted audience and appears to be well aligned with names of existing Eclipse packages. In addition to Eclipse Platform, Java Development Tools, and Plug-in Development Environment, it will include EMF, GMF, Xtext, UML, selected other modeling components, C/C++ Development Tools, and XML/XSD editors and tools. It will bundle the complete SDKs, i.e., runtime binaries, source code, and documentation. [1] http://wiki.eclipse.org/Auto_IWG [2] http://www.eclipse.org/org/press-release/20110720_autoiwg.php [3] http://eclipse.org/downloads</description>
      <attachments/>
    </issue>
    <issue>
      <id>369766</id>
      <title>Request to add a IRemoteFileProxy based file and directory chooser for use in launch configuration tabs</title>
      <description>Build Identifier: M20110909-1335 I would like to have the ability to add a widget to a launch configuration tab which allows the choosing of a remote file or directory. This could be used to choose an executable, working directory, or other resource needed for a remote launch. Reproducible: Always Steps to Reproduce: N/A</description>
      <attachments/>
    </issue>
    <issue>
      <id>369775</id>
      <title>[DB] H2 Database - SQL state for duplicate key exceptions changed in versions &gt;1.3.154</title>
      <description>Build Identifier: Referring to the Eclipse forum thread in [1], the SQL state used for unique index/primary key violation exceptions was changed from 23001 to 23505 in H2, so this will require overriding the isDuplicateKeyException(SQLException) in H2Adapter if CDO (and, as I understand, Orbit) upgrades to a more recent version. See also a related Spring bug report in [2]. [1] http://www.eclipse.org/forums/index.php/m/659583/ [2] https://jira.springsource.org/browse/SPR-8235 Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>369792</id>
      <title>Lucene &amp; Solr 3.5</title>
      <description>Lucene CQs: https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6033 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6034 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6035 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6036 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6037 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6038 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6039 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6040 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6041 Solr CQs: https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6042 https://dev.eclipse.org/ipzilla/show_bug.cgi?id=6043</description>
      <attachments/>
    </issue>
    <issue>
      <id>369856</id>
      <title>[bp] Allows clients to create and extend toggle breakpoint actions</title>
      <description>I have a use case in CDT where I would like to open a dialog and edit breakpoint settings before creating the breakpoint. I would like to use the Ctrl key as a modifier to the toggle breakpoint action to trigger the dialog to open. To implement this I'd like to add an IToggleBreakpointAdapterExtension2 with takes a toggleBreakpointsWithEvent() method. Then extend the toggle breakpoint actions to use this new interface.</description>
      <attachments/>
    </issue>
    <issue>
      <id>369875</id>
      <title>Reimplement org.eclipse.linuxtools.profiling.launch.remote.RemoteConnection in terms of the IRemote* interfaces</title>
      <description>Build Identifier: M20110909-1335 The RemoteConnection in org.eclipse.linuxtools.profiling.launch.remote is based on the RSE interface. Recently, a new set of classes was checked into the master branch, that adds an abstraction layer on top of any of several remote (and local) interfaces. These are IRemoteProxyManager, IRemoteCommandLauncher, and IRemoteFileProxy. In order to easily make use of these interfaces in a launcher, it would be helpful to have RemoteConnection re-written in in terms of these interfaces. Also, since the IRemote* interfaces can access local machines as well, RemoteConnection can be moved back to org.eclipse.linuxtools.profiling.launch. Reproducible: Always Steps to Reproduce: N/A</description>
      <attachments/>
    </issue>
    <issue>
      <id>370183</id>
      <title>[compiler][null] Consider stronger NPE warnings for non-volatile fields</title>
      <description>3.8M5 This is to follow up the suggestion in bug 369487 comment 19. &gt; (13) We seem to have not followed up on the suggestion &gt; from https://bugs.eclipse.org/bugs/show_bug.cgi?id=247564#c2 &gt; for making stronger warnings in the case of nonvolatile fields. &gt; &gt; public class X { &gt; Object val; &gt; void foo() { &gt; if (val == null) { &gt; int otherVal; &gt; for (int i=0; i&lt;1000000; i++) &gt; otherVal = 1234 / i * 4234; &gt; if (val.hashCode() == 0) // Why should this be a potential NPE ? &gt; System.out.println(""); &gt; } &gt; } &gt; } &gt; &gt; i.e there are no intervening assignment and also no method call. &gt; &gt; I think this feature will be more useful if we start with stronger &gt; assertions for non volatile fields and downgrade them to potential &gt; warnings upon encountering a function call (or where we see an assignment &gt; by suitably altering the nullness status) &gt; &gt; This should also improve Ayush's situation described in &gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=247564#c68, which is going &gt; to be all too common as OOP style encourage numerous method &gt; calls.</description>
      <attachments/>
    </issue>
    <issue>
      <id>370283</id>
      <title>[api] allow clients to be notified of drop events in the task list</title>
      <description>I would like to be able to extend the TaskListDropAdapter, in particular to add custom behaviour when a task is dragged onto another task if some modifier key is held.</description>
      <attachments/>
    </issue>
    <issue>
      <id>370300</id>
      <title>Provide extension point for EGit CloneSourceProvider</title>
      <description>Depends on EGit 1.3 (will be released mid of February). Proposed change http://review.mylyn.org/#change,115 (still draft)</description>
      <attachments/>
    </issue>
    <issue>
      <id>370331</id>
      <title>[api] automatically validate when pressing finish on repository setting page</title>
      <description>The repository settings page should have a check box "Validate on Finish" that triggers validation when hitting and enter and reports the results. It's important that validation can be disabled by unchecking "Validate on Finish" to allow creation of repositories when offline or when the server returns transient errors.</description>
      <attachments/>
    </issue>
    <issue>
      <id>370357</id>
      <title>Add Ant 1.8.3 to build</title>
      <description>Once Ant 1.8.3 is released we will put it in Orbit (bug 370356) and then it should be released to the Platform's builds.</description>
      <attachments/>
    </issue>
    <issue>
      <id>370364</id>
      <title>ClassCastException at HttpServerManager.createHttpConnector</title>
      <description>Build Identifier: I20120127-1145 !ENTRY org.eclipse.equinox.cm 4 0 2012-02-01 15:28:07.818 !MESSAGE java.lang.String cannot be cast to java.lang.Integer !STACK 0 java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer at org.eclipse.equinox.http.jetty.internal.HttpServerManager.createHttpConnector(HttpServerManager.java:134) at org.eclipse.equinox.http.jetty.internal.HttpServerManager.updated(HttpServerManager.java:72) at org.eclipse.equinox.internal.cm.ManagedServiceFactoryTracker$2.run(ManagedServiceFactoryTracker.java:190) at org.eclipse.equinox.internal.cm.SerializedTaskQueue$1.run(SerializedTaskQueue.java:36) 15:28:07.824 [com.c4biz.osgiutils.logging.reader.OsgiLogListener@831fb31] ERROR org.eclipse.equinox.cm - java.lang.String cannot be cast to java.lang.Integer java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer at org.eclipse.equinox.http.jetty.internal.HttpServerManager.createHttpConnector(HttpServerManager.java:134) ~[na:na] at org.eclipse.equinox.http.jetty.internal.HttpServerManager.updated(HttpServerManager.java:72) ~[na:na] at org.eclipse.equinox.internal.cm.ManagedServiceFactoryTracker$2.run(ManagedServiceFactoryTracker.java:190) ~[na:na] at org.eclipse.equinox.internal.cm.SerializedTaskQueue$1.run(SerializedTaskQueue.java:36) ~[na:na] Reproducible: Always Steps to Reproduce: 1. create a bundle with a Configuration Manager update properties = getJettyProperties(); configuration = configurationAdmin.createFactoryConfiguration( "org.eclipse.equinox.http.jetty.config", null); configuration.update(properties); 2. start the org.eclipse.equinox.http.jetty bundle using automatic activation 3. start the bundle with the new configuration</description>
      <attachments/>
    </issue>
    <issue>
      <id>370370</id>
      <title>Support of Eclipse 4 Parts in WindowBuilder</title>
      <description>Eric Clayberg indicated that WB might be supporting Eclipse 4 Parts. That would be great, especially as Eclipse 3.8 will be last Eclipse 3.x release. I would be great to have a bug to get notifications if updates happen. Also in http://www.eclipse.org/forums/index.php/t/281920/ Eric asked for a template. Here it is again: package com.example.e4.rcp.todo.parts; import javax.annotation.PostConstruct; import javax.annotation.PreDestroy; import org.eclipse.swt.widgets.Composite; public class TodoDetailsPart { @PostConstruct public void createPartControls(Composite parent) { } @PreDestroy public void dispose() { } @Focus public void setFocus() { // TODO Set Focus to control } }</description>
      <attachments/>
    </issue>
    <issue>
      <id>370462</id>
      <title>Improving the debug preferences - add support for different charsets and unify DSF and CDI debug preferences</title>
      <description>Build Identifier: Version: 3.7.0 Build id: I20110613-1736 This is a feature request for functionality which enhances the work already done to fix Bug 307311. The fix for Bug 307311 brought general support to display non-ASCII strings correctly within the debugger. The problem however is that it can only be guessed which character encoding format is actually used by the program which is being debugged. This best guess is to use the current platform's default charset, but this might not actually be the case. It therefore would make sense to allow the user to tell the debugger which charset is used by his program, so that the debugger can display strings correctly. Note that a user only has to care about this if he wants to debug a program which uses a different charset than the platform's default charset. Such a user preference option would go in line with the already existing general C/C++ debug format settings found at Preferences -&gt; C/C++ -&gt; Debug. A proposed GUI of this user preference option can be seen within the provided screenshot draft. The programmatic implementation is very straightforward, as only a few very simple gdb commands need to be used. They however are only supported by gdb 7.0 or later. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>370498</id>
      <title>Update Generator UI to indicate which extensions have been applied to the workspace</title>
      <description>As part of 369139, the EDT Generator framework was modified to support extensions to existing generators using the Eclipse plug-in framework. The EDT generator preference (EGL-&gt;Compiler-&gt;EDT)/properties pages should be updated to show a read only list of extensions that have been found for an existing generator. One option may be to expand the Generator tab at the bottom of these screens to include the read only list.</description>
      <attachments/>
    </issue>
    <issue>
      <id>370540</id>
      <title>[Formatter] New settings for parentheses positions</title>
      <description>Build Identifier: 20110916-0149 Examples of my preferred formatting/wrapping style: If max line length not exceeded: void exampleMethod(ExampleClass1 exampleparam1, ExampleClass2 exampleParam2) { // ... } If max line length exceeded: void exampleMethod( ExampleClass1 exampleparam1, ExampleClass2 exampleParam2 ) { // ... } The closest that I can currently get to that with Eclipse's formatter is this: void exampleMethod( ExampleClass1 exampleparam1, ExampleClass2 exampleParam2) { // ... } I can get it to put each parameter on a separate line and use regular indentation for them, but there doesn't seem to be an option to put the ending parenthesis on a new line. Having such an option would be greatly appreciated :) Another example with class declarations: class ChildClass extends ParentClass implements ExampleInterface { // ... } This is achievable if I set opening braces to always be on a new line, but I'd still like it to remain on the same line if the line does not exceed the max length: class ChildClass extends ParentClass { // ... } Plus, even if I set braces to be on a new line, closing parenthesis will still remain on the previous line when wrapped. More examples of preferred wrapping in other areas: if ( exampleValue1 == exampleValue2 &amp;&amp; exampleValue3 == exampleValue4 ) { // ... } exampleObject.exampleMethod( exampleParam1, exampleParam2, exampleParam3, exampleParam4 ); try ( ExampleClass1 exampleObject1 = new ExampleClass1(); ExampleClass2 exampleObject2 = new ExampleClass2() ) { // ... } catch ( ExampleExceptionClass1 | ExampleExceptionClass2 | ExampleExceptionClass3 e ) { // ... } Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>370587</id>
      <title>Give moderation rights to project leads (&amp; committers?) on their forum</title>
      <description>It would be very useful if project leads (+ maybe committers) on a given project could have the right to moderate topics on their forums, especially to edit topic titles with a "[SOLVED]" tag when the problem mentioned in the post has been solved. That would be great to have this automagically enabled for all the existing projects, but maybe in a first time this could be enabled on request of the project leads? WDYT?</description>
      <attachments/>
    </issue>
    <issue>
      <id>370958</id>
      <title>"Bundle-ClassPath: external" entries should not fail the build</title>
      <description>Build Identifier: The case is about putting such entry in MANIFEST.MF of plug-in: Bundle-ClassPath: external: $user.home$/somefile which is compilant with OSGi concept. The attempt of building this plug-in by tycho ends with IOException throwing from org.eclipse.tycho.core.osgitools.DefaultBundleReader#getEntry (line 203) Reproducible: Always Steps to Reproduce: 1.create plugin project with manifest.mf file containing Bundle-ClassPath: external:$user.home$/somefile entry 2. Try to build it to eclipse plugin using tycho 0.13.0</description>
      <attachments/>
    </issue>
    <issue>
      <id>371038</id>
      <title>Search for phrases</title>
      <description>I was searching for who defines the command "Show in Navigator" but when I typed it in the search box, it searched for "showinnavigator" and therefore got no hits.</description>
      <attachments/>
    </issue>
    <issue>
      <id>371133</id>
      <title>[Browser] Support multiple script executions</title>
      <description>The current implementation returns false when a Browser#execute or #evaluate is called while another is pending. There should be a way to allow subsequent calls to be queued and execute when the previous is completed.</description>
      <attachments/>
    </issue>
    <issue>
      <id>371151</id>
      <title>UI for working with plugin service properties</title>
      <description>I know Anton did work to click on a service link name and see the properties dump in the console. I thought this was a pretty cool solution for seeing the properties without cluttering the more user oriented plugins page. However, I can't seem to make it work. I clicked on the name, nothing happens in Chrome or FF, or at least I don't see stuff in my console. I think that either I didn't understand how to invoke the feature, or maybe it was not released yet. I think we need some way to see the properties or else we really are going to have to leave a link to the old plugins page handy. That is why I'm marking this RC1...so we can decide what to do</description>
      <attachments/>
    </issue>
    <issue>
      <id>371412</id>
      <title>Improve Handling Git Contributions with Gerrit</title>
      <description>In step 4 (http://wiki.eclipse.org/Development_Resources/Handling_Git_Contributions), we mention that: Contributor asserts on the corresponding bug or in a comment on the Gerrit push record that they: authored 100% the content they are contributing have the rights to donate the content to EPL contribute the content under the EPL This step is cumbersome and always results in time wasted in tracking folks down to do this. Can we somehow get a user to confirm this when he signs up via Gerrit and sign an agreement electronically (e.g., https://git.eclipse.org/r/#/settings/agreements). Gerrit has built in support for contributor agreements, see auth.contributorAgreements http://gerrit-documentation.googlecode.com/svn/Documentation/2.2.2/config-gerrit.html#_a_id_auth_a_section_auth Contributors would be required to acknowledge and sign this agreement before uploading their changeset which would eliminate the need for step 4. Thoughts?</description>
      <attachments/>
    </issue>
    <issue>
      <id>371888</id>
      <title>Refactoring to support ComboDirectEditManager in GMF Runtime</title>
      <description>We have prepared patch for Bugzilla #158116 - Support enum based labels. In order to avoid a lot of the copy pasting in the generated code we would like to contribute new ComboDirectEditManager/ComboCellEditorEx classes to DirectEditManager/CellEditor hierarchy. The attached patch includes the following refactoring of existing classes: - CellEditorEx interface introduced from TextCellEditorEx class - DirectEditorManagerBase class extracted from TextDirectEditManager, all calls to TextCellEditorEx changed to use new interface, there are no other changes - some code related to diagram specific behavior of cell editors extracted from TextCellEditorEx into CellEditorExDelegate (without changes) to be reused in the ComboCellEditorEx (they must have different super classes) - LabelDirectEditPolicy switched to check against the new interface CellEditorEx instead of the old TextCellEditorEx implementation - new ComboDirectEditManager / ComboCellEditorEx implemented We have carefully checked the refactoring and sure that it does not break any backward compatibility -- in particular, the patch does NOT inlcude any changes except - some code moved to the new location - usages of the implementation classes changed to usage of new extracted interfaces. Thus, we believe it would be safe to promote these changes into GMF runtime.</description>
      <attachments/>
    </issue>
    <issue>
      <id>371983</id>
      <title>Support &lt;iu&gt; syntax in category.xml</title>
      <description>Build Identifier: 0.14.0 I have several multi-module tycho projects consisting of one or more eclipse-plugin modules and a eclipse-repository module. Under tycho 0.13.0 I managed to get the eclipse-repository producing a p2 repository containing the eclipse-plugins using a combination of pom dependencies and a catch all category.xml file. Under Tycho 0.14.0 the eclipse-repository is unable to find any content and the build fails. Reproducible: Always Steps to Reproduce: 1. Run sample project under tycho 0.14.0</description>
      <attachments/>
    </issue>
    <issue>
      <id>372012</id>
      <title>[compiler][null] Warn when defaults not specified</title>
      <description>HEAD after fix for bug 366063 does not support workspace/project-wide nullness defaults. We need to investigate a configurable option to warn in the following cases: 1) For named packages, if the package-info.java does not contain the @NonNullByDefault annotation, or if it contains no package-info.java, warn at exactly one class inside the package 2) For default packages, warn at each class inside the package which does not contain the @NonNullByDefault annotation. The warning message can be "A default null annotation has not been specified for the package {0}" and "A default null annotation has not been specified for the type {0}"</description>
      <attachments/>
    </issue>
    <issue>
      <id>372119</id>
      <title>Provide REST API for git command line</title>
      <description>For bug 369608 we're going to need REST API for git command line, which would accept Strings like "git commit -m 'the fix'" and respond with Strings* that would be returned in the console. * or JSONs if we would like to be able to update the UI with the server response</description>
      <attachments/>
    </issue>
    <issue>
      <id>372181</id>
      <title>Working set support for Expressions View</title>
      <description>Build Identifier: I20111209-1447 The existing Expressions view shows all expressions present in the workspace as a simple list. Sometimes the user has multiple projects in his workspace, and has created expressions for all of them. While debugging a single project, it is inconvenient to see all those expressions in the view which are not relevant for this project. The view tries to evaluate all expressions, and most of them fail with an error message. Working sets give us an elegant way to group relevant expressions together, and show only those expressions which are applicable for the project being debugged currently. The user can define working sets and assign expressions to each working set. He/she can assign the same expression to multiple working sets. Each expression view will use some or all of the working sets. This bug will track the implementation of this feature as proposed and as it evolves. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>372291</id>
      <title>Basic Open Graph protocol for NOVA</title>
      <description>Build Identifier: I've notice that when I was sharing a page from the eclipse website on a social media site, some information was missing. I created a patch for the nova theme that would add the following lines in the header of every page using nova. &lt;meta property="og:title" content="&lt;?= $pageTitle ?&gt;" /&gt; &lt;meta property="og:description" content="Eclipse is probably best known as a Java IDE, but it is more: it is an IDE framework, a tools framework, an open source project, a community, an eco-system, and a foundation." /&gt; &lt;meta property="og:image" content="http://www.eclipse.org/eclipse.org-common/themes/Nova/images/eclipse.png" /&gt; Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>372551</id>
      <title>Add support for external-tool-based checkers</title>
      <description>Build Identifier: I20120125-1800 Even though the checkers provided by Codan are a great addition to a developer’s toolbox, many more are needed for Codan to have feature parity with existing tools like Cppcheck or clang_check. In addition, Codan’s infrastructure provides good support for writing AST-based checkers, but support for integrating external tools is missing. The main reason for integrating Codan with external tools is to enjoy all the code checks from mature tools without leaving our beloved Eclipse. With the proposed new infrastructure: * External tools can be configured using Codan’s preference page * External tools are invoked automatically when a C/C++ file is saved * The output of these tools can be displayed as editor markers Reproducible: Always Steps to Reproduce: N/A</description>
      <attachments/>
    </issue>
    <issue>
      <id>372575</id>
      <title>Autocompletion and syntax highlighting in OQL editor</title>
      <description>Build Identifier: I developed a first prototype of autocompletion support for OQL queries editor. In this version it is able to: -provide autocompletion on class names in FROM clause (taken from classes available in the snapshot) -provide syntax highlighting for OQL keywords and comments Future evolutions: -provide autocompletion for attributes in SELECT and WHERE clauses. I attached the patch to org.eclipse.mat.ui and org.eclipse.mat.tests plugins. It impacts org.eclipse.mat.ui.snapshot.panes.OQLPanes, where the component to input the query is now a org.eclipse.jface.text.source.SourceViewer. All support for syntax highlighting and content assistant is in new package org.eclipse.mat.ui.snapshot.panes.oql. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>372588</id>
      <title>[JUnit] Add "Link with Editor" to JUnit view</title>
      <description>Build Identifier: Version: Indigo Release Build id: 20110615-0604 With around 150 unit test in a test suite, it is hard to find and re-execute / debug a specific test case by name. Many other Eclipse views have "Link with Editor" buttons that allow for a view to always select the item that is being edited. This may apply for the JUnit view, too. If the current selection in an Editor matches the displayed JUnit execution content, the test case could be selected and given focus in the JUnit view. (i.e. the Editor's cursor is in a method annotated with @Test and previously executed with JUnit) Alternatively, like the Outline view, the JUnit view could have a "Sort" button to sort all test cases alphabetically. These two features wouldn't be used very frequently, so they could be put in the "Advanced Section" dropdown Reproducible: Always Steps to Reproduce: See Details</description>
      <attachments/>
    </issue>
    <issue>
      <id>372607</id>
      <title>[Gtk3] Tree should expand/collapse on Arrow_Left/Arrow_Right</title>
      <description>Ubuntu 11.10 A Tree should expand/collapse on Arrow_Left/Arrow_Right. Currently, those keys don't do anything, but Shift+Arrow_Left/Shift+Arrow_Right almost perform as expected. I would expect the same behavior as in nautilus: * Arrow_Right: - expands the current item * Arrow_Left: - if current item is expanded: collapse it - if current item is collapsed or not expandable: select parent item</description>
      <attachments/>
    </issue>
    <issue>
      <id>372644</id>
      <title>Create Customizable tooltips for the TreeViewer using a CustomizableLabelProvider</title>
      <description>The tooltips should be customizable. The following fields should be customizable for tooltip : - text - background - foreground - image - overlay for the image (top left/middle/right and bottom left/middle/right) - bold - italic - font name - font size - time displayed - display delay time - shadow (SWT.SHADOW_NONE, SWT.SHADOW_IN and SWT.SHADOW_OUT) - aligment (SWT.LEFT, SWT.RIGHT, SWT.CENTER)</description>
      <attachments/>
    </issue>
    <issue>
      <id>372770</id>
      <title>Feature Request: Import Discrete Population Transportation Events in STEM</title>
      <description>Currently only continous movement of populations can be modeled easily. In the downloadable BeefScenario for example, the transportation of cattle from farms to slaughterhouses is modeled with MigrationEdges. Discrete transportation could be modeled using Triggers, Modifiers and Predicates as in the EvacuationExample. The Modifies would switch the MigrationEdges on, when there is a transportation event and off afterwards. To easily import multiple transportation events a new component is needed, that automatically creates Triggers, Modifiers and Predicates. Any thoughts on this?</description>
      <attachments/>
    </issue>
    <issue>
      <id>372795</id>
      <title>Refactor common code in GDBControl* classes</title>
      <description>The large parts of the code in 'GDBControl' and 'GDBControl_7_0' classes are identical. The common code should be re-used by making 'GDBControl_7_0' a subclass of 'GDBControl' or refactored into a common superclass.</description>
      <attachments/>
    </issue>
    <issue>
      <id>373044</id>
      <title>[transport] Implement support for HTTP caching shared by all installations and instances on a system</title>
      <description>Today p2 relies on timestamps to detect if a metadata file needs to be downloaded again or not ([composite] artifact/content xml/jar, p2.index). In addition to the timestamp logic the p2 HTTP transport should also respect the HTTP protocol. The HTTP protocol allows to signal a cachability which avoids further client requests until the cache time really expires. For the benefit of maximum cache hits, the p2 HTTP transport should use a system wide internal cache location. The HttpClient already provides an in-memory storage which does not survive application restarts. But it would be a first step in avoiding unnecessary server round-trips while Eclipse is running. This single cache should be used for all p2 HTTP operations (no matter which profile is involved). Thus, PDE with it target platforms will also re-use it.</description>
      <attachments/>
    </issue>
    <issue>
      <id>373055</id>
      <title>[misc] Assignment via Code Recommenders</title>
      <description>I frequently use Ctrl+2, L to assign a new variable, which I create via new() or get via a method, e.g. getActivity(). I think a really cool feature would be if Code Recommenders suggest that an assignment could be directly done, e.g. getActiv -&gt; Suggestions getActivitiy() getActivity() - with assignment and if I select the second I would directly get: SimpleActivity activity = getActivity();</description>
      <attachments/>
    </issue>
    <issue>
      <id>373067</id>
      <title>Warn when committing resources which contains warnings/errors</title>
      <description>Created attachment 211950 [details] commit dialog screenshot It would be nice to see a Warning message in git commit dialog, if one commits files which contain warnings or errors. Similar to SVN commit dialog. Please see the attached screenshot.</description>
      <attachments/>
    </issue>
    <issue>
      <id>373092</id>
      <title>Fit and finish / UI scrub for 0.8</title>
      <description>General IDE fit and finish for 0.8. All changes should be documented in this bug.</description>
      <attachments/>
    </issue>
    <issue>
      <id>373131</id>
      <title>DI Container should also be usable in a Non-OSGi environment</title>
      <description>Build Identifier: I20120208-2200 The DI Container has some dependencies, that require it to be run in an OSGI environment, otherwise there will be NPEs. It would be good, if this were loosy coupled, so that the DI Container (Eclipse Context) can also be used outside of OSGI, i.e. to reuse components in a legacy application. The dependencies are easily replaced. In Build I20120208-2200 there are only 4 places to edit: - ContextDebugHelper.getDebugger() - IInjector.shouldDebug - ProviderHelper.static {} - ProviderHelper.findProvider() These classes are found in the bundles: - org.eclipse.e4.core.contexts - org.eclipse.e4.core.di Reproducible: Always Steps to Reproduce: 1. Create a Java Application 2. In main: call EclipseContextFactory.create (first NPEs) 3. Use ContextInjectionFactory for Injection (second NPEs)</description>
      <attachments/>
    </issue>
    <issue>
      <id>373184</id>
      <title>Active Annotations</title>
      <description>I'd like to have annotation processing hook, where I can use the JVM ModelInferrer to do whatever I like. The annotations and the processing logic could be defined in an interpreted language, which is very similar to Xtend (uses Xbase, of course). With that we could solve a number of the outstanding features requests. E.g. having such an annotation for properties, nice toString methods, builder APIs, etc. (See what Lombok or SpringRoo do with this). The cool thing is, since Xtend compiles to Java and if the annotation processing language is interpreted you would define your own annotations together with how they are processed and would immediately see how your changes get applied to an Xtend file using that annotation. (Doesn't mean you should not write tests ... hehe) There are numerous use cases not only general ones like mentioned above but a lot of framework and project specific ones. In GWT for instance you need to define two interfaces and a class with a method implementation to create just one method which can be called from the client. Today IDEs come with wizards creating all that stuff for you. Would be cool to have a simple annotation and everything would be generated and kept in sync automatically. Since Xtend translates to Java source and we have this very felxible JvmModelInferrer hook, such a feature would be powerful but yet understandable for the user (they see what they get) and the tooling would work out of the box, including the new tracing infrastructure. As those annotations would only need to live in Xtend and must not necessarily be translated to Java code, we could even allow full blown expressions in them, and define the scope of them by associating them in the model inferrer. Just think of pre and post-conditions, invariants or a library way to do create functions: @Create(new MyModel) def foo(String name) { it.name = name }</description>
      <attachments/>
    </issue>
    <issue>
      <id>373758</id>
      <title>Request Java 7 support for CBI based platform build</title>
      <description>mvn clean install \ &gt; -Dmaven.repo.local=/var/tmp/lts/R4_localrepo -Dmaven.test.skip=true /usr/lib/jvm/java [INFO] Scanning for projects... [ERROR] The build could not read 15 projects -&gt; [Help 1] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.configurator:3.3.100-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.configurator/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 17, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.core:3.2.500-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.core/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 17, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.core.linux:3.2.200-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.core.linux/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.core.win32:3.2.200-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.core.win32/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.examples:2.0.0 (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.examples/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.tests.core:3.3.0-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.tests.core/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.scheduler:3.2.300-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.scheduler/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.update.ui:3.3.0-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/update/org.eclipse.update.ui/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.ant.core:3.2.400-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/ant/org.eclipse.ant.core/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.ant.launching:1.0.100-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/ant/org.eclipse.ant.launching/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.ant.ui:3.5.300-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/ant/org.eclipse.ant.ui/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.ant.tests.core:3.2.200-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/ant/org.eclipse.ant.tests.core/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.ant.tests.ui:3.8.0-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/ant/org.eclipse.ant.tests.ui/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.platform:3.8.0-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/platform/org.eclipse.platform/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] The project org.eclipse.platform:org.eclipse.sdk:3.8.0-SNAPSHOT (/home/akurtakov/git/R4_platform-aggregator/eclipse.platform_e4/platform/org.eclipse.sdk/pom.xml) has 1 error [ERROR] Non-resolvable parent POM: Could not find artifact org.eclipse.platform:eclipse.platform:pom:3.8.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 16, column 11 -&gt; [Help 2] [ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch. [ERROR] Re-run Maven using the -X switch to enable full debug logging. [ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles: [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException [ERROR] [Help 2] http://cwiki.apache.org/confluence/display/MAVEN/UnresolvableModelException Seems like there have been some changes made (code moved?) that invalidated the parent.relativePath setting. Probably the relative path can be dropped in this case.</description>
      <attachments/>
    </issue>
    <issue>
      <id>373806</id>
      <title>Cache target definition resolution result</title>
      <description>Build Identifier: We have a maven project with a lot of submodules. Each submodule has several subprojects. All the projects use one and the same target platform. The build time for our main project is more than two hours and most of the time is lost in resolving the target platform. This happens for each subproject (about 200) while the target platform is the same. The result of the target platform resolution could be cached. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>374153</id>
      <title>[patch][breakpoints] Show accelerator for toggle breakpoint modifiers in ruler popup menu.</title>
      <description>It'll be really difficult for users to discover the new toggle breakpoint action modifiers. Ideally they should be advertised in the editor ruler's popup menu.</description>
      <attachments/>
    </issue>
    <issue>
      <id>374349</id>
      <title>Add real label, description, etc. to generated source feature</title>
      <description>When using the tycho-source-feature-plugin, we can see that the generated feature appears with its ID in p2 ui. It is not very user-friendly. Tycho-source-feature-plugin should generate a smarter name, more accurate witht he non-source feature it relies on. As a requirement for this, the Feature model element in Tycho must support the "name" attribute for a feature.</description>
      <attachments/>
    </issue>
    <issue>
      <id>374838</id>
      <title>Contributing Code for SWT GeoMap</title>
      <description>Build Identifier: Contributing Sourcecode for MapWidget The SWT MapWidget is a simple Viewer for Openstreetmap (or releated and thus basically all) tile-based maps. More details incl. sourcecode in original form and demos can be found here: SWT (Eclipse, SWT, RCP) Map Widget http://mappanel.sourceforge.net/swt/ The idea is to move the code into the nebula project to allow better sharing and to go through another iteration of quality assurance. Released under LGPL right now, but I am the sole author and I want to share with Nebula somehow (open to all options here). My full identify is: Stepan Rutz, Frechen, Germany The Tiledata comes from a tile-server and the user has to comply to the tile server's usage policies or set up his own timeserver from the Openstreetmap (OSM) data. This is a drop of the code as it currently is and adjustment to the nebula structure will be done later on in the process. Also adjustments of javadocs, FAQs and some functional modifications need to be done. The idea is to keep the core viewer without dependencies and simple. Further stuff like in the demo app from the current webpage should be optional. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>375292</id>
      <title>Provide marketplace client for classic download</title>
      <description>I want to discuss the inclusion of the marketplace client into the classic download. The classic download is the unpolluted download. I can see that inclusion of non-platform code must be avoided but we must answer the following question: "is the classic download something that will be used "as is" or will it be used as a base for customization." If the answer to the question is "as is" then fine, but if it is the latter, i.e used for customization then inclusion of the client is something to reconsider. The "drag to install" experience will not work for classic which is confusing.</description>
      <attachments/>
    </issue>
    <issue>
      <id>375372</id>
      <title>[Subclipse] Include connector in next mylyn release</title>
      <description>This is to follow up the implementation of missing functionality to include the Subclipse connector in the next mylyn release. Steffen, could you please start the discussion on this one and indicate what is missing on the subclipse connector ? I actually use it only in the context of Mylyn Reviews and it's pretty stable in this context. Could you please provide some steps the reproduce the problems seen while using it in the context of Mylyn builds</description>
      <attachments/>
    </issue>
    <issue>
      <id>376043</id>
      <title>Enhance oprofile to work with remote target</title>
      <description>Build Identifier: HEAD A year ago Mentor Graphics Embedded Systems Division (former CodeSourcery) worked on remote profiling for it's CodeBench IDE. During former year there were discussions in linuxtools-dev about contributing this upstream and community welcome this idea. Now there is MG management decision to allocate resources to do that. This issue will contain set of patches to enhance oprofile module to work with remote targets. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>376200</id>
      <title>Support floating palette around diagram node</title>
      <description>Graphiti has a neat feature which displays a floating palette around diagram nodes when mouse enters the nodes. The floating palette list the actions that can be invoked for the nodes. It disappears when the mouse leaves the nodes. We're planning to bring this feature into Sapphire Diagram. This enhancement tracks that work.</description>
      <attachments/>
    </issue>
    <issue>
      <id>376233</id>
      <title>provide activity tracing for Tasks, Builds, Reviews and Commits</title>
      <description>Build Identifier: Activity tracing for Tasks, Builds, Reviews and Commits (suggestion from Steffen Pingel) [The Mylyn task editor is the hub for task-focused collaboration. Yet, there are many other artifacts and activities that are part of the development workflow that are visualized in different views in the IDE. A unified activity view that aggregates tasks, builds, reviews and commits either in a dashboard or embedded in the task editor would nicely enhance traceability and visibility. ] Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>376258</id>
      <title>Create a new package named Eclipse for Mobile Developers</title>
      <description>We need a new package product called "Eclipse Micro SDK". This was discussed at EclipseCon although the final name is TBD. Daniel Pastore (Eldorado) and Eric Cloninger (Motorola) are the proposed initial maintainers. Discuss requirements for the package in the comments.</description>
      <attachments/>
    </issue>
    <issue>
      <id>376350</id>
      <title>Site_login ignores password expiry</title>
      <description>We need to check the password expiry field when committers login, and indicate if they need to update their password. Using an expired password presently causes no issues for site_login, but causes some VCS clients to return errors. -M.</description>
      <attachments/>
    </issue>
    <issue>
      <id>376476</id>
      <title>EGLAR Specification in EDT</title>
      <description>Build Identifier: EGLAR in RBD has two versions, we need to investigate see if the EGLAR file specification need to be updated or not. 1) The simple ELGAR - this type of EGLAR file only includes the IR files, and no other resources are included. Simple EGLAR file is normally work with binary project, it might that the EDT no longer need this type of EGLAR file. 2) The complete version of EGLAR - this type of EGLAR file includes all of the resource files (the images, generated Java, JS files etc) under an EGL project. For the detailed specification of EGLAR file in RBD, please refer to the design doc in RTC (64094: EGLAR/Target Platform). Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>376712</id>
      <title>Feature Request: New MapView that supports visualizing "Discrete Population Transportation Events"</title>
      <description></description>
      <attachments/>
    </issue>
    <issue>
      <id>377327</id>
      <title>Continuous Integration</title>
      <description>Build Identifier: There is currently no official Gemini Blueprint continuous integration build. It would be nice to have the build running under something like Jenkins/Hudson with clover code coverage and findbugs. One would have to setup three jobs one for each OSGi container. 1. # mvn clean install -Pit,felix 2. # mvn clean install -Pit,equinox 3. # mvn clean install -Pit,knopflerfish Just make sure Maven 3.0.4 is installed (can be done through Jenkins/Hudson). Clover would require its own separate job. And oh course the clover and findbugs plugins for Jenkins/Hudson would have to be installed too. https://wiki.jenkins-ci.org/display/JENKINS/Clover+Plugin I would however change the: install -Dmaven.test.failure.ignore=true to clean install -DskipTests As you don't need to run the tests in the first stage, as they get run again later on after instrumentation. https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin and just add findbugs:findbugs to the end of the normal jobs maven goals. If you want you can point me at a Jenkins/Hudson instance and I can have everything setup in about 30 minutes. As I've done this about a hundred times or so :) Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>377373</id>
      <title>[subwords] known limitations with JDT 3.8</title>
      <description>currently when using subwords on types, it requires a prefix match to find all potential candidates (that match the prefix) and then allows users to refine this list using the subwords matching strategy. An optimal solution would enable developers use subsequences from the very beginning without the need of a prefix match of at least one character.</description>
      <attachments/>
    </issue>
    <issue>
      <id>377536</id>
      <title>Add a global preference to use RTTI for variable types determination (the gdb "set print object" option)</title>
      <description>Build Identifier: This preference could be useful when working with the gdb console commands. Moreover, starting from gdb 7.5 "set print object" should affect MI. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>378002</id>
      <title>[activity] get additional informations from workspace</title>
      <description>Get the additional informations from the workspace: - task list - builds data model (build informations) - EGit repo model (commit informations) I have to check, where the data stored.</description>
      <attachments/>
    </issue>
    <issue>
      <id>378003</id>
      <title>[activity] integrate a TableViewer in the Task Editor</title>
      <description>Integrate a TableViewer in the comment stream.</description>
      <attachments/>
    </issue>
    <issue>
      <id>378021</id>
      <title>Support for bundled macos app</title>
      <description>As I'm finishing up the support for standard macos application for M7 (where all the files are in the .app folder (bug #57349)), the last bit of support that is missing in the overall story is for tycho to provide a switch that will let the user pick the new shape for their provisioned product. The untested attached patch adds a new parameter to the AbstractProductMojo (maybe it can be moved to the DirectorMojo itself) that users can set to get the new shape. Note that the only special tycho needs to do is to suffix the install folder with ".app". The rest of the magic is done by the p2 director that will be part of M7. Also be sure to consume the new p2.publisher.* bundles included in M7 as those contain changes to the metadata generation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>378032</id>
      <title>[api] provide editor support for required attributes</title>
      <description>TaskAttributes should have a notion of "required". Unlike Bugzilla, some connectors have required fields for new task creation that can't be prefilled with some value. Currently, all connectors handle this internally by somehow annotating the UI to help the user and checking for required fields on submission. I could imagine that a metadata attribute similar to read-only would be sufficient for 80% of the cases.</description>
      <attachments/>
    </issue>
    <issue>
      <id>378101</id>
      <title>[activity] add activity provider for related tasks such as Gerrit reviews</title>
      <description>Parsing the task id from the subject id. This functionality is at the moment not existing.</description>
      <attachments/>
    </issue>
    <issue>
      <id>378298</id>
      <title>[EditorMgmt] [Split editor] Allow nesting of Sash/Stack in a Stack</title>
      <description>* Allowing to have a Sash inside the Stack would allow to implement split-editors * Allowing to have a Stack inside the Stack is way to implement multi-part editors reusing existing ones</description>
      <attachments/>
    </issue>
    <issue>
      <id>378338</id>
      <title>Support direct inclusion of plugin in category.xml</title>
      <description>Sometimes, it is convenient to get plugins part of an update-site without making a feature for them. It is the case for example when mirroring 3rd-party bundles: we want them to be available in the site, but we don't want to ship them in a feature (to avoid issues when 2 features conflict on the version of one bundle). So it would be pretty useful to have a simple way to publish plugins in repository using through the usual file to define repo: category.xml. This would allow Tycho to support it as well. Eg: &lt;plugin url="plugins/my.plugin_0.0.0" id="my.plugin" version="0.0.0"/&gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>378485</id>
      <title>"Open With &gt; Other..." should allow to store as default</title>
      <description>The "Open With &gt; Other..." dialog should allow me to store the selected editor as default for this file type. A problem is that the Editors &gt; File Associations preferences allow two kinds of file name patterns: name.ext and *.ext. UI could look like this: &lt;editors list&gt; [Browse...] [ ] Always use this editor for: // checkbox; *unchecked* by default (o) *.ext ( ) name.ext // radios; first selected by default</description>
      <attachments/>
    </issue>
    <issue>
      <id>378494</id>
      <title>Change RuntimeProcessFactory to use file and process proxies</title>
      <description>Build Identifier: This modification will allow changing the Linux tools path used by remote projects and can serve as common infrastructure for future remote plugins development. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>378724</id>
      <title>Null annotations are extremely hard to use in an existing project</title>
      <description>I was trying to use null annotations in o.e.jdt.ui but it becomes extremely hard very quickly. Actually I should say it is impossible to use them today. (Or am I missing something?) 1. I started off by adding @NonNull to those places where a parameter or a return value is specified to be non-null either via a javadoc or an assert statement. However, there were too many such places, and I thought that this was not the right approach. 2. Next I thought maybe I should just specify @NonNullByDefault on all the packages and then add @Nullable where ever needed. However, there are too many packages and none of them have package-info.java. I certainly do not want to have to do all this manually. - Need a cleanup to create package-info.java in all packages where missing and specify the default. - Need a quick assist/clean-up to replace statements like Assert.isNotNull(obj) with @NonNull on obj. - Maybe we can also have quick assists/clean-up for adding appropriate annotations based on javadoc. e.g. if the javadoc for a parameter includes 'not null' we can propose to add @NonNull to the parameter. Just a thought... Also, I am still not sure what is the right approach - 1 or 2. Is one approach better than other? Or it really depends on case to case? If one is better than other we should try to convey that to the user through documentation, or through adding quick fixes/assists and clean-ups for that approach.</description>
      <attachments/>
    </issue>
    <issue>
      <id>379083</id>
      <title>Enhancement Request: Contribution of TapiJI Resource Bundle editor enhancements</title>
      <description>Build Identifier: tbd Reproducible: Always Steps to Reproduce: n/A</description>
      <attachments/>
    </issue>
    <issue>
      <id>379084</id>
      <title>Enhancement Request: Contribution of TapiJI Core Tools</title>
      <description>Build Identifier: tbd Reproducible: Always Steps to Reproduce: n/A</description>
      <attachments/>
    </issue>
    <issue>
      <id>379102</id>
      <title>Prevent running Eclipse as root (optionally)</title>
      <description>When you try to run f.e. Chrome as root, it will yield an error that Chrome is not supposed to be run as an administrator. I'd like to see the same functionality for Eclipse. In shared scenario, with dropins folder being managed by an external installer, it is quite easy to destroy your installation by running Eclipse as a root, because all plugins are written to the master configuration. If the dropins are changed, the administrator must remember to run reconciler as root. Also, running Eclipse as root cannot be reverted. A parameter, which could be passed to launcher in master eclipse.ini, like -preventMasterEclipseLaunch is really welcome.</description>
      <attachments/>
    </issue>
    <issue>
      <id>379169</id>
      <title>Would like to log Rx/Tx threads from GDBControl</title>
      <description>Build Identifier: M20120208-0800 I would like the ability to record to file or log the Rx and Tx streams that pass through GDB in the GDB control class. This gives us the ability to record GDB traces automatically. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>379178</id>
      <title>[xbase] Compound Assignment Operators</title>
      <description>Currently there is no += operator defined in IntegerExtensions, so in order to increment an integer value, one is forced to write: value = value + 1 instead of the more compact: value += 1</description>
      <attachments/>
    </issue>
    <issue>
      <id>379397</id>
      <title>Connection pooling does not work for connections created via Gemini JPA</title>
      <description>Build Identifier: 2.4.0.v20120327-r11047 When EclipseLink JPA is used in an OSGi container together with Eclipse Gemini JPA, EclipseLink will always use org.eclipse.persistence.sessions.server.ExternalConnectionPool, thus disabling any form of pooling. If a database driver is registered via DBAccess, Eclipse Gemini JPA will create a wrapper java.sql.DataSource (org.eclipse.gemini.jpa.PlainDriverDataSource) Later, when EclipseLink JPA configures the session in class org.eclipse.persistence.internal.jpa.EntityManagerSetupImpl, in method void updateLogins(Map m), at lines 1744-1754, the system will check whether the login object is instance of JNDILogin, and it will then decide to disable pooling at line 1754, login.setUsesExternalConnectionPooling(true). Reproducible: Always Steps to Reproduce: 1. Create an OSGi application using EclipseLinkJPA and Gemini-JPA 2. Configure the EclipseLink internal pool as explained in the EclipseLink documentation 3. Start the application No pooling will be used, a new connection will be created for every database operation.</description>
      <attachments/>
    </issue>
    <issue>
      <id>379413</id>
      <title>[breakpoints] Allow the user to set a default trigger scope</title>
      <description>The user should be allowed to set a default trigger scope for newly created breakpoints. This feature should be implemented in such a way that the user specifies a general setting for breakpoint trigger scoping, and all newly created breakpoints inherit this setting.</description>
      <attachments/>
    </issue>
    <issue>
      <id>379619</id>
      <title>clicking Validate Settings should temporarily disable Validate on Finish</title>
      <description>* edit the properties of a task repository * click validate * click finish * the repository is unnecessarily validated again This is pretty annoying as it gets me every time. If I manually validate, then there is no need to do it again when I click finish unless I have changed something. I think the Validate on Finish checkbox should be greyed out after a successful validation, and treated as unchecked, until the user makes a change to something other than the label.</description>
      <attachments/>
    </issue>
    <issue>
      <id>379733</id>
      <title>Simplify update site so that it only displays tooling choices</title>
      <description>Several users have been confused by the additional categories appearing in update site, some of which aren't intended for the Eclipse IDE and can really disrupt it when installed. We should try for a simplified composite site that provides bundle dependencies but doesn't list other features.</description>
      <attachments/>
    </issue>
    <issue>
      <id>379765</id>
      <title>Improve bundle/plan support under Virgo Tooling</title>
      <description>Build Identifier: Version: Indigo Service Release 2 Build id: 20120216-1857 I'm using Virgo 3.5.0M4 with tooling. I've created: 1) An Eclipse project with the OSGi Bundle Project Nature 2) An Eclipse project with the OSGi Plan Project Nature (the plan references the above mentioned bundle) When I deploy the plan I get an error stating Cannot find bundle 'com.acme.mybundle' version range '[1.0.0, oo)' in repository 'ext-usr' Installation of plan 'acme' version '1.0.0' failed. org.eclipse.virgo.kernel.deployer.core.DeploymentException: Deployment of plan 'acme' version '1.0.0' in scope 'null' failed: bundle 'com.acme.mybundle' in version range '[1.0.0, oo)' not found I see in my Virgo home directory there is a "stage" sub-directory. Under that is a directory containing the exploded bundle and this includes the correct MANIFEST.MF. Reproducible: Always Steps to Reproduce: I have a zip of two Eclipse projects showing this behavior. 1) In Zexample-bundle, run "mvn clean install". This will build the code, including the MANIFEST.MF using the maven-bundle-plugin 2) Import both projects into Eclipse 3) In the Virgo tooling perspective, you should be able to see the bundle and the plan (which references the bundle) listed when you "add and remove" resources to a Virgo runtime 4) Add the plan 5) Start the server [2012-05-16 16:03:42.060] TCP Connection(8)-127.0.0.1 &lt;DE0000I&gt; Installing plan 'acme' version '1.0.0'. [2012-05-16 16:03:42.064] TCP Connection(8)-127.0.0.1 &lt;DE0700E&gt; Cannot find bundle 'com.acme.mybundle' version range '[1.0.0, oo)' in repository 'ext-usr'. [2012-05-16 16:03:42.074] TCP Connection(8)-127.0.0.1 &lt;DE0002E&gt; Installation of plan 'acme' version '1.0.0' failed. org.eclipse.virgo.kernel.deployer.core.DeploymentException: Deployment of plan 'acme' version '1.0.0' in scope 'null' failed: bundle 'com.acme.mybundle' in version range '[1.0.0, oo)' not found at org.eclipse.virgo.kernel.deployer.core.internal.PlanResolver.operate(PlanResolver.java:116) at org.eclipse.virgo.kernel.deployer.core.internal.PlanResolver.access$0(PlanResolver.java:92) at org.eclipse.virgo.kernel.deployer.core.internal.PlanResolver$1.visit(PlanResolver.java:86) at org.eclipse.virgo.util.common.ThreadSafeGraphNode.visitInternal(ThreadSafeGraphNode.java:193) at org.eclipse.virgo.util.common.ThreadSafeGraphNode.visit(ThreadSafeGraphNode.java:184) at org.eclipse.virgo.kernel.deployer.core.internal.PlanResolver.transform(PlanResolver.java:82) at org.eclipse.virgo.kernel.install.pipeline.stage.transform.internal.TransformationStage.doProcessGraph(TransformationStage.java:54) at org.eclipse.virgo.kernel.install.pipeline.stage.AbstractPipelineStage.process(AbstractPipelineStage.java:41) at org.eclipse.virgo.kernel.install.pipeline.internal.StandardPipeline.doProcessGraph(StandardPipeline.java:62) at org.eclipse.virgo.kernel.install.pipeline.internal.CompensatingPipeline.doProcessGraph(CompensatingPipeline.java:73) at org.eclipse.virgo.kernel.install.pipeline.stage.AbstractPipelineStage.process(AbstractPipelineStage.java:41) at org.eclipse.virgo.kernel.install.pipeline.internal.StandardPipeline.doProcessGraph(StandardPipeline.java:62) at org.eclipse.virgo.kernel.install.pipeline.stage.AbstractPipelineStage.process(AbstractPipelineStage.java:41) at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.driveInstallPipeline(PipelinedApplicationDeployer.java:360) at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.doInstall(PipelinedApplicationDeployer.java:184) at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.install(PipelinedApplicationDeployer.java:139) at org.eclipse.virgo.kernel.deployer.core.internal.PipelinedApplicationDeployer.deploy(PipelinedApplicationDeployer.java:252) at org.eclipse.virgo.kernel.deployer.management.StandardDeployer.deploy(StandardDeployer.java:52) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at com.sun.jmx.mbeanserver.ConvertingMethod.invokeWithOpenReturn(ConvertingMethod.java:167) at com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2(MXBeanIntrospector.java:96) at com.sun.jmx.mbeanserver.MXBeanIntrospector.invokeM2(MXBeanIntrospector.java:33) at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:208) at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:120) at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:262) at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836) at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761) at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1427) at javax.management.remote.rmi.RMIConnectionImpl.access$200(RMIConnectionImpl.java:72) at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1265) at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1360) at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:788) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:303) at sun.rmi.transport.Transport$1.run(Transport.java:159) at java.security.AccessController.doPrivileged(Native Method) at sun.rmi.transport.Transport.serviceCall(Transport.java:155) at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790) at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:680) Caused by: org.eclipse.virgo.kernel.deployer.core.DeploymentException: bundle 'com.acme.mybundle' in version range '[1.0.0, oo)' not found at org.eclipse.virgo.kernel.deployer.core.internal.PlanResolver.obtainInstallArtifactGraph(PlanResolver.java:165) at org.eclipse.virgo.kernel.deployer.core.internal.PlanResolver.operate(PlanResolver.java:101) ... 48 common frames omitted [2012-05-16 16:03:42.081] TCP Connection(8)-127.0.0.1 &lt;DE0003E&gt; Install failed for plan 'acme' version '1.0.0'.</description>
      <attachments/>
    </issue>
    <issue>
      <id>380106</id>
      <title>[1.8] Infrastructure support to enable Java 8 work</title>
      <description>1. A suitable branch needs to be created to host the work on Java8. 2. Any disclaimer requirements in the form of README, license terms, copy right messages etc need to be understood and documented here so committers working on this effort can follow the norms. 3. We need to enable Java 8 work by creating suitable constants in ClassFileConstants so source level, compliance level, code generation target level etc could be set to the new level. 4. Options/Preference processing code should be augmented to allow, source, target and compliance could be set to the new level. 5. Junit infrastructure should be changed to allows a 1.8 pass. 6. Suitable JRE need to be identified and recommended for the use of the committers. 7. Tests need to be run the at the new level with a suitable JRE and failures if any need to be triaged and attended to.</description>
      <attachments/>
    </issue>
    <issue>
      <id>380120</id>
      <title>Allow multiple target files as input of target-platform-configuration plugin</title>
      <description>Eclipse projects are modular. Modules have interdependencies. Let's say we have a Module B that depends only on module A. So it is immediate to think in that case "depdendency set for Module B = (dependency set for Module A) + (Module A)", and so on for all other modules where we can define their dependencies as extensions relative to other modules dependencies. This should also apply to target platforms. And this means that the .target file needs a way to reference another .target file. This reference would actually be an inclusion, so that once resolved, we have content of TP-B that is content of TP-A + add-ons. In our big teams/projects, Target Platforms are managed artifacts that we provide as a kind of API for those who need to consume and extend them. But currently, the dependency goes in the wrong way: the provider of the TP have to think about all consumers. And consumers become intrusive. Providing this ability would make things go into one direction, and would provide more modularity.</description>
      <attachments/>
    </issue>
    <issue>
      <id>380171</id>
      <title>Support running tests in separate VMs in tycho-surefire-plugin</title>
      <description>maven-surefire plugin has an option called forkMode (http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html#forkMode) which allow to control how the tests should be run. As far as I can tell this option is not supported on tycho-surefire-plugin. It would be a great addition :)</description>
      <attachments/>
    </issue>
    <issue>
      <id>380189</id>
      <title>Add new Mobile Project Templates to EDT</title>
      <description>Build Identifier: EDT 0.81 We'll add the support for Dojo mobile widget in 0.81, the project creation wizard should be updated. BTW, please hold the code before team is OK for the overall mobile widget design. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>380190</id>
      <title>[1.8] Add support for Java SE 8</title>
      <description>This is the top level bug to track Java 8 implementation effort in JDT/Core. At the moment the JDT team has been invited to listen in and so is privy to discussions on two topics: JSR308: Type annotations tracked via bug# 287648 and JSR335: Lambda Expressions tracked via bug# 380188</description>
      <attachments/>
    </issue>
    <issue>
      <id>380194</id>
      <title>[1.8][compiler][lambda] Change ECJ grammar to support JSR 335</title>
      <description>The grammar changes to support JSR 335 come under three heads relative to the JLS7 grammar. (1) Lambda expressions: ----------------------- PrimaryNoNewArray: LambdaExpression LambdaExpression: LambdaParameters '-&gt;' LambdaBody LambdaParameters: Identifier '(' FormalParameterListopt ')' '(' InferredFormalParameterList ')' InferredFormalParameterList: Identifier InferredFormalParameterList ',' Identifier LambdaBody: Expression Block (2) Method and constructor reference expressions: ------------------------------------------------ PrimaryNoNewArray: MethodReference ConstructorReference MethodReference: ExpressionName '::' NonWildTypeArgumentsopt Identifier Primary '::' NonWildTypeArgumentsopt Identifier ReferenceType '::' NonWildTypeArgumentsopt Identifier ConstructorReference: ClassType '::' NonWildTypeArgumentsopt 'new' (3) Default methods aka Virtual extension methods aka Defender methods (a) Change JLS7 production InterfaceMemberDeclaration: AbstractMethodDeclaration ';' into InterfaceMemberDeclaration: InterfaceMethodDeclaration';' where (b) InterfaceMethodDeclaration: InterfaceMethodModifiersopt TypeParametersopt Result MethodDeclarator Throwsopt InterfaceMethodBody InterfaceMethodModifiers: InterfaceMethodModifier InterfaceMethodModifiers InterfaceMethodModifier InterfaceMethodModifier: Annotation 'public' 'abstract' 'strictfp' 'synchronized' InterfaceMethodBody: 'default' Block';' (c) Change JLS7 production MethodInvocation: ClassName '.' 'super' '.' NonWildTypeArgumentsopt Identifier '(' ArgumentListopt ')' into MethodInvocation: TypeName '.' 'super' '.' NonWildTypeArgumentsopt Identifier '(' ArgumentListopt ')' (d) Change JLS7 production AnnotationTypeElementDeclaration: AbstractMethodModifiersopt Type Identifier '(' ')' Dimsopt DefaultValueopt ';' into AnnotationTypeElementDeclaration: InterfaceMethodModifiersopt Type Identifier '(' ')' Dimsopt DefaultValueopt ';' I'll shortly post the massage version that uses jikespg notation as well as altered grammar symbols as we use in ECJ grammar so it could be copy + pasted and experimented with.</description>
      <attachments/>
    </issue>
    <issue>
      <id>380314</id>
      <title>Recursive merge strategy feature</title>
      <description>Build Identifier: Eclipse Java EE IDE for Web Developers. Version: Indigo Service Release 1 Build id: 20110916-0149 JGit should have the ability to merge two commits when multiple merge bases exist, just as CGit. The JGit java architecture provides for addition merge strategies, so adding a new ThreeWayMerger subclass of ResolveMerger called RecursiveMerge, and an accompanying StrategyRecursive should be sufficient. The approximately 1300 lines of CGit code that implement the recursive algorithm should boil down to much less java code as much of the CGit code is preoccupied with extracting hashes, while much of the JGit code already has developed these utilities, leaving the algorithms missing. Reproducible: Always Steps to Reproduce: 1.Multiple merge base 2.jgit merge --strategy=resolve 3.fails: jgit merge --strategy=resolve prod-LCL org.eclipse.jgit.api.errors.JGitInternalException: Exception caught during execution of merge command. java.io.IOException: Multiple merge bases for: 5e406881fb0ccf2325020540bed16977944674a6 adc77966d11a622be35ec4413ad6e056cc4bd9bd found: 020fc5bb8e0faa53f836ade4489a0a78e61b3d7f dd156b6d0ebbaf27cbd66de89d8de7e51376ba38 at org.eclipse.jgit.api.MergeCommand.call(MergeCommand.java:260) at org.eclipse.jgit.pgm.Merge.run(Merge.java:85) at org.eclipse.jgit.pgm.TextBuiltin.execute(TextBuiltin.java:148) at org.eclipse.jgit.pgm.Main.execute(Main.java:191) at org.eclipse.jgit.pgm.Main.run(Main.java:120) at org.eclipse.jgit.pgm.Main.main(Main.java:94) Caused by: java.io.IOException: Multiple merge bases for: 5e406881fb0ccf2325020540bed16977944674a6 adc77966d11a622be35ec4413ad6e056cc4bd9bd found: 020fc5bb8e0faa53f836ade4489a0a78e61b3d7f dd156b6d0ebbaf27cbd66de89d8de7e51376ba38 at org.eclipse.jgit.merge.Merger.getBaseCommit(Merger.java:217) at org.eclipse.jgit.merge.Merger.mergeBase(Merger.java:182) at org.eclipse.jgit.merge.ThreeWayMerger.mergeBase(ThreeWayMerger.java:121) at org.eclipse.jgit.merge.ResolveMerger.mergeImpl(ResolveMerger.java:187) at org.eclipse.jgit.merge.Merger.merge(Merger.java:156) at org.eclipse.jgit.merge.ThreeWayMerger.merge(ThreeWayMerger.java:108) at org.eclipse.jgit.api.MergeCommand.call(MergeCommand.java:208) ... 5 more using test repo attached to https://bugs.eclipse.org/bugs/show_bug.cgi?id=353876 tested using jgit version: jgit version 1.3.0-SNAPSHOT f70b24a</description>
      <attachments/>
    </issue>
    <issue>
      <id>380484</id>
      <title>[patch] Add support for parallel threads in the maven run configuration</title>
      <description>There is currently no way to ask maven to use multiple threads when running it from eclipse. This is a useful feature to speed up project building</description>
      <attachments/>
    </issue>
    <issue>
      <id>380597</id>
      <title>Feature reorganization</title>
      <description>Build Identifier: As described by http://www.eclipse.org/forums/index.php/t/354919/ the features of Epsilon should be reconsidered. Basically, development related plugins/tools (editors, wizards, views, etc) should become part of separate features. So Epsilon can be deployed in applications without all these development plugins/tools, so the end users will not be 'bothered' by them. Advantage for the developers is that they could update the development features using nightly builds (or SVN) and use the deployed features (for the application) of the official releases. While reconsidering the features, the 'external dependencies' could be kept in mind as well. So most parts Epsilon stays/becomes usable when, for example, GMF is not available. (See bug #378998 and bug #376293 for related work) Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>381023</id>
      <title>[xbase.lib] improve interoperability of Iterable&lt;Pair&lt;K,V&gt;&gt; and Map&lt;K,V&gt;</title>
      <description>It would would be nice to have extension methods such as: Map&lt;K,V&gt; toMap(Iterable&lt;Pair&lt;K,V&gt;&gt; values) V put(Map&lt;K, V&gt; target, Pair&lt;K, V&gt; item) void putAll(Map&lt;K, V&gt; target, Iterable&lt;Pair&lt;K, V&gt;&gt; item) toMap is interesting to allow constructing maps without falling back to the imperative for() statement: ---- (1..2).map[it + 1 -&gt; it - 1].toMap ---- instead of ---- var result = newHashMap() for(i:1..2) result.put(i + 1, i - 1) result ----</description>
      <attachments/>
    </issue>
    <issue>
      <id>381377</id>
      <title>"eclipse-repository" to support direct inclusions of bundles into category.xml</title>
      <description>CAtegory.xml forces us to create feature even if we want to provide bundles "into the wild", when we just want them to be available in a site, without wishing to provide them in a feature and show them in a category. It would be useful is "eclipse-repository" packaging type would allow to do that through customization of the category.xml file.</description>
      <attachments/>
    </issue>
    <issue>
      <id>381434</id>
      <title>Environment variable support in workspace files</title>
      <description>Build Identifier: 20120216-1857 Hello everybody, My development team wants to start using Eclipse but there seems to be no support for environment variables in workspace configurations. Here is an example to make my question more understandable: - ProjectX stored at D:\Development\Common\Components - Workspace with ProjectX stored at D:\ExampleWorkspace The workspace stores the location of ProjectX in the file .metadata\.plugins\org.eclipse.core.resources\.projects\ProjectX\.location as URI//file:/D:/Development/Common/Components We do not want to deal with absolute paths because the workspace configuration needs to be portable across different machines. Therefore we want to use environment variables (like %DEVELOPMENT% which points to D:\Development). Where can i find the Eclipse source code that implements the "URI parsing" so that i can apply a patch adding support for URIs like: URI//file:/%DEVELOPMENT%/Common/Components Thanks in advance for listening :) Daniel Reproducible: Always Steps to Reproduce: 1.Please see description of bug report</description>
      <attachments/>
    </issue>
    <issue>
      <id>381651</id>
      <title>GSOC 2012 Enhancing Salvo Newsreader Project Milestone 1:Design Protocol independent connectivity interface</title>
      <description>Build Identifier: Version: Indigo Service Release 1 Build id: 20110916-0149 Through my research what I have thought is design a basic interface which has connect disconnect methods where connect method will accept an ID and connect context. Ex: public boolean connect(ID id, ILoginContext context){ //To do logic } Idea is to figure out the protocol using the id which is basically uri. Context will connect other necessary information to connect depending on the protocol. I will implement ID and ILoginContext respectively using ID and IConnectContext interfaces. After the protocol is figured out by using id context can be redirected to relevant data extraction process and connect using context data. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>381896</id>
      <title>Take a screenshot when a test times out</title>
      <description>Created attachment 216953 [details] Fix (untested) When a test times out, it would often be helpful to see the screen before the test is killed. In the vein of bug 342053, here's a fix attempt. Again, this is completely untested, so please try it only after 4.2 is done.</description>
      <attachments/>
    </issue>
    <issue>
      <id>381966</id>
      <title>VE should prompt user to configure safari as its render engine when designing mobile app</title>
      <description>Build Identifier: EGL mobile widgets are mainly targeted to run on webkit kernal based browsers currently. So to stably use them in EDT, an safari based browser is recommended to install on clients development environment and configure as VE's rendering engine. If other browser like Chrome, Firefox, or IE is configured as its rendering engine, it somehow works not very stably and would get various weird errors. Although EGL mobile widgets can be made to determine whether it is running on safari, it might not be proper to display this kind of prompting message to user by EGL mobile widgets, because EGL mobile widgets has no idea whether it is rendering in VE and most EGL mobile widgets is capable of running on other HTML5 based browser like Firefox, IE 9, etc. So it might be better to add a feature to VE that it prompts user to configure safari as rendering engine when doing EGL mobile development to have a better user experience. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>382115</id>
      <title>[discussion] plugin design/structure for the activity tracing project</title>
      <description>From Steffen Pingel: We should discuss the best location for a generic task mapping and potential cache to retain that information. Since we want to leverage the information within Tasks it seems that we need to provide some framework in o.e.m.tasks for tracking task related information such as change sets. I wouldn't want to limit the cache to change sets but we could use that as a driver for the initial version of the API. From Timur Achmetow: In my opinion we have 3 different options: 1. stay the code in o.e.m.tasks.ui (problems with dependencies) 2. move to code to o.e.m.versions (limited to change sets) 3. create new bundles for the activity part (sounds good to me)</description>
      <attachments/>
    </issue>
    <issue>
      <id>382220</id>
      <title>Add keyword 'migration' to Eclipse bugzilla</title>
      <description>We propose to add the keyword 'migration' to Eclipse bugzilla. Background: Keyword 'migration' would close an important gap to find tickets that are migration relevant, e.g. could be applied to all bugs that require an existing consumer project to actively migrate from one Eclipse release to a next one. As an example it would be great to add this keyword to bugs such as this one [1], that contain an explicit documentation how to migrate from one release to another. The proposed keyword 'migration' would complement the keyword 'noteworthy' as it would improve on the options to automatize the generation of meaningful release notes. [1] https://bugs.eclipse.org/bugs/show_bug.cgi?id=361816#c2</description>
      <attachments/>
    </issue>
    <issue>
      <id>382342</id>
      <title>Make Getting Started Documentation more helpful</title>
      <description>The Getting Started documentation takes the user through a rather long procedure to create an ExtendedPO2.uml, which I doubt few readers will read in detail since after a couple of steps the remainder is rather obvious. It would be very helpful to provide an example project so that the impatient or finger-troubled may get an instant reference project that runs standalone and generates a couple of comforting console messages. [Given the number of users encountering difficulties, this is a bug not an enhancement.]</description>
      <attachments/>
    </issue>
    <issue>
      <id>382427</id>
      <title>Mechanism to inject line compare strategies into merge and structure viewers</title>
      <description>Build Identifier: 3.6 A proposed patch to org.eclipse.compare that would allow plugin developers to insert custom line compare strategies into the behavior of the document merge viewers and strucure viewers. This would support contributing toggl-eable actions such as ignore case, ignore leading spaces, ignore following spaces, ignore after column 80, ... The patch includes two new public interfaces: IDocLineExtractStrategy: An optional strategy that can be set as a property in a CompareConfiguration. If it is present, it can be used to customize the contents of a line of text extracted from a node that is used for the purpose of performing a content comparison only. The strategy will be used to override the behavior of detecting line differences in the merge viewers and (in conjunction with IStructureCreator3) structural differences in the structure viewer. IStructureCreator3: adds a new getContents() method that can be used to apply the compare configuration's IDocLineExtractStrategy to the contents extracted from a node for comparison purposes. A new property is added to CompareConfiguration called "APPLY_LINE_EXTRACT_STRATEGY" to which a single IDocLineExtractStrategy can be set. Changes to this property will trigger the diff() to be re-run. Requirements met: By passing in the LEFT/RIGHT/ANCESTOR contributor value into IDocLineExtractStrategy, it is possible to have different behavior for each contributor. Design Decisions: I went with allowing a single strategy per CompareConfiguration instead of allowing multiple extension contributors so that there will not be any issues of multiple contributors providing conflicting behaviors or issues resulting from changes in order of execution. There is no UI component to this change set. Developers may create menu and toolbar contributions to their merge viewers that toggle the behavior of their strategy, similar to the Ignore White Space action. They could have multiple actions which alter the single IDocLineExtractStrategy of the CompareConfiguration, as long as they reset the property to trigger a re-diff(). Work remaining to be done: We could add a default implementation of the IStructureCreator3.getContents() method in StructureCreator I suppose we could support getting toggle actions from the IDocLineExtractStrategy to dislay in the context menu and toolbars, but my thinking is to leave that UI aspects to plugin developers. However, it is possible that multiple plugins could try and alter the IDocLineStrategy of a compareconfiguration. One example, say a file explorer contributes a Compare With action that has its own IDocLineExtractStrategy it always puts in its CompareConfiguration. But a particular viewer for file extension .xyz overrides any existing strategy with its own. If both the project explorer and the viewer manage their action contributions independently, they would need to catch the overriden cases and not display orphaned actions... so maybe getting toggle actions right out of the strategy would be worth the investment. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>382482</id>
      <title>Allow auto-qualified OSGi versions in releases</title>
      <description>OSGi and Maven have different semantics for release versions: - In Maven, releases typically have only three segments, like 1.2.3 (and 1.2.3 &gt; 1.2.3-SNAPSHOT) - In OSGi/p2, releases typically also have a qualifier segment, like 1.2.3.v20120613. The qualifier is needed in order to ensure that the version number is larger than snapshots/milestones of the same release; in OSGi/p2 1.2.3 &lt; 1.2.3.v20120613. Tycho makes it hard to meet both conventions because it enforces that for an 1.2.3 Maven version, the OSGi/p2 version is also 1.2.3. IMHO this should be changed, i.e. Tycho should allow builds that have a 1.2.3 Maven (release) version in the POM and 1.2.3.qualifier versions in MANIFEST/feature.xml/etc.</description>
      <attachments/>
    </issue>
    <issue>
      <id>382524</id>
      <title>Tag Juno Release</title>
      <description>When we ship, we need to create annotated tags for the release. Please wait until we give the go ahead in this bug. The repositories that need to be tagged are listed in http://git.eclipse.org/c/platform/eclipse.platform.releng.maps.git/tree/org.eclipse.releng/tagging/repositories.txt PW</description>
      <attachments/>
    </issue>
    <issue>
      <id>382701</id>
      <title>[1.8][compiler] Implement semantic analysis of Lambda expressions &amp; Reference expressions.</title>
      <description>This ER will serve as the top level umbrella entry to track semantic analysis support for Lambda expressions &amp; Method and constructor references. (https://bugs.eclipse.org/bugs/show_bug.cgi?id=380501 will be used to track support for default methods.) Separate bugs will be spawned for unit tasks in this project and linked to this entry. When resolved, we would be able to reject every semantically illegal program with a suitable/appropriate diagnostic. The further treatment of well defined programs will be the subject matter of ERs that will be created later.</description>
      <attachments/>
    </issue>
    <issue>
      <id>382721</id>
      <title>[1.8][compiler] Effectively final variables needs special treatment</title>
      <description>BETA_JAVA8 (1) The following program which does not compile under 1.7- should now begin to compile with Java 8: // -------- 8&lt; ----------- public class X { public static void main(String[] args) { X x = new X() { void foo() { System.out.println(args); } }; } } The proposed amends to 8.1.3 allow for a local class including anonymous classes to use effectively final variables from its surrounding context. (2) Likewise, we need to also allow lambda expressions to reference effectively final, definitely assigned local variables, formal parameters or exception handler parameter from the surrounding context (in addition to finals)</description>
      <attachments/>
    </issue>
    <issue>
      <id>382882</id>
      <title>Patch to add support for remote perf</title>
      <description>Build Identifier: Implementation using LinuxTools profiling package to add support for remote perf. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>382922</id>
      <title>Update EGL Data wizard in the RUI Editor for new types added in 0.8.1</title>
      <description>Build Identifier: As the new types (time and limited string) are added in EDT v0.8.1, do we need to update the EGL Data wizard (New Variable and Insert Data) to support the new types? Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>383023</id>
      <title>[activity] extend the TreeViewer for additional build data</title>
      <description>Here can we discuss which "build data" we want to show in the TableViewer. For example: if the build was successfull or not; and how much tests failures exist etc.</description>
      <attachments/>
    </issue>
    <issue>
      <id>383359</id>
      <title>indicate whether each file is modified, deleted, or renamed</title>
      <description>When viewing patch sets, the editor should indicate whether each file is modified, deleted, or renamed. The web UI does this and it's very useful.</description>
      <attachments/>
    </issue>
    <issue>
      <id>383576</id>
      <title>Ability to ignore codan errors on specific lines</title>
      <description>Build Identifier: Juno RC3 20120606-2254 To help deal with the fact that Codan is imperfect, it would be highly useful if there were a way to flag codan errors in specific lines of code to be ignored. This could work in one of two ways: 1) Through the use of special comment tags ie, you could put functionWhichRaisesACodanError(arg1, arg2) // [CODAN_IGNORE] 2) Through gui integration Ie, you could right click on a codan error (either on the icon in the column to the left of the code, or in the "Problems" window), and tell it to ignore that error. There would then need to be some way to tell Codan to stop ignoring that error, as well - perhaps the icon for the error would still be there, but "ghosted", and you could right click again to show... or there would be a filter - that would be on by default, but could be toggled off - that would show / hide ignored codan errors Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>383608</id>
      <title>[1.8][compiler] Test failures need to be investigated</title>
      <description>BETA_JAVA8: Commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=9cee1a1ab489dcab686c4840c5cbf41450bb5e75 has disabled the lists of tests below on a temporary basis. These failures need to be investigated. At a first glance, all looks well - the "failures" are due to syntax error recovery taking a different repair path. This was always grammar sensitive and the recent changes due to JSR308 have been extensive. In most of the scenarios, we are likely to simply remaster the test, i.e after validating that the new diagnostics are correct, simply make the new actual output the expected output. Here is one example of a failure: The test expects "ERROR in test\X.java (at line 33)\n public String foo(java.util.Vector ) {\n ^^^^^^\n Syntax error on token "Vector", VariableDeclaratorId expected after this token" as the diagnostic, while the actual message is: ERROR in test\X.java (at line 33)\n public String foo(java.util.Vector ) {\n ^^^^^^\n Syntax error, insert "VariableDeclaratorId" to complete FormalParameterList // ---------------------- NegativeTypeAnnotationTest._test031() NegativeTypeAnnotationTest._test032() NegativeTypeAnnotationTest._test033() NegativeTest._test126() NegativeTest._test045() JavadocTestMixed._test033() GenericTypeTest._test0068() GenericTypeTest._test0083() GenericTypeTest._test1097() GenericTypeTest._test1403() GenericTypeTest._test0080() GenericTypeTest._test0932() AnnotationTest._testBug366003b() AnnotationTest._testBug366003c() AnnotationTest._testBug366003d() AnnotationTest._testBug366003() LambdaExpressionsNegativeTest._test004() LambdaExpressionsNegativeTest._test006() DietRecoveryTest._test77() DietRecoveryTest._test99() DietRecoveryTest._test75() DietRecoveryTest._test32() DietRecoveryTest._test124() SyntaxErrorTest._test03() SyntaxErrorTest._test06() ParserTest._test003() ParserTest._test006() ParserTest._test011() ComplianceDiagnoseTest._test0029() ComplianceDiagnoseTest._test0041() ComplianceDiagnoseTest._test0040() ComplianceDiagnoseTest._test0032() ComplianceDiagnoseTest._test0038() ASTConverterTestAST3_2._test0642() ASTConverterTestAST3_2._test0652() ASTConverterTestAST3_2._test0658() ASTConverterRecoveryTest._test0014() ASTConverterTestAST4_2._test0642() ASTConverterTestAST4_2._test0652() ASTConverterTestAST4_2._test0658() Work on this should be started only after bug 383600, bug 383596 and bug 381121 are closed since these require grammar changes and could cause further ripples.</description>
      <attachments/>
    </issue>
    <issue>
      <id>383624</id>
      <title>[1.8][compiler] Revive code generation support for type annotations (from Olivier's work)</title>
      <description>Created attachment 217920 [details] Original implementation of code generation from 2010. BETA_JAVA8: In order to make it more manageable by breaking it into chunks, the commit in http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=831d96bc5763622ed503192c35bfd6688abedd96, did not include the files that implement code generation support for JSR308. After code review, spec review and testing is over for what has already been released (grammar + parser changes, AST construction, symbol/type resolution ...), we should release the rest of the changes that deal with code generation. I'll post a patch that consists of the pending changes.</description>
      <attachments/>
    </issue>
    <issue>
      <id>383907</id>
      <title>change minimum required JRE to 1.6</title>
      <description>Most of Mylyn components are designed to run using JRE 1.5 or later, however there are few limitations starting to show up e.g. The Mylyn Gerrit connector runs on 1.6 and later, and R4E faces some limitations with an Orbit bundle [1]. Since J2SE reached end of life in 2008, These task is created to capture this discussion See initial input at: http://dev.eclipse.org/mhonarc/lists/mylyn-dev/msg01688.html</description>
      <attachments/>
    </issue>
    <issue>
      <id>383908</id>
      <title>[1.8][compiler] Explicit this parameter interferes with method overloading/resolution.</title>
      <description>BETA_JAVA8: Post support for explicit this parameter as a holder for receiver annotations, we now accept this program which we should not: // ------ public class X { void foo(X this) { } void foo() { } } The other side of the coin is that the following should compile, but doesn't anymore: // -------- public class X { void foo(X this) { } public static void main(String[] args) { new X().foo(); } }</description>
      <attachments/>
    </issue>
    <issue>
      <id>383913</id>
      <title>[1.8][compiler] Compiler should reject explicit this parameter in disallowed contexts</title>
      <description>BETA_JAVA8: Top of branch contains syntactic support for explicit this parameter to facilitate attaching receiver annotations. The compiler must perform several validations here. - Only at 1.8 explicit this should be allowed (done) - Only as a first parameter (done) Here is the relevant part of the spec: Only the first formal parameter may be named this, and such a parameter is only permitted on an instance method, or on a static method or constructor of an inner class. The type of the this parameter must be the same as the class that contains the method and should include type arguments if that class has any. In a method in an inner type, the receiver type can be written as (for example) either Inner or as Outer.Inner, and in the latter case annotations on both parts are possible, as in @ReadOnly Outer . @Mutable Inner. [I believe the "on the static method of an inner class" part is wrong - clarifications have been sought from the EG]</description>
      <attachments/>
    </issue>
    <issue>
      <id>383924</id>
      <title>Flexible diagram node shapes</title>
      <description>Up to Sapphire 0.5, Sapphire Diagram Framework is limited to support node shapes that are composed of one label, one image and a few image decorators. This enhancement proposes to extend the diagram framework to support more complex node shapes that have "containment" relationship. In a typical SQL Schema diagram editor, a table node has a rectangle as the container shape. It has a header label that displays the table name and a vertical list of table columns. Depends on the column type, each column may have a few image decorators to describe whether it's a primary key column, whether it can be null etc. The connections in the SQL Schema editor usually describe foreign key relationships between tables. I'll attach a screen shot of JDeveloper's SQL Schema editor. We need to extend Sapphire Diagram's node definition language to support this type of diagram editors.</description>
      <attachments/>
    </issue>
    <issue>
      <id>384065</id>
      <title>Enhancement: Source lookup for dynamically loaded code - Avoiding "Source not found" when debugging Maven dependencies</title>
      <description>Created attachment 218175 [details] Source code found in Package Explorer and break point set. When debugging and stepping into code of a dependency project (fetched by Maven, including source code), then in Eclipse editor source code is not found. Instead message "Source not found." and a button "Edit Source Lookup Path..." is shown. Trying different options on "Edit Source Lookup Path..." button didn't help. Please note that I'm able to see dependency source code in editor when navigating through Package Explorer -&gt; &lt;project name&gt; -&gt; Maven Dependencies -&gt; &lt;some jar&gt; -&gt; &lt;some package&gt; -&gt; &lt;some class&gt; This works, it is just that debugger is unable to reach this code for some reason. To be more precise, when breakpoint is set, then debugger stops execution at right point, but is unable to show source code. Stepping through such code is impossible. I use Eclipse Juno (4.2) on Win 7 and Mac, but this nasty behavior existed in Eclipse 3.6 and earlier. There are similar bugs noted on bugzilla, but none like this. The most similar to this issue is this long standing open bug: https://issues.sonatype.org/browse/MNGECLIPSE-983 Sasa</description>
      <attachments/>
    </issue>
    <issue>
      <id>384290</id>
      <title>The DojoMobileProgress widget is not displayed</title>
      <description>package client; import dojo.mobile.widgets.*; import org.eclipse.edt.rui.widgets.*; handler MyOtherHandler type RUIhandler{initialUI =[ui], onConstructionFunction = start, cssFile = "css/EGLMobileCASProject.css", title = "MyOtherHandler"} ui DojoMobileView{selected = true, id="myView", headerTitle = "View", children = [ progress ]}; progress DojoMobileProgress{updateInterval = 1000}; function start() end end Also, a time interval used elsewhere in the product (for service access, I believe) is valued in seconds. The progress widget is set in milliseconds. Might be best to make the usage consistent; but maybe the two uses are too different. Thoughts?</description>
      <attachments/>
    </issue>
    <issue>
      <id>384460</id>
      <title>Provide Breakpoint Serialization/Deserialization API</title>
      <description>I'm searching for an API to serialize/deserialize breakpoints to a generic format in order to attach them to Mylyn context. There is related code in ImportBreakpointsAction/ExportBreakpointsAction which fits to this need (i.e. serializes breakpoints to a xml file / deserializes them). Unfortunately, I can't find a way to do "just" a deserialization (i.e. XML to IBreakpoint conversion) - without directly importing the found breakpoints to BreakpointManager, checking for valid markers, ... Is there a more suitable API to achieve this? Otherwise, would it be a reasonable approach to provide a patch for moving code from Import/Export-Actions to a new API?</description>
      <attachments/>
    </issue>
    <issue>
      <id>384646</id>
      <title>[ui] 'type filter text' box searches as the user types each letter and hangs</title>
      <description>Build Identifier: 20110615-0604 Eclipse doesn't crash or anything, but if you have 'All Available Sites' selected in the 'Work with' dropdown it's very annoying. If you type a few letters and want to go back and correct a typo you have to wait at least 5 seconds until it searches everything with your incorrect search text. I would rather have a 'Search' button to press when I'm done. Reproducible: Always Steps to Reproduce: 1.Select 'Install new software...' from the Help menu. 2. Select 'All Available Sites' in the 'Work with' dropdown. Make sure you have plenty of sites. 3. Type a few characters, then try to hit backspace.</description>
      <attachments/>
    </issue>
    <issue>
      <id>384667</id>
      <title>[1.8][compiler] better source positions for lambda expressions</title>
      <description>Is it OK to always just use one pair of sourceStart/sourceEnd? If a lambda has a - possibly large - block as its body, signaling an error against the lambda might be nicer when just highlighting the "header" not the entire construct, don't you think? What about a scheme that is a bit closer to how we handle method declarations?</description>
      <attachments/>
    </issue>
    <issue>
      <id>385003</id>
      <title>[Themes] Provide a set of icons with alpha transparency for dark themes - Platform icons</title>
      <description>Build Identifier: A set of icons with alpha transparency is needed to support high quality dark themes. The actual set does not fit this need. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>385137</id>
      <title>[1.8][compiler] Type annotations must not be allowed on static member access.</title>
      <description>BETA_JAVA8: JSR308: section 2.1.1 states: Static member accesses are preceded by a type name, but that type name may not be annotated: @Illegal Outer . StaticNestedClass // illegal! @Illegal Outer . staticField // illegal! It further states: A static member access may itself be a type use, in which case the used type may be annotated by annotating the last component of the static member access, which is the simple name of the type being used. Outer . @Legal StaticNestedClass x = ...; // legal Note however that support for annotations on nested type names is still in the works (bug 383596) At the moment, the following program triggers two errors: // -------------------------------------------- import java.lang.annotation.Target; public class X { static class Y {}; public static void main(String[] args) { Object o = (@Marker X.Y) null; } } @Target(TYPE_USE) @interface Marker { } //---------------------------------------------- (1) The annotation @Marker is disallowed for this location (2) TYPE_USE cannot be resolved to a variable The latter is due to the absence of a JRE that supports TYPE_USE. But once a good JRE becomes available, (1) would go away too and the program would start compiling while it should not.</description>
      <attachments/>
    </issue>
    <issue>
      <id>385343</id>
      <title>Bundlor Gradle plugin (based on ant task wrapper using original SpringSource implementation)</title>
      <description>I've taken a liberty of porting the original implementation of SpringSource bundlor plugin for Gradle build system - https://github.com/SpringSource/gradle-plugins/tree/master/bundlor-plugin to use Eclipse Virgo version of bundlor (1.1.1 as of this writing) and looking to see what would be the best way to contribute it.</description>
      <attachments/>
    </issue>
    <issue>
      <id>385440</id>
      <title>[null] feedback on null annotations as supported in Juno</title>
      <description>I'm opening this bug as a channel to collect and answer feedback regarding the annotation-based null analysis as released in JDT 3.8 (Juno) via bug 186342 and friends. Please note, that bug 383371 exists for a similar purpose, but for the early access version described in http://wiki.eclipse.org/JDT_Core/Null_Analysis/Beta.</description>
      <attachments/>
    </issue>
    <issue>
      <id>385642</id>
      <title>Javadoc View should show method after code completion</title>
      <description>Build Identifier: Build id: 20110916-0149 When you use code completion for a method, and are filling in the arguments for that method, javadoc view should be displaying the javadoc for the method you are working on. More Details here: http://www.youtube.com/watch?v=gWKfFLLGbTQ Also it would be nice if the javadoc for a type listed the methods/fields that type had. note: we need this for our teaching kids java program, and I would be happy to pair program to fix it. Reproducible: Always Steps to Reproduce: 1.type String.copyValueOf 2. look at the javadoc view 3. notice the documentation is only for the string type</description>
      <attachments/>
    </issue>
    <issue>
      <id>385703</id>
      <title>Revise Execution Environment handling (JavaSE-1.7, custom profiles, ...)</title>
      <description>While the execution environment support added in 0.14.0 [1] were a major improvement in Tycho, there are still some cases (especially in p2-related scenarios) that don't work correctly in Tycho yet. This bug is meant as an umbrella to collect all use cases, and the required changes to support them. We need to deal with the following entities: (b6) bundle with dependency to package from JavaSE-1.6 profile (b5) bundle with dependency to package not available in J2SE-1.5 (but in JavaSE1.6) (b7) bundle with dependency to package only available in JavaSE-1.7 (bc) bundle with dependency to package only available in custom profile (p6) product with dependency to a.jre.javase 6 (-&gt; these are most products) (p5) product with dependency to a standard profile which is a subset of JavaSE-1.6 (p7) product with dependency to the JavaSE-1.7 profile (pc) product with dependency to a custom profile The following actions shall be possible with each of these entities: 1. build 2. require (from the reactor or via external target platform) 3. include in a product installation 4. include in a p2 repository 5. install from a p2 repository (with a p2 client) [1] http://wiki.eclipse.org/Tycho/Release_Notes/0.14</description>
      <attachments/>
    </issue>
    <issue>
      <id>385795</id>
      <title>[TabbedProperties] Need support for changing color of a tab-label and displaying dynamic images on a tab in Tabbed Properties View</title>
      <description>Build Identifier: Latest release / Juno The Eclipse Tabbed Properties Framework does not support tab-decorations i.e. dynamic images on tabs or dynamically changing color of a tab label. Tab labels are always displayed in black-color. An image can be added to a tab using propertyTabs extension in plugin.xml; the image is displayed when the tab is in selected state otherwise it is not displayed. But the image is not dynamic enough because one cannot programatically control whether an image should be displayed or not. This fix can be used to improve usability of tabbed properties UI because tab-decorations can be used to convey, at a glance, information about current state of UI on a tab. The fix should make a provision for possibly setting different number of images for different tabs. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>385930</id>
      <title>Support for custom EE profiles which add versions of existing JDK packages</title>
      <description>Depending on the execution environment (J2SE-1.5, JavaSE-1.6, etc.), Equinox defines the list of packages exported by the system bundle. Since Java doesn't define package versions, it is unclear in which versions these packages shall be exported. Equinox has chosen a defensive approach and exports the packages in version 0.0.0. However there are also exporters of packages which nowadays are part of the JRE, which export these packages in versions greater than zero (e.g. wrappers in the Springsource EBR). Therefore, OSGi servers may want to define other versions for the system packages as the Equinox default. Tycho should support this use case. It should allow configuring the system package version (e.g. via Equinox .profile files) so that versioned JRE package imports may be wired against the system bundle at class path computation and test execution, and that bundles with versioned JRE package imports can be installed (without unneeded wrapper bundles).</description>
      <attachments/>
    </issue>
    <issue>
      <id>386114</id>
      <title>Avoid duplication of id and version in pom.xml and MANIFEST</title>
      <description>AFAIK the artifactId for an Eclipse plug-in needs to match the Bundle-Symbolic-Name of the plug-in. Would it be possible to add to Tycho to use the Bundle-Symbolic-Name by default as artifactId? Igor Fedorenko suggested on the Tycho mailing list to extend that even to artifactId+version.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386117</id>
      <title>[api] tasks.core relevant extensions should not be declared in tasks.ui</title>
      <description>Build Identifier: A Mylyn connectors AbstractRepositoryConnector extension is made available by the connectorCore extension point, which is defined in the tasks.core.ui bundle. In case somebody wants to write an alternative UI based on mylyn.tasks.core and someconnector.core, it still is necessary to depend on mylyn.tasks.ui (and typically also someconnector.ui). It would be great if (a) the extension point dedicated to &lt;code&gt;AbstractRepositoryConnector&lt;/code&gt;, would be defined (also) in the tasks.core bundle. Reproducible: Always</description>
      <attachments/>
    </issue>
    <issue>
      <id>386197</id>
      <title>add view to browse for plug-in images</title>
      <description>Created attachment 219303 [details] PLug-in projects I developed a small plug-in that allows to browse for existing icons within an eclipse installation. For detected images this plugin provides easy access to eiter extract the platform URI (like platform:/plugin/org.eclipse.pde.ds.ui/icons/obj16/ds_wizard_obj.gif) or the image itself. Might come in handy for PDE tooling to allow better reuse of images. Find more info in the associated blog entry: http://codeandme.blogspot.co.at/2012/07/reusing-platform-images.html or just check out the code for yourself.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386344</id>
      <title>put files required for managing Trac, Bugzilla, Hudson, Jenkins and Gerrit instances under version control</title>
      <description>We have a number of scripts and configuration files that we use to provision and manage test server instances. These should be under version control in Git along with the the sources.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386358</id>
      <title>[content assist] Don't activate plug-in if enablement expression is specified and not met</title>
      <description>Created attachment 219409 [details] patch against R3_8_maintenance This is an issue semi-related to bug 345213 which my teammate entered and supplied a patch for. We have a Java completion proposal computer that has "activate == true". Its proposal category uses the enablementElement defined in bug 345213 and only enables when the project has a JPA facet. So in a normal Java project without a JPA facet, the user will not see the JPA category, but the ContentAssistProcessor still calls sessionStarted on categories that are not enabled. This has caused bug 386171 where the JPA bundles get activated even when a user is not using the JPA facet on any of their projects. We could work around the issue by changing our Java completion proposal computers to "activate == false". But then of course if the user *has* a JPA faceted project, they won't get our JPA completion proposals until they force our plug-ins to load another way. I have attached a patch with a possible fix. It uses the calculated list of enabled proposal categories and only calls sessionStarted on those proposal categories. I am unsure of the ramifications of not calling sessionStarted on all the completion proposal computers, but it seems reasonable to me that this should only be called for proposal computers that are part of an enabled category.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386435</id>
      <title>Support automatic injection of OSGi services</title>
      <description>Migrated from https://issues.sonatype.org/browse/SISU-9 Currently you can inject OSGi services into JSR330 applications by registering the appropriate peaberry bindings in a custom Guice binding module. We should try to make this more automatic by including results from the OSGi service registry (if available) when looking up bean implementations via the BeanLocator.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386453</id>
      <title>[JUnit] JUnit view shows tests run in execution order, but that's not quite so useful for me (JDK7)</title>
      <description>Due to http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=7023180, tests aren't run in the order specified in source. I'm only partly interested in that problem being addressed -- I get it. But, as a developer who is relying on coding in a certain order, and expecting to review the results of those tests in the same order, I'd like to view the results in an order I expect. Since you can parse the AST, showing the original ordering of the tests would be preferred. I realize this can't happen in cases where source is not accessible. The problem is that the tool is now no longer serving me useful results; it's serving me confusing results. I need Eclipse to be my assistant here and provide me better information. Please consider providing something helpful here in the near future. Thanks, Robert</description>
      <attachments/>
    </issue>
    <issue>
      <id>386470</id>
      <title>Contribute Chrome theme to Eclipse</title>
      <description>I've recently kept track of the development of this project in github: https://github.com/jeeeyul/eclipse-themes What initially started as an alternative simple theme has grown in a solid theme customizer with plenty of features. Actually it is present as an offering on the marketplace here http://marketplace.eclipse.org/content/eclipse-4-chrome-theme Should we consider making this part project of Eclipse? Maybe initially on e4 incubator and when it's mature enough make it part of the default selection of themes among the default ones? Also this would expose the project to further contribution.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386705</id>
      <title>expand patch set when hyperlink clicked</title>
      <description>When clicking https://gerrit.example.com/#/c/411/3 patch set 3 should be expanded.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386764</id>
      <title>[api] TaskMapping should be able to handle custom attributes</title>
      <description>Right now, the set of attributes supported by @TaskMapping@ / @ITaskMapping@ is limited to a few. Many connectors need other attributes to initialize their TaskDatas and thus extend TaskMapping to introduce new setters/getters (eg. getProjectArea). While this is ok from the connector POV, it makes it really hard for API consumers to use these connectors. As consumer I need to a) know which class the connector uses as it's specific @TaskMapping@ b) instantiate the class with the right values This means that Mylyn API consumers need to access internal classes of the connector as most connectors check and cast the ITaskMapping to their own class in order to access the additional details. @ITaskMapping@ should rather have a generic setAttribute/getAttribute concept (baked by an @AttributeMap@) to let connectors handle this in a lightweight and streamlined way. With this approach, API consumers don't need to know about the internals of the connector and just need to provide the right set of key/value pairs of the connector. Dynamically exploring which properties are needed is tracked on task 367372.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386776</id>
      <title>Be able to send comment on bugzilla from  Orion level</title>
      <description>Next feature connected with Pull Request</description>
      <attachments/>
    </issue>
    <issue>
      <id>386964</id>
      <title>tycho-surefire-plugin to support junit categories</title>
      <description>Surefire now has support for junit categories through the group configuration element (http://maven.apache.org/plugins/maven-surefire-plugin/examples/junit.html). It would be nice to bring that to Tycho surefire.</description>
      <attachments/>
    </issue>
    <issue>
      <id>386988</id>
      <title>Allow to run tests on a fully provisioned application</title>
      <description>When tycho-surefire executes tests, all the necessary files to bootstrap eclipse are generated by tycho (config.ini). This is nice but in some cases, mostly to do integration tests or smoke tests or a full product, it would be nice if it was possible to execute the tests on a fully p2 installed environment.</description>
      <attachments/>
    </issue>
    <issue>
      <id>387060</id>
      <title>Autocomplete stop working after update to Eclipse Juno</title>
      <description>An internal error occurred during: "". loader constraint violation: when resolving method "org.eclipse.recommenders.utils.rcp.JdtUtils.getLocation(Lorg/eclipse/jdt/core/IPackageFragmentRoot;)Lcom/google/common/base/Optional;" the class loader (instance of org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader) of the current class, org/eclipse/recommenders/internal/rcp/providers/ClasspathEntryInfoProvider, and the class loader (instance of org/eclipse/osgi/internal/baseadaptor/DefaultClassLoader) for resolved class, org/eclipse/recommenders/utils/rcp/JdtUtils, have different Class objects for the type com/google/common/base/Optional used in the signature -- Configuration Details -- Product: Eclipse 1.5.0.20120131-1544 (org.eclipse.epp.package.java.product) Installed Features: org.eclipse.jdt 3.8.0.v20120525-1249-8-8nFqlFNOfwKDRGz-pXLdGxEM83</description>
      <attachments/>
    </issue>
    <issue>
      <id>387218</id>
      <title>JPA-RS: Enhancement - Support for paging for retrieving large results sets</title>
      <description>It will be a valuable addition to the JPA-RS to allow paging while retrieving large result sets. To support this, client should be able - to GET number of records matching the criteria - etirve records byR specificying chunk size, and last retrieved record identity (i.e. next N records)</description>
      <attachments/>
    </issue>
    <issue>
      <id>387272</id>
      <title>[templates] SWT templates - add SelectionListener</title>
      <description>The SWT Button template does not inluded a SelectionListener. I never use a Button without a SelectionListener. If you want, I can add this to the template and provide a patch. If changing the template is not desired, please close this bug.</description>
      <attachments/>
    </issue>
    <issue>
      <id>387470</id>
      <title>[EFacet][Custom] Editors</title>
      <description>We have to provide editors to allows the user to easly create and edit facetSets, facets, facet attributes, facet references, facet operations and operation parameters. Some elements of the facet have to create a query. The editor must provide an user-friendly interface for the beginners with OCL language and provide the creation of complex queries at the same time. A customization editor has also to be created in the same way than for the facet editor.</description>
      <attachments/>
    </issue>
    <issue>
      <id>387563</id>
      <title>Generalize the "lock of new objects on commit" feature to the "lock/unlock objects on commit"</title>
      <description>Following discussion on http://www.eclipse.org/forums/index.php/t/368113/ , we have use case where we need the feature of unlock objects on commit. Then we could generalize the feature of "lock of new objects on commit" (https://bugs.eclipse.org/bugs/show_bug.cgi?id=359011 ) to a "lock/unlock objects on commit" feature.</description>
      <attachments/>
    </issue>
    <issue>
      <id>387809</id>
      <title>tycho-versions:update-exported-packages</title>
      <description>Setting the version with tycho-plugin updates only the bundle-version. It would be nice if the exported packages would be updated as well. A parameter like the apache felix bundle plugin got (http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html) The pom.xml would look something like this &lt;plugin&gt; &lt;groupId&gt;org.eclipse.tycho&lt;/groupId&gt; &lt;artifactId&gt;tycho-versions-plugin&lt;/artifactId&gt; &lt;version&gt;${tycho.version}&lt;/version&gt; &lt;configuration&gt; &lt;newVersion&gt;1.2.3-SNAPSHOT&lt;/newVersion&gt; &lt;Export-Package-Version&gt;1.2.3&lt;/Export-Package-Version&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;set-versions&lt;/id&gt; &lt;phase&gt;initialize&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;set-version&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=358292 Is this in tychos scope? For releasing this could be very handsome IMHO.</description>
      <attachments/>
    </issue>
    <issue>
      <id>387945</id>
      <title>Create a new package named Eclipse IDE for Java and DSL Developers</title>
      <description>We would like to have a new EPP package for Java and DSL developer. It should contain: 1. JDT + PDE (SDK) 2. Xtend (SDK) 3. Xtext (SDK) 4. EMF+Xcore (SDK) 5. EGit 6. MPC 7. m2e (probably) We see this as vastly simplifying download and installation for Java and DSL developers. I will be the package maintainer and will assure the builds get tested. Thanks to Beth Tibbitts for a good how to :)</description>
      <attachments/>
    </issue>
    <issue>
      <id>387973</id>
      <title>[project] Reduce standalone dependencies</title>
      <description>The introduction of Eclipse preferences added three plugins to the basic requirements of e.g. Acceleo listed in http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.acceleo.doc%2Fpages%2Freference%2Fstandalone.html. org.eclipse.core.runtime org.eclipse.ocl.common org.eclipse.osgi See if the org.eclipse.ocl.common depenedency can be made optional.</description>
      <attachments/>
    </issue>
    <issue>
      <id>388023</id>
      <title>Retire OC4J server adapter</title>
      <description>It is time to retire OC4J server adapters. The maintenance path for OC4J users is to migrate to WebLogic Server. While OC4J is still being used in production environments, there is no evidence of continued and widespread development activity. This is a request to remove OC4J server adapters from Kepler. Any remaining OC4J developers can be directed to use Juno.</description>
      <attachments/>
    </issue>
    <issue>
      <id>388084</id>
      <title>Have tycho-surefire-plugin automatically -XstartOnFirstThread on mac</title>
      <description>Every time someone wants to get a Tycho build multiplatform, the first thing he has to do is to deal with the almost always necessary "-XstartOnFirstThread" system property just for Mac. This mainly implies adding new properties and dealing with profiles. That's a lot of noise in the pom.xml that becomes very complicated for such a small change. Instead, we could think of having tycho-surefire-plugin directly set this system property when executing on a Mac.</description>
      <attachments/>
    </issue>
    <issue>
      <id>388281</id>
      <title>[compiler][null] inheritance of null annotations as an option</title>
      <description>In bug 385440 the most prominent concern raised against the implementation from bug 186342 regards the (absence of) inheritance of null annotations. People unanimously report that having to repeat null annotations from a super method is a significant obstacle against adoption of null annotations. In this bug I'd like to work towards a solution that could be enabled as a compiler option, leaving the choice between the two strategies to the users - at least until we have enough experience to make a founded decision if both strategies should be offered. UNFORTUNATELY, I'm not even sure if I'm able to implement the desired solution. The basic set of situations is: interface I { @NonNull Object m1(@Nullable Object a1); @Nullable String m2(@NonNull Object a2); } class C implements I { Object m1(Object a1) { System.out.println(a1.toString()); // (1) return null; // (2) } String m2(Object a2) { System.out.println(a2.toString()); return null; } } class Client { void test(C c) { String s = c.m2(null); // (3) System.out.println(s.toUpperCase()); // (4) } } With inheritance of null annotations we expect: (a) Checking the implementation C.m1() must detect two errors: - dereference of @Nullable reference a1 at (1) - null type mismatch at the return (2) (b) Checking the implementation C.m2() yields no error (c) Invocations of m1,m2 via I are checked as normal (d) Checking the invocations in Client.test() must detect two errors: - null type mismatch against the argument at (3) - dereference of @Nullable reference s (infered from m2 result) (4) Implementing checks (1) and (2) is not a problem since we have to analyse the hierarchy of A anyway whenever we compile this class, so we can easily find the inherited annotations. Checks (3) and (4) are what worries me: when compiling Client we may not have the information that A.m1 overrides I.m1 (and A.m2 overrides I.m2). This problem has again two parts: (P1) If A is read from source file we "simply" have to ensure that hierarchy analysis for A's methods is complete before C.test is type checked. This assumption typically does not hold in the JDT compiler because the compiler is lazy in analyzing referenced classes (eager analysis could lead to cyclic dependencies among compilation steps). (P2) If A is read from binary file the compiler doesn't analyze the inheritance of methods at all. Interestingly, an intermediate solution in bug 186342 did support the requested inheritance, so how was that possible? Regarding (P1) I recall that I tweaked compilation order so that all required information was available in time. However, I'd have to dig out that implementation to check if the potential of non-termination (cyclic dependencies) actually lurked in that implementation. Regarding (P2) I used a 'hack' that was later voted down and had to be removed as of bug 366063. This 'hack' involved storing inherited annotations in the class file. If storing this information is not allowed it has to be computed on use. I have no idea how much computational effort this would incur, but this *might* be a no-go performancewise. With a sufficiently large tree of ancestors and a good load of overloading that will be many methods to be checked for override-compatibility - just to retrieve inherited null annotations. Let's see if I find the time to make some experiments and measurements regarding (P2) ...</description>
      <attachments/>
    </issue>
    <issue>
      <id>388800</id>
      <title>[1.8] adjust tests to 1.8 JRE</title>
      <description>BETA_JAVA8 When using a current beta of a lambda-enabled JRE (lambda-8-b50), some tests fail due to changes in class libraries. During the first bunch of testing I found that List.remove() is now a default method, which triggers a warning re missing @Override in some tests in MethodVerifierTest.</description>
      <attachments/>
    </issue>
    <issue>
      <id>388823</id>
      <title>Support Conditional Permission Admin</title>
      <description>Created attachment 220723 [details] Sample log Well I wish I would not have to open a bug like this, but I feel like I have to. So the main problem that I was trying to fix is block System.exit calls from all bundles. The idea I had (working and tested) is to override the Equinox Security Manager that is provided by Virgo. My first problem is lack of documentation on the Virgo side on this issue. Googling did not help too much and I could not find one single good link on the problem in case. May be it is just me(I really hope so), but you need to update the documentation on this problem, or in case it is present and I am blind, please attach the link to this bug. On the Virgo forum I have been advised not to override the default Security Manager, since all the "extra" facilities that are given by OSGi with Security manager (BundlePermission, ConditionalPermissionAdmin, etc) will not be available. This makes sense. So I had to use the ConditionalPermissionsAdmin. Here is my simplified code for it: ConditionalPermissionInfo info = admin.newConditionalPermissionInfo("ExitBlocker", null, new PermissionInfo[]{new PermissionInfo(RuntimePermission.class.getName(), "exitVM", "*")}, ConditionalPermissionInfo.DENY); ConditionalPermissionUpdate update = admin.newConditionalPermissionUpdate(); update.getConditionalPermissionInfos().add(0, info); System.out.println("===== Before Commiting ====="); boolean commited = update.commit(); System.out.println("===== After commiting " + commited + " ====="); Unfortunately this does not work. First problem that after deploy, the logs are filled with errors: [2012-09-04 21:11:13.570] ERROR iLogServiceListener@2aa937cd System.err java.security.AccessControlException: access denied (java.lang.RuntimePermiss ion getClassLoader) you can find the logs attached.</description>
      <attachments/>
    </issue>
    <issue>
      <id>388913</id>
      <title>Git Staging (view): Allow commit and push to remote in one interaction</title>
      <description>We now can commit and push in a single step via the Commit-Dialog (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=330048). It would be nice to have the very same available to the Git Staging (view).</description>
      <attachments/>
    </issue>
    <issue>
      <id>388956</id>
      <title>Enable code coverage in test suites</title>
      <description>I am entering this bug to track work on enabling code coverage reports in our build. Nobody is currently working on this but we can at least track pointers to the work that needs to be done. For rationale behind why it was removed, see bug 373594.</description>
      <attachments/>
    </issue>
    <issue>
      <id>388981</id>
      <title>Provide a way to specify that a project cannot be converted to Maven</title>
      <description>Our product has some types of projects that do not work well with Maven, so we'd like to have a way to prevent a user from converting to Maven those types of projects. In other words, we do not want to allow users to select the menu Configure -&gt; Convert to Maven project if they select one project with any of those types. What I propose is the following: 1. Create an extension point in which products can declare a class that will validate if a given project can/should be converted to Maven 2. The wizard would interrogate all the declared validators. If at least one says that the project cannot be converted, the wizard displays the error message returned by the validator, and does not allow the user to finish the wizard. I'm willing to contribute this patch by Monday. But I'd like to hear opinions. Or maybe there is already a way to accomplish this in m2e? Thanks</description>
      <attachments/>
    </issue>
    <issue>
      <id>389063</id>
      <title>Dynamic menu contribution call back similar to Eclipse 3 org.ui.menus dynamic ContributionItem</title>
      <description>--- Following up to http://www.eclipse.org/forums/index.php/t/373495/ In order to realize a fully dynamic menu within e4, the dynamic menu populator is missing. The behaviour should be similar to the dynamic menu as described for the Eclipse 3.x extension point org.eclipse.ui.menus - http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fextension-points%2Forg_eclipse_ui_menus.html #dynamic element. To realize this, a call back on opening a MMenu Element would be required, in which it is possible to dynamically modify the Menu. The behaviour should NOT be to modify the entire application model on changes, but lazily at the request of opening the specific sub-menu. So for example, a sub-element to an MMenu entry could be DynamicItem with a reference to a class where @Execute public void execute(MMenu element) would allow to dynamically modify the Menu. This element has to be called every time the resp. menu is opened (behaviour equivalent to Eclipse 3 when isDynamic() returned true)!</description>
      <attachments/>
    </issue>
    <issue>
      <id>389090</id>
      <title>JPA 2.1 DDL Generation Support</title>
      <description>JPA 2.1 formalizes the DDL generation from previous versions of the specification and now requires DDL generation support. There is new API, new database objects (ie. Indexes, Constraints...), additional ways to provide DDL and new connection management requirements.</description>
      <attachments/>
    </issue>
    <issue>
      <id>389215</id>
      <title>Lower the entry barrier</title>
      <description>Eclipse Platform team is heavily underresourced, hence it is necessary to make it easier to contribute code, especially in the first few milestones. The pool of commiters has to grow to ensure platform sustainability, and achieve model similar to CDT, which is the most diversified project in the community.</description>
      <attachments/>
    </issue>
    <issue>
      <id>389304</id>
      <title>Simplify synchronized project filtering</title>
      <description>It would be nice if the synchronized project filtering was a bit simpler: 1. It's not clear what will be filtered using the path filter. e.g. if I enter 'foo', will this filter /a/foo/b? What will 'a/foo' or '/a/foo' filter? 2. If the path filter also allowed file name wildcards (e.g. *, ?, [], {}, etc.) then it would be simpler to specify filters, and the regex filters may no longer be necessary. Since the filters are ever only used to filter files, file name wildcards should be sufficient in virtually all circumstances.</description>
      <attachments/>
    </issue>
    <issue>
      <id>389478</id>
      <title>Need IDE.openEditors(...) that allows to inject state</title>
      <description>3.8 / 4.2. Projects like JDT or Mylyn cannot benefit from the IDE.openEditors(...) API because they also need to set state (especially the selection) when opening their editors. We need a new API that allows this in order to get improved performance when opening multiple editors at once.</description>
      <attachments/>
    </issue>
    <issue>
      <id>389658</id>
      <title>Predefined launchers for Publisher and Subscriber</title>
      <description>Hi, I was playing around with the java client and found it useful to create two launchers: -MqttPublisher -MqttSubscriber These can be used to easily run and see the communication as in the attached screenshot. This might be specific to use with eclipse but I guess it is fairly common so if you like to merge here's the patch. BTW I think that there's a Example or Sample component needed in the bugzilla.</description>
      <attachments/>
    </issue>
    <issue>
      <id>389785</id>
      <title>add maven archetype</title>
      <description>A maven archetype for a quickstart project would be helpful, e.g. like it's provided by the Wicket project (http://wicket.apache.org/start/quickstart.html). This would shorten the startup time for using Xtend in a maven based project.</description>
      <attachments/>
    </issue>
    <issue>
      <id>390237</id>
      <title>[patch] Model Editor Layout Change</title>
      <description>Hi, the layout in the second part of the model editor does not look good. It needs too much room to be editted in the available space. Please see my attachements to get the idea.</description>
      <attachments/>
    </issue>
    <issue>
      <id>390381</id>
      <title>Provide different HttpSesssions for servlets registered with different HTTPContexts</title>
      <description>When registering servlets with the HttpService, all registered servlets share the same ServletContext, even when they are registered with different HttpContexts. It would be nice if the Equinox implementation could return different ServletContexts for different HttpContexts, as Jetty does [1]. This would allow to isolate different web applications within one OSGi container. Example: HttpContext httpContext1 = httpService.createDefaultHttpContext(); httpService.registerServlet( "/foo", servlet1, null, httpContext1 ); HttpContext httpContext2 = httpService.createDefaultHttpContext(); httpService.registerServlet( "/bar", servlet2, null, httpContext2 ); Running this code in Equinox, servlet1.getServletContext() == servlet2.getServletContext(). Trying the same with Apache Karaf 2.2.9 using PAX Web, both servlet contexts are different, and consequently, both servlets also get different HttpSessions. [1] http://felix.apache.org/site/apache-felix-http-service.html#ApacheFelixHTTPService-ServletContextNotes</description>
      <attachments/>
    </issue>
    <issue>
      <id>390394</id>
      <title>Create bugzilla comments for changesets containing bug number as git pull/push hooks</title>
      <description>As asked by Lars in bug 389215 comment 29 it would be nice if the fixed bugs in Bugzilla would contain links to the actual commits fixing those bugs. Example comment: ----------------------- Pushed to master with commit "Bug 389651 - -clearPersistedState option as default" http://git.eclipse.org/c/e4/org.eclipse.e4.tools.git/commit/?id=23bd251e062fed2af211a66ad478df2c4ed6c1db ---------------------- I would go a step further and request here a simple post-pull/push hooks in eclipse.org Git servers, which would automatically post changeset links to the bug they refer in the commit message. This way you never forget to link bug fix to the right changeset. The policy for a proper "bugfix commit" would require the bug id in the commit message, something like: "Fixed NPE for bug 123456", and the clever hook would automatically post a comment into the related bugzilla bug. The pattern for identifying "related bugs" in commit messages could be similar to the bug link detection pattern in bugzilla itself. BTW this is a standard feature in Google code project hosting - you can even close bugs there by writing the commit comment like "Fixes issue #20".</description>
      <attachments/>
    </issue>
    <issue>
      <id>390419</id>
      <title>[Protocol] Reorganize event names in protocol</title>
      <description>Currently event names in protocol are inconsistent. In "listen" operations they are named after the typed event listener, like "mouse", "selection". In the notify operations they are named mostly after the corrosponding method of the listener, or after the SWT constant. ( "mouseDown", "mouseUp", "widgetSelected", "widgetDefaultSelected" ). There are exceptions to both rules. One issue with this setup is that one listen-event corrosponds to multiple notify-events. Therefore it is not possible to tell the client that i am only interested in (for example) mouseUp events, but not mouseDown. Furthermore, using typed listener as the template doesn't mesh very well with the (future) SWT/RWT interna and ClientScripting. I would suggest to rename all events in the protocol to match the SWT constant, like we do with Style-Flags. For example, instead of "mouse" -&gt; "mouseDown", "mouseUp", we would have "MouseDown" -&gt; "MouseDown" "MouseUp" -&gt; "MouseUp". Events that don't have a contant in the SWT class (or somewhere else) should at least follow the 1:1 pattern for listen/notify events. In some cases it might also be correct to use a call operation instead, like if application code can not listen this event, or if "listen" would always be true for that event.</description>
      <attachments/>
    </issue>
    <issue>
      <id>390446</id>
      <title>Set "Incompatible required binaries" build path problem to "Warning" by default</title>
      <description>Mixed setups are always problematic and will bite the user sooner or later. I often see issues were a project is set up for J2SE-1.4, but developers compile against a 1.5 JRE. They often use new APIs and only realize their fault when users complain about NoSuchMethodExceptions. JavaCore#CORE_INCOMPATIBLE_JDK_LEVEL should be set to "warning" by default".</description>
      <attachments/>
    </issue>
    <issue>
      <id>390746</id>
      <title>Initial Code Contribution - Precise: argument recommendation engine</title>
      <description>Created attachment 221688 [details] Source code of Precise It is the source of the Precise project that should move to Eclipse Recommenders Incubator. I have clarified with all the authors of the source code and made sure they agree on the contribution.</description>
      <attachments/>
    </issue>
    <issue>
      <id>390852</id>
      <title>Simplify Developer &amp; Contributor Setup</title>
      <description>We want to simplify the setup of a work environment for Xtext/Xtend development. It should be a one-click download from the website, which 1) materializes a development Eclipse, with all plugins we use for development 2) clone the two git repositories 2.1) a remote to a gerrit instance (yet to be created) should be configured 3) import the projects into a workspace, idealy with working sets. Did I forget something?</description>
      <attachments/>
    </issue>
    <issue>
      <id>390882</id>
      <title>[1.8][compiler] Compiler should reject type annotations on nested package names and qualified top level types</title>
      <description>BETA_JAVA8: This program compiles without any errors when built against 308 enabled 8b56: // ----------- import java.lang.annotation.Target; import static java.lang.annotation.ElementType.*; public class X { Object o1 = (@Marker java.lang.Integer) null; // 1. Right. Object o2 = (java. @Marker lang.Integer) null; // 2. Wrong. Object o3 = (java.lang. @Marker Integer) null; // 3. Wrong. } @Target(TYPE_USE) @interface Marker { } // ---------------------------------- 2 is annotating a nested package name - 308 does not allow this. 3 is annotating a top level type - the proper way to this is to use 1 style prefix annotations. Note that 8b50 javac crashes on this test case.</description>
      <attachments/>
    </issue>
    <issue>
      <id>390915</id>
      <title>Migrate JDT website to Git</title>
      <description>CVS path: www/jdt/ui Markus, please fill in what we want to migrate and then move the request to the webmaster.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391089</id>
      <title>Add possibility to search and replace in Application Model editor</title>
      <description>When switching to the XMI view of the Application Model editor, it should be possible to search (and replace) by hitting Ctrl+F</description>
      <attachments/>
    </issue>
    <issue>
      <id>391108</id>
      <title>[1.8][compiler] Compiler allows type annotations on void methods.</title>
      <description>BETA_JAVA8: The following program compiles alright with ECJ while it should not. // ------------- public class X { @Marker public void foo() { } } @java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE) @interface Marker { }</description>
      <attachments/>
    </issue>
    <issue>
      <id>391280</id>
      <title>Directory showing as always dirty when it contains submodule</title>
      <description>I started using EGit with eclipse and one of my directories (which contains many submodules and regular directories) always shows as dirty. I have tried to git reset --hard and re-create the project from scratch. If I select the directory and Compare With git index or HEAD, it does not show any changes. My view appears: &gt; project &gt; folder_containing_submodules otherfolder otherfiles.txt The 'folder_containing_submodules' contains both submodules and static content. But neither have changes so I don't expect EGit to mark it as dirty with the preceeding '&gt;'. If I use git on the command line for the folder, git status does not show any pending changes and git submodule lists all the submodules correctly. Using EGit, I tried to set the Assume Unhanged option. But this propagates to child directories too (which isn't desirable). I am using Eclipse 4.2.1, EGit 2.1.0, and Geppetto 3.0.0. What else could cause this directory to always show as dirty? Any way to just ignore changes to this directory (but still changes to the siblings)? Reference URL at http://stackoverflow.com/questions/12731270/egit-showing-directory-as-always-dirty</description>
      <attachments/>
    </issue>
    <issue>
      <id>391327</id>
      <title>Call to Handler from handled menuitem / toolitem without fitting @Execute method fails silent</title>
      <description>If DI cannot find a @Execute method with fitting arguments in the method, it fails silently. All other DI annotations through an exception and no suitable value could be found. I think we should also through an execution (unless @Optional) was used. From my training experience, I can tell that this inconsistent behavior confuses the people.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391433</id>
      <title>[JUnit] Remove JUnit 3 from Eclipse</title>
      <description>I know this has been reported previously and closed as wontfix, but... (1) The official webpage of junit no longer lists 3.8 (2) The official repo of junit no longer contains 3.8 https://github.com/KentBeck/junit (3) Junit 3 is 6 years old, and even old repo downloads are going down http://sourceforge.net/projects/junit/files/junit/3.8.2/junit3.8.2.zip/stats/timeline?dates=2006-10-03+to+2012-10-09 (4) Junit 4 contains a compatibility layer. If there are any known problems with this layer that block the migration I would be really happy to fix them in the upstream junit 4. (5) It's simply dangerous to have such an old library that may require 10 years maintenance via Eclipse LTS.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391615</id>
      <title>comments by other users should stand out</title>
      <description>Comments by other users should stand out from comments made by you. For example, the comment icon could be coloured differently or have some additional decoration (e.g. yellow person) when the comment is by you.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391847</id>
      <title>[1.8][compiler] Add DOM/AST API support for JSR 308 constructs.</title>
      <description>BETA_JAVA8: We need to add support for exposing and manipulating - Annotations on type references including wildcards, - Annotations on type parameters, - Annotations on receivers of methods and inner class constructors, - Annotations on varargs ... parameter, - Annotations on array creation expressions in the DOM/AST API.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391890</id>
      <title>[1.8][compiler] DOM/AST API should be enhanced to support type annotations in Type &amp; TypeParameter nodes</title>
      <description>Created attachment 222286 [details] Work in progress - patch v0.3 BETA_JAVA8: This bug will cover the work for enhancing the entire Type hierarchy and TypeParameter nodes.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391893</id>
      <title>[1.8][DOM/AST] Add receiver parameter support in DOM/AST</title>
      <description>BETA_JAVA8: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=383908#c2 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=383908#c3. The AST node MethodDeclaration should expose and provide facilities for manipulating the receiver.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391895</id>
      <title>[1.8][dom ast] Annotation support for extended dimensions</title>
      <description>BETA_JAVA8: Internally, the compiler splits the declarations with multiple field/local variables into multiple declarations. On the DOM side, these are managed via fragments with possible extra dimensions property. The extra dimensions may carry type annotations and we need to add support for that.</description>
      <attachments/>
    </issue>
    <issue>
      <id>391898</id>
      <title>[1.8][compiler] Add DOM/AST support for annotations on varargs,</title>
      <description>BETA_JAVA8: For a variable arity method, the compiler AST contains an extra dimension while on the DOM/AST side the Type of SingleVariableDeclaration does not contain an extra dimension, but captures the fact of variable arity in a boolean property: VARARGS_PROPERTY. So SingleVariableDeclaration needs to be extended to capture, expose and allow manipulations on the annotations on the ...</description>
      <attachments/>
    </issue>
    <issue>
      <id>392099</id>
      <title>[1.8][compiler][null] Apply null annotation on types for null analysis</title>
      <description>Given the good progress in supporting JSR 308 by the compiler I'm going to investigate what it takes to consume such type annotations for null analysis. This will also serve as the first field study to challenge the JSR 308 implementation in use.</description>
      <attachments/>
    </issue>
    <issue>
      <id>392109</id>
      <title>Pervasive PSQL JPA support</title>
      <description>Pervasive PSQL EclipseLink JPA 2.0 support</description>
      <attachments/>
    </issue>
    <issue>
      <id>392238</id>
      <title>[1.8][compiler][null] Detect semantically invalid null type annotations</title>
      <description>Null annotations used via TYPE_USE are not meaningful in all locations that are syntactically valid. Specifically for nested types saying my.pack.age. @Nullable Outer. @NonNull Inner does not denote anything useful: - if Inner is a static nested class than no instance of Outer is involved - if Inner is a non-static inner class than the enclosing instance must implicitly exist for any reference to an Inner Neither case features a reference to an Outer that can optionally be null. Rejecting such combinations also avoids the ambiguity that would arise in situations like this: void foo(@Nullable Outer. @NonNull Inner arg) where the @Nullable annotation could apply to the Outer part of the type *and* to the entire argument declaration. With latest moves in the spec, where this annotation would be duplicated into both kinds (SE7 and 308) annotations, this would be contradictory. In this bug I will investigate what other uses must be rejected for null annotations, too. I consider to treat these 'malformed' declarations like this: - with annotation based null analysis disabled: accept - with annotation based null analysis enabled: report as error, because we don't want to define rules how to continue analysis starting from such contradictory declarations</description>
      <attachments/>
    </issue>
    <issue>
      <id>392245</id>
      <title>[1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations</title>
      <description>From bug 392099 comment 4: &gt; How will @NonNullByDefault be applied to TYPE_USE annotations? Repeating my own comment: Tricky case is @NonNullByDefault void takeList(List&lt;String&gt; list) { } Worst case scenario: we may have to introduce another parameter to the @NonNullByDefault annotation, s.t. like: @NonNullByDefault(location={PARAMETER, TYPE_USE}) Assuming, we'll have this parameter, what should be its default? Then if we agree on the default and agree that this default makes sense *always*, we can spare the parameter :)</description>
      <attachments/>
    </issue>
    <issue>
      <id>392512</id>
      <title>Support GDB breakpoint notifications</title>
      <description>GDB 7.4 fires notifications when a breakpoint is created, modified or deleted from CLI or trace files. It also notifies clients when a pending breakpoint is set. Using these notification we can show breakpoints set from the GDB console and tracepoints set from trace files in the Breakpoints view.</description>
      <attachments/>
    </issue>
    <issue>
      <id>392701</id>
      <title>[JPA 2.1] Named Stored Procedure Query support</title>
      <description>The ER represents the new Stored Query Support offered in JPA 2.1. Minimal support should include annotation and XML model updates to support the UI and global namespace validation. Content assist should also be considered.</description>
      <attachments/>
    </issue>
    <issue>
      <id>392716</id>
      <title>Compute product qualifier based on inclusions</title>
      <description>With Tycho 0.16 we've switched to the long awaited reproducable version qualifiers, but it fails to update the products artifact version qualifier correctly. The algorithm for product version qualifier used on "product-export" does not consider the version qualifier of the dependencies. Therefore the product version qualifier does not change even if one of the dependent features changed. This does kill the "Check for Updates" functionality as it cannot find any newer version for the product being installed. In example, the last commit to the a.b.c.repo project where the .product file lives is from 09.10.2012, 07:05. The product file declares a dependency to a.b.c.feature, where the last commit is from 22.10.2012, 10:34. The feature is rebuild and gets a new identifier, a.b.c.feature_1.0.0.201210221034, but the product artifact stays at the original qualifier 1.0.0.201210090705. But the product artifact version qualifier should be bumped to the newest qualifier of the referenced dependencies as otherwise "Check for Updates" will offer/find an update again.</description>
      <attachments/>
    </issue>
    <issue>
      <id>392798</id>
      <title>API for monitoring jobs from plugins</title>
      <description>Imagine the user has installed multiple plugins that allow a user to request long running operations on remote servers. We are talking about very long running operations, potentially hours in extreme cases. For instance, a backup operation, a regular application deploy operation, or a staged redeploy on a cluster of hundreds of machines. Imagine the user triggers the request from one machine running Orion, and wants to check the result of the request an hour later from a different machine. It is also possible the job started by a user is visible to another. Or that the job was not even started from Orion (but is now being monitored using Orion). Plugins would contribute such jobs, and would report progress updates, allow interruption, and report completion/outcome. Orion would ask the plugin for a initial state (which would return a collection of jobs), and poll for additional updates at some rate, possibly informed by the plugin configuration. It would be similar in a way to Eclipse's Progress view. This is different than bug 366722 in that the long tasks here would often be proxies to work being performed in remote servers, not just transient tasks started in the current Orion session. Having this in Orion instead of a plugin-specific screen makes in sense IMO because it allows multiple plugins to integrate in the same UI, and dealing with long running operations is a cross-cutting concern.</description>
      <attachments/>
    </issue>
    <issue>
      <id>392833</id>
      <title>[CDO] Support soft Ecore-to-UML references in dynamic profiles</title>
      <description>Supporting dynamic profiles in UML models in a CDO repository requires registering its Ecore definition in the repository server's package registry when CDO needs to store any instances of its stereotypes and other classes. This poses two problems: - the EPackage definition is embedded in the UML profile content. CDO expects it to be the root of the resource. This is a problem that needs to be fixed in CDO - the fix (in CDO) to the previous problem requires simply detaching the EPackage from its container and sending it alone to the server. However, the cross-references from the Ecore definitions to their UML counterparts then do not resolve and the CDO server refuses (rightly) to load an EPackage that has broken cross-references. This can be addressed in UML2 As discussed off-line with Kenn, the proposed solution to the problem of references from the Ecore to the UML definition is to provide an alternative "soft" reference format in the annotations. Rather than use the EAnnotation::references to link, e.g., an EClass to the Stereotype that generated it, we use the EAnnotation::details map to store an "href" detail with a quasi-URI indicating the Stereotype, based on its qualified name. This soft reference can then be resolved when needed by looking up the UML definition by name. A new utility API would be provided for applications to post-process a dynamic profile definition to convert hard references to the soft form, to prepare the profile for CDO compatibility.</description>
      <attachments/>
    </issue>
    <issue>
      <id>392956</id>
      <title>[Legacy] Support partial/conditional persistence of features</title>
      <description>Created attachment 222894 [details] Proposed implementation The UML metamodel has a peculiar requirement of needing to be able to persist a *subset* of values in some features that are marked in UML.ecore as transient. To accomplish this for XMI serialization, the UMLResource has a custom XMLSave implementation that overrides the transience of these features. In particular, the Activity::group and Activity::node lists are transient but persist those elements that are owned by the activity (via the ownedGroup or ownedNode feature, respectively). Currently, the CDO legacy wrapper checks whether an EStructuralFeature is transient and, if so, doesn't attempt to persist it at all. This results in incorrect UML activity models being loaded from the repository because these partially-persisted features aren't stored at all. To support persistence of UML models (or any model with a partial or conditional persistence requirement) we need to be able to tell CDO about these special features. I attach a git e-mail patch that proposes a solution. I welcome feedback. The CDOClassInfo is enhanced to look for annotations on EStructuralFeatures to create CDOPersistenceOverrideRules for them. Any feature that has such an annotation is assumed to be persistable (regardless of other Ecore metadata) via that rule, and so it is added to the class info's list of all persistent features. Currently, the annotation supports a rule that persists elements of the feature that are members of some other feature via an annotation like so: source: org.eclipse.emf.cdo detail: persistenceOverride -&gt; &lt;featureName&gt; where &lt;featureName&gt; is the name of the feature on which the persistence depends. So, in our UML example, we would have: Activity group annotation source: org.eclipse.emf.cdo detail: persistenceOverride -&gt; ownedGroup node annotation source: org.eclipse.emf.cdo detail: persistenceOverride -&gt; ownedNode This instructs the rule to save only those elements in an activity's group list that are in its ownedGroup feature, and similarly for node/ownedNode.</description>
      <attachments/>
    </issue>
    <issue>
      <id>393143</id>
      <title>Info views should indicate when the linking is not in sync</title>
      <description>4.3 M3 When linking is enabled and the new input is not usable, we used to clear the view. Recently we changed this to keep the old input. We should indicate this to the user by using a different link icon.</description>
      <attachments/>
    </issue>
    <issue>
      <id>393161</id>
      <title>[type wizards] Pre-fill package name in the new class dialog</title>
      <description>If the new java class wizard is executed against a project and the project does not have any packages yet then the package field should be prefilled with the named of the project. Reproduce. Create an empty project go to the source folder select new class the package field is empty and it requires a lot of work to fill it in with the name of the project, which should, by convention, be the name of the top level package.</description>
      <attachments/>
    </issue>
    <issue>
      <id>393242</id>
      <title>[CSS] JFace StatusLine cannot be easily styled</title>
      <description>StatusLine#updateMessageLabel() explicitly sets colours when updating. The colours cannot be changed even with a custom property: protected void updateMessageLabel() { if (fMessageLabel != null &amp;&amp; !fMessageLabel.isDisposed()) { Display display = fMessageLabel.getDisplay(); if ((fErrorText != null &amp;&amp; fErrorText.length() &gt; 0) || fErrorImage != null) { fMessageLabel.setForeground(JFaceColors.getErrorText(display)); fMessageLabel.setText(fErrorText); fMessageLabel.setImage(fErrorImage); } else { fMessageLabel.setForeground(display .getSystemColor(SWT.COLOR_WIDGET_FOREGROUND)); fMessageLabel.setText(fMessageText == null ? "" : fMessageText); //$NON-NLS-1$ fMessageLabel.setImage(fMessageImage); } if (copyMenuItem != null &amp;&amp; !copyMenuItem.isDisposed()) { String text = fMessageLabel.getText(); copyMenuItem.setEnabled(text != null &amp;&amp; text.length() &gt; 0); } } } We should pull those colours out to fields to allow them to be customized.</description>
      <attachments/>
    </issue>
    <issue>
      <id>393618</id>
      <title>[breakpoints] Support read-only breakpoints.</title>
      <description>TCF debugger has a use case where breakpoints are created by another client (not the Eclipse UI) and actually cannot be modified by the UI. Ideally these breakpoints should be marked as read-only and all actions to change the breakpoints would be disabled? Does anyone else have such a use case?</description>
      <attachments/>
    </issue>
    <issue>
      <id>393640</id>
      <title>create puppet configuration for Bugzilla</title>
      <description>Bugzilla test configurations should be managed through puppet.</description>
      <attachments/>
    </issue>
    <issue>
      <id>393794</id>
      <title>Method camelcasing optimization request</title>
      <description>It would be nice if camelcasing would be assumed in method reccomendation. Please see the screen shot. I am looking for the getValue method but recommender gives me three unrelated methods on top. I wish I had getValidators and getValue on top.</description>
      <attachments/>
    </issue>
    <issue>
      <id>394020</id>
      <title>[model] Persist Review models across workbench</title>
      <description>Currently, EMF model creation is driven by the editor components. For example, when a patch set is expanded, a new set of review items are loaded. I am guessing that it is currently implemented this way out of performance/latency concerns? But with the current solution we end up with a) tight model/UI coupling b) overly complex code and util methods c) very limited ability to reuse code across UI elements, and d) losing a lot of the advantages that EMF gives. This last is especially a concern because it means that we need to create multiple instances of the models. I think this concern probably would dominate the other performance issues. I'm sure I'm missing some concerns here, so I don't want to go and just start ripping things out. And I don't know yet if it makes sense to implement this before or after the common model work. It would be a really involve job so my sense is that we'll have to wait on it. In any case, I'd like to get some feedback on the following general strategy. 1. Unify code for populating review model from Gerrit server. 2. Remove all direct references to com.google.gerrit.* elements and use Reviews/Gerrit model instead. (There may be exceptions warranted for this.) 3. Support deferring reads until the actual model elements are needed, with a generic interface for requesting these at a more granular level. 5. Provide API for accessing one and only one model for each review from Eclipse workbench. 6. Provide a mechanism for caching, updating and disposing of stale reviews. This may be managed in EMF by having a single large model containing all elements, or perhaps by storing the reviews separately.</description>
      <attachments/>
    </issue>
    <issue>
      <id>394623</id>
      <title>Listeners should receive notification on derived properties</title>
      <description>I found I found a problem using listeners on ResourceSet : in the general case, we receive Notification for all changes, excepted when the modified property is a derived property. Moreover, it is not possible to find the 'super' properties to listen when we want listen a derived property, that's why I think that it should be interesting to receive Notification for derived properties.</description>
      <attachments/>
    </issue>
    <issue>
      <id>394709</id>
      <title>copy artifacts from another project fails if the project from which to copy is running</title>
      <description>With Hudson 3.0.0 RC-4, when Hudson process A have a build task "Copy artifacts from another project" to get "Latest successful build" from Hudson process B; if the Hudson process B has successful build artifacts BUT is running at the time process A tries to get the artifacts, then the process A will fail.</description>
      <attachments/>
    </issue>
    <issue>
      <id>394743</id>
      <title>user can see overview of inline comments</title>
      <description>The problem with inline comments is that the conversation gets distributed over many files in many patch sets, making it extremely difficult to find a comment you read before, or to quickly confirm that you have addressed all comments. This seems decidedly un-task-focused. It would help if there were some kind of view that showed all inline comments together and allowed the user to navigate to the comment location in the patch set.</description>
      <attachments/>
    </issue>
    <issue>
      <id>394793</id>
      <title>[CBI] Publish org.eclipse.license into p2 repo</title>
      <description>When building a feature that uses the license-feature attribute to refer to org.eclipse.license, tycho will try to get the corresponding IU from a p2 repo. It would be great if this IU was actually published in a p2 repo so it could be obtained. At this point, I have to copy the source version of this feature which I believe defeats the point of having such a feature.</description>
      <attachments/>
    </issue>
    <issue>
      <id>394925</id>
      <title>[navigator] extend model to support common navigator</title>
      <description>We'll be adding some features to core model mostly to support some common navigator and presentation features but that could also be more generally useful.</description>
      <attachments/>
    </issue>
    <issue>
      <id>394937</id>
      <title>[Model Explorer] Papyrus shall propose a simplified model explorer view.</title>
      <description>Created attachment 223887 [details] Slide showing ModelExplorer problems. Attached is a slide with a screenshot showing the problems mentioned in the title of this problem report. The ModelExplorer has a very limited space on the users screen to expose information which is of importance &amp; relevant to the user. Papyrus need to use this screen space wisely. In this slide there is a screenshot of the Model Explorer for a single modelled class to which "stuff" that _can_ be added as "children" to a class also _has_ been added, and then browsing through nesting-levels presented by the Papyrus Model Explorer. ALSO NOTE: It's only in the Model Explorer that you can browse through the nesting-levels / -hierarchy of all the UML2 metamodel "stuff" a user can add to a class out-of-the-box in Papyrus. You can not do this in diagrams. First you start wondering why a user can and would be interested in adding all this stuff to a simple class in Papyrus, and then the methodological &amp; possible/eventual runtime semantics of it when you start thinking about generating some code for some product on some SW/HW platform. Then you start wondering why metamodel-association-role-names are exposed in the Model Explorer. I already KNOW that my modelled attributes belongs to this class, but as a user I'm not interested in seeing in the Model Explorer that there is a containment-association between my modelled attributes and it's class, I'm not interested in seeing that there is a containment-association in the first place, and that the role-name in the class-&gt;attribute direction is "ownedAttribute", and it's quite annoying to have to click your way down to the attributes. (and even furter down) HERE IS AN IMPORTANT AND QUITE RELEVANT EXAMPLE: In your product, on your platform, you model your inter-related data as classes with attributes as containers for this data, and the class (data) itself may have a lifecycle formalized by a state machine. On your platform the architectural rules states that the state-machinery-data for the class resides in one specific memory, while the attribute-data resides in a completely different piece of memory, perhaps in a database on some remote cloud. FOLLOWUP QUESTION: For a user of Papyrus, what would then the semantics of the clickable/naviagable containment association between a class and its attributes in the UML2 metamodel exposed by Papyrus Model Explorer mean? The current Model Explorer is not particularly user-friendly, wasting lost of screen space. Then there is this infinite recursiveness in the Model Explorer, as shown in the attached screenshot. Why would a user like to continue clicking his/her way down only to get back to where you started from, in this case, the modelled class? As a user (maybe a newbe), clicking your way down in Model Explorer, you really can't tell exactly when to stop clicking your way down to find what you think you are looking for, and when you have run out of screen-space (~lost in space) you have to use the "Collapse All" button to start your search-for-info all over again. Just have a look at the containment-association-role-names in the attached slide, and the reverse-association-role-name ("class" in this case) and then ask: What does these metamodel-names mean to a "normal" user" ? (like a newbe) This problem report is closely related to Bug 394931. Attached is a slide showing what a user can be faced with. :(</description>
      <attachments/>
    </issue>
    <issue>
      <id>395059</id>
      <title>support Gerrit 2.6 / Eclipse.org Reviews</title>
      <description>Make the Gerrit connector compatible with Gerrit 2.6. Known incompatibilities: * Internal RPC interface has changed from /gerrit/rpc to /gerrit_ui/rpc [1,2] [1] https://gerrit-review.googlesource.com/38400 [2] https://gerrit-review.googlesource.com/38562</description>
      <attachments/>
    </issue>
    <issue>
      <id>395136</id>
      <title>Add support for Geometry types on Postgresql/PostGIS databases</title>
      <description>Support for Geometry types not present when working with PostGIS databases. There are various converter bits available when searching for support, but none appear to be fully functional. After including one of these converters, I obtained some minimal functionality, but ran into endian errors when attempting to perform native SQL queries directly on the database. Can assist in implementation, will attempt to submit fix along with appropriate unit tests.</description>
      <attachments/>
    </issue>
    <issue>
      <id>395174</id>
      <title>Provide refactoring support for e4xmi files</title>
      <description>Class uris are not changed in Application.e4xmi after renaming the package.</description>
      <attachments/>
    </issue>
    <issue>
      <id>395213</id>
      <title>Move requirement for JFace to Java 1.5</title>
      <description>Platform has moved to Java 1.5. Can we move JFace also to 1.5? That would allow for example to extend JFace Viewer with Generics.</description>
      <attachments/>
    </issue>
    <issue>
      <id>395283</id>
      <title>Store and restore window size and location of subdialogs while editing Applicatione4xmi</title>
      <description>It would be very nice if the size and location of these windows would be stored before closing and restored after loading. I dont want to resize the window ever and ever again. Following dialogs are concerned: Find Command Find ClassURI Find Icon</description>
      <attachments/>
    </issue>
    <issue>
      <id>395421</id>
      <title>Update to Ant 1.9.2</title>
      <description>I am going to assume that we will be getting Ant 1.9 soon - usually new versions are released around the holidays / new year - there has been no vote yet from the Ant devs, but they are preparing the whatsnew (http://svn.apache.org/repos/asf/ant/core/trunk/WHATSNEW) and it looks like they will drop Java 1.4 support - see the complete thread: http://mail-archives.apache.org/mod_mbox/ant-dev/201201.mbox/browser . This would also be a good time for us to fix bug 319746 since we extend a bunch of the Apache classes. There was also some talk of removing deprecated code from earlier versions of Ant: http://mail-archives.apache.org/mod_mbox/ant-dev/201208.mbox/browser Also there is a whatsnew entry that will directly affect us (since we extend ProjectHelper): "The ProjectHelper class now exposes a method to be used by third party implementations to properly resolve the binding between target extensions and extension points. Bugzilla Report 53549."</description>
      <attachments/>
    </issue>
    <issue>
      <id>395658</id>
      <title>[1.8][ast rewrite] MethodDeclaration's thrown exceptions should be Types and not Names.</title>
      <description></description>
      <attachments/>
    </issue>
    <issue>
      <id>395962</id>
      <title>[templates] JUnit templates rework</title>
      <description>I recently seen a lot of tips how to create "correct" JUnit test templates [links]. As I want to rework the SWT templates, shall I also create improved JUnit test templates? I would also suggest to delete the JUnit 3 templates or at least put it into second position. [links] http://eclipsesource.com/blogs/2012/03/20/simple-junit4-templates-for-eclipse/ http://www.codeaffine.com/2012/11/26/working-efficiently-with-junit-in-eclipse-2/</description>
      <attachments/>
    </issue>
    <issue>
      <id>396006</id>
      <title>[editor] limit size of patch set display</title>
      <description>Currently, all artifacts are shown in list on current patch set. This is really awkward as because all common functions are located at bottom of patch set dialog, it requires user to scroll to bottom of potentially very long list. Especially now that we have Review Explorer, it would be good to be able to collapse these.</description>
      <attachments/>
    </issue>
    <issue>
      <id>396199</id>
      <title>Add apache commons compress 1.3</title>
      <description></description>
      <attachments/>
    </issue>
    <issue>
      <id>396971</id>
      <title>Superfluos Menu item in Part/Menus</title>
      <description>In http://www.eclipse.org/forums/index.php/t/441698/ I asked the question where an entry of type Menus / Menu for a ViewPart defined in the Application Model gets presented. I did not receive any answers so far and tests in OS X and Windows show that elements created in there are simply not presented to the user. If this is really the case, the Action should be removed from the Application model as not to confuse users. I add the screenshot from the forum to depict the matter.</description>
      <attachments/>
    </issue>
    <issue>
      <id>396975</id>
      <title>Provide find action for [ToolBar|Trim|Menu] contribution elements</title>
      <description>Within the [ToolBar|Trim|Menu] contribution elements we have to set a parentId, this should be supported by a Find action as used for iconURI or classURI elements.</description>
      <attachments/>
    </issue>
    <issue>
      <id>397508</id>
      <title>Custom EMFv TraversalStrategy needed for stereotype applications</title>
      <description>Stereotype applications have an irregular XMI structure and so traversals of the Model tree or a subtree omits the stereotype applications. Now that MDT/UML2 has EMFv support, a UMLTraversalStrategy is better hosted by MDT/UML2 rather than MDT/OCL which requires Stereotype traversal in order to correctly support profilr validation in Papyrus.</description>
      <attachments/>
    </issue>
    <issue>
      <id>397684</id>
      <title>ETFw using JAXB framework</title>
      <description>I have created an extension for the External Tools Framework that allows users to write JAXB workflows using the UI widgets provided by PTP's resource manager schema. This allows more direct control over the User Interface design for ETFw tools. The framework supports both the previous SAX parser based workflows and the new JAXB parser based workflow using a menu selection in the Performance Analysis tab. There are minor changes to the ETFw backend to support both workflow types.</description>
      <attachments/>
    </issue>
    <issue>
      <id>397896</id>
      <title>Replace Platform Classic/SDK with EPP Classic/SDK including EGit</title>
      <description>As Eclipse developers we were used to download the Eclipse Classic/SDK provided by the Eclipse Platform team that includes a CVS client. But after the migration of all CVS source code repositories at eclipse.org to Git we need a change of the feature set of the Eclipse Classic/SDK package. Instead of CVS we'd like to get a package that includes EGit out of the box. This issue had been brought up at our Eclipse Architecture Council call today, but it's not the first time that I hear this request. Because of dependencies between the Eclipse Platform build and the EGit build it would probably the best if the Classic/SDK package would be build by EPP in the future. I'd like to use this bug to discuss this issue and possible next steps with the Eclipse Platform team and all other interested parties. Last year there was a similar request about including the MPC (Marketplace Client) into the Classic/SDK download (see bug 375292). We could re-discuss this issue again in this context.</description>
      <attachments/>
    </issue>
    <issue>
      <id>397912</id>
      <title>[hotbug]Cant use NON JAX-WS Annotations via extension point, added to JAX-WS Properties view</title>
      <description>When specifying a JAX-RS category via ext point org.eclipse.jst.ws.annotations.core.annotationCategory. These entry are automatically added to the JAX-WS annotation properties view. It does not appear that the org.eclipse.jst.ws.annotations.core is re-usable outside of the JAX-WS context. Should there be filtering?</description>
      <attachments/>
    </issue>
    <issue>
      <id>398283</id>
      <title>ValidateOnAnyKey for Number and Decimal fields</title>
      <description>AbstractStringField - setValidateOnAnyKey(boolean b) (org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField) gives the opportunity to enable validation on any key. It should be implemented one level above in AbstractValueField. This way it would also be available on most other ValueFields.</description>
      <attachments/>
    </issue>
    <issue>
      <id>398613</id>
      <title>[CBI] make builds less monolithic</title>
      <description>Just wanted to call out another example of how we are currently building things that we were not building with Eclipse SDK PDE based builds. This was first mentioned in bug 398440 comment 2. It involves the bundle org.eclipse.e4.ui.model.workbench.edit This is part of the "e4 incubator" which should have its own build. It was discovered as "being built" (but not used) because I tried to make the EMF pre-req specific to its "base", instead of "everything in EMF", but that bundle does depend on EMF's UI code (the only one that does) so it "blew up" when I changed the pre-req. While in theory it might not harm anything to "build everything" even if we don't need it, it seems a bad practice, and can cause us to pull in pre-reqs that probably should not be pulled in. For example, if someone else in SDK accidentally used EMF UI, I'd think we'd want the build to blow up, instead of silently including it, and then weeks/months later finding we had introduced some new dependencies. Its my understanding, if the incubating stuff stays in same repo, it needs to stay in the pom, as well. (In order to later build e4). Paul, is this bundle in the wrong git repository? Or are all the incubating pieces of e4 in there? This particular case might be able to be solved by using &lt;filters&gt; which literally remove modules from the target so they won't be built ... but ... I myself do not know which POM that should go in (the very very top most one?) or what kind of structure it should be part of [apologies for lack of "maven knowledge]. I experimented with different things, "by example", but none worked so obviously didn't know how to do it.</description>
      <attachments/>
    </issue>
    <issue>
      <id>398637</id>
      <title>Pattern Registry Tooling UI</title>
      <description>Cloned from: 385: Pattern Registry Tooling UI http://github.com/ujhelyiz/EMF-IncQuery/issues/issue/385 Main issue for the new pattern registry tooling ui implementation. The specification can be found on the following wiki page: https://trac.inf.mit.bme.hu/VIATRA/wiki/IncQuery2/PatternRegistry</description>
      <attachments/>
    </issue>
    <issue>
      <id>398767</id>
      <title>Create a Stack Exchange (-style) site for Eclipse-related tech Q&amp;A</title>
      <description>Created attachment 225946 [details] PDF of blog post describing reasons for proposal and proposal Hi, I'd like to propose the creation of a Stack Exchange (http://stackexchange.com/about) for technical Q&amp;A about Eclipse &amp; related topics. REASONS*: - Stack Exchange (SE) sites have a stronger focus on answers than message boards (MB)(e.g., the FUDForum software used at the Eclipse Community Forums). - SE is moderated by the community rather than a specific group of moderators, which helps avoid duplicates, and through editing and voting functionality will automatically improve the quality of answers users can find. - The best (and approved) answer to a question on a SE site will retain a much higher visibility (as it will remain on top of the question page) than answers on a MB, where it could have been followed by n other posts. - SE are less "noisy" than MB, as there is - through moderation - no place for anything but answers - provided moderation works well. No double posts/duplicates/socialising, etc. PROPOSAL: I’d like to propose a move of the Q&amp;A section of the Eclipse Community Forums, currently running on FUDForum software, to a Stack Exchange site. I believe that the Eclipse community will gain massively in doing so, for the following reasons (not comprehensive). - An Eclipse Stack Exchange site will be the one stop shop for all concrete questions related to Eclipse technologies (i.e., the Eclipse IDE in its various phenotypes as well as all Eclipse and Eclipse-related projects). Including those Eclipse-related projects which are not hosted at Eclipse will ensure that such a site will cover close to all things Eclipse. - The Eclipse Community will be able to leverage the above-mentioned advantages an SE site has over an MB: No more browsing long threads, no more badly placed questions, no more duplicates, no more off-topic noise, easy-to-find answers that have been approved by the community (in a best case scenario). - The Eclipse Community Forums (ECF) will become more readable, as the long lists of forums will be transformed into a list of tags on the SE site. Therefore the ECF will remain the first place to go for non-Q&amp;A-related interaction. Questions that aren’t strictly technical, such as project-related proposals, could be asked on a discussions site (similar to discuss.area51.stackexchange.com), and there would be a meta site, which would provide a Q&amp;A site about the Q&amp;A site (similar to meta.stackoverflow.com). As for the newsgroup (nntp) functionality provided by the ECF at the moment, I’d suggest every newsgroup gets a section on the project website it relates to. I’d like to propose the following split of the existing ECF over the two sites. Eclipse Community Forums | Eclipse SE ------------------------------------------------ Newcomers | Language IDEs General (non-technical) | Modeling Eclipse Working Groups | Eclipse Projects Proposals | Archived* | *Including the inactive(d) threads not to be moved to the Eclipse SE site *I've attached a PDF of a blog post of mine (http://newcodeontheblock.wordpress.com/2013/01/22/a-stack-exchange-site-for-the-eclipse-community/) providing more detailed reasons as well as the complete proposal.</description>
      <attachments/>
    </issue>
    <issue>
      <id>398835</id>
      <title>Mylyn should examine how long a query takes</title>
      <description>Mylyn polls Bugzilla repositories at regular intervals. It is possible for users to set up a Mylyn repository with search criteria that will execute on our database servers for 60 seconds, 90 seconds and often up to our 180 second limit. I've observed queries where a partial email address is searched across 6-8 plaintext fields in Bugzilla. These queries are fairly complex, time-out repeatedly after 180 seconds of execution time and, in the end, offer no benefit to the user. It would be great if Mylyn could track the average response time of such polls -- or, at the very least, examine the response, since the terminated queries must not contain a useful payload. If the server consistently terminates queries, or takes &gt; X seconds to respond, then perhaps the polling frequency should be reduced, and the user should be encouraged to reduce the complexity of their query.</description>
      <attachments/>
    </issue>
    <issue>
      <id>398874</id>
      <title>Dynamic EMF support</title>
      <description>Cloned from the following tickets: - https://github.com/ujhelyiz/EMF-IncQuery/issues/199 - https://github.com/ujhelyiz/EMF-IncQuery/issues/348</description>
      <attachments/>
    </issue>
    <issue>
      <id>399023</id>
      <title>CBI (Maven/Tycho) based build for Orion</title>
      <description>We are trying to adapt Orion to run on Virgo, the first obstacle we face is the PDE build which is hard to reproduce on a local developer machine. Hence we think it would simplify contributing to Orion if its build would be implemented with CBI (Maven/Tycho). This should simplify running reproducible builds both on developer machines and Hudson for continuous integration and release builds.</description>
      <attachments/>
    </issue>
    <issue>
      <id>399306</id>
      <title>[Security] Add password management</title>
      <description>For now, CDO UI doesn't provide any mean to change / reset passwords when the security manager is activated. This feature is nevertheless required to operate a CDO from the client side. The following elements should be added: - in CDO Sessions view, add an item "Change password" in the menu when the user is logged into the repository. This action should open a dialog asking for the previous password and twice the new one to avoid mistakes. All entries should be masked. Provision for checking the strength of the password should exist. - in CDO editor, for the security model, remove the "New Child/Password" item of the User contextual menu and replace it by "Change Password". This action should open a dialog similar to the previous one, but without asking for the previous password, which is obviously unknown from the Administrators. In both cases, the new password shall be sent encrypted to the server.</description>
      <attachments/>
    </issue>
    <issue>
      <id>399524</id>
      <title>Basic Java EE 7 support</title>
      <description>This will track the work for providing Java EE 7 spec version upgrades for the facet versions, for all the core module types currently supported. This will follow the same types of changes defined here: (https://bugs.eclipse.org/bugs/show_bug.cgi?id=252613)</description>
      <attachments/>
    </issue>
    <issue>
      <id>399550</id>
      <title>Add Custom Widget Extension Point to Resource Manager</title>
      <description>Add custom widget extension point providing a widget class and an update model class to the Resource Manager org.eclipse.ptp.rm.jaxb.control.ui plugin. &lt;extension-point id="widget" name="Widget and its Update Model" schema="schema/widget.exsd"/&gt; The impact to the programming is primarily to the org.eclipse.ptp.rm.jaxb.control.ui.UpdateModelFactory class and its methods: private static Control createControl(final Composite parent, ControlDescriptor cd, IJAXBLaunchConfigurationTab tab) and public static IUpdateModel createModel(Composite parent, WidgetType widget, IJAXBLaunchConfigurationTab tab, IVariableMap rmVarMap, Map&lt;String, Button&gt; sources, Map&lt;ControlStateType, Control&gt; targets) Sample plugin usage: &lt;extension point="org.eclipse.ptp.rm.jaxb.control.ui.widget"&gt; &lt;widget id="sample" name="Sample Widget and its Update Model" widgetClass="com.sample.SampleWidget" updateModelClass="com.sample.SampleUpdateModel"&gt; &lt;/widget&gt; &lt;/extension&gt; Sample resource manager (RM) widget usage. The type="sample" matches the extension point's id="sample": &lt;rm:widget type="sample" title="File Format" readOnly="true" style="SWT.LEFT" attribute="PERFSUITE_psrun.envvar.configuration_id_PS_HWPC_FORMAT"&gt; ... &lt;/rm:widget&gt;</description>
      <attachments/>
    </issue>
    <issue>
      <id>399558</id>
      <title>[Feature] Improve "Make Persistent" wizard to do attribute level annotations</title>
      <description>The "Make persistent" context menu on a java class brings up "Make Persistent" wizard. When the wizard finishes, @Entity is added to the java class and the new entity has been registered to persistence.xml (if wizard's "register" checkbox is checked). To make it more useful, we can allow user to select a db table as reference and map each field of the java class to a column in the db table. @Id, @Basic, @Column, @OneToMany etc. annotations can be added to the fields of the java class. The converted entity class will be very similar to what's generated by the "Generate Entities From Tables" wizard.</description>
      <attachments/>
    </issue>
    <issue>
      <id>399803</id>
      <title>Bugzilla puppet configuration should be reproducible</title>
      <description>The Bugzilla instances provisioned by puppet should correspond to an exact version, e.g. 3.6.12 (instead of the latest from the 3.6 branch). This will allow us to reproduce the exact configuration later on and explicitly control which versions are tested. defaultsites.pp should also specify this, e.g. and use a unique database and url location so multiple service releases of the same release branch can be run in parallel. bugzilla::site { "bugs-3.6.12": major =&gt; "3", minor =&gt; "6", service =&gt; "12", }</description>
      <attachments/>
    </issue>
    <issue>
      <id>399839</id>
      <title>[Table 2][ModelExplorer][Enhancement] The ModelExplorer must support the new Papyrus Table</title>
      <description>1/The ModelExplorer must display the new table. 2/The ModelExplorer must provide a rename action for the new table 3/The ModelExplorer must provide a delete action for the new table 4/The ModelExplorer must provide a duplicate action for the new table (see with Rémi S. for the specification of this point) 5/The ModelExplorer must support the Open, Reopen and Close action for the table</description>
      <attachments/>
    </issue>
    <issue>
      <id>399859</id>
      <title>[Profile Applications] Papyrus shall enable to manage profile applications in separate files</title>
      <description>Currently, profiles and stereotypes are necessarily serialized in the main *.uml file. Papyrus shall enable to manage profile/stereotype applications in separated, optional files. Users must be able to open the main *.uml model without loading the profile model(s).</description>
      <attachments/>
    </issue>
  </issues>
</root>
